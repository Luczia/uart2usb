
coregwUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e37c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800e648  0800e648  0001e648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e6d0  0800e6d0  0001e6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e6d8  0800e6d8  0001e6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e6dc  0800e6dc  0001e6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  0800e6e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d58  24000100  0800e7e0  00020100  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e58  0800e7e0  00020e58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c6a2  00000000  00000000  0002012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000397c  00000000  00000000  0003c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001248  00000000  00000000  00040150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010f0  00000000  00000000  00041398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034d9d  00000000  00000000  00042488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ac61  00000000  00000000  00077225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143935  00000000  00000000  00091e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d57bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b78  00000000  00000000  001d580c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000100 	.word	0x24000100
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e630 	.word	0x0800e630

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000104 	.word	0x24000104
 8000308:	0800e630 	.word	0x0800e630

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_UART_TxCpltCallback>:
uint8_t UART_rxBuffer[IMU_UART_FRAME_SIZE] = {0}; // Create a buffer to store bytes received from UART

// This function is an interrupt called when the UART Transmit (TX) function has finished transmitting the buffer.
// This function toggles the BLUE LED for user readability
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit_IT(&huart7, data, sizeof (data));  // You may uncomment this for debug
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000618:	2108      	movs	r1, #8
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <HAL_UART_TxCpltCallback+0x18>)
 800061c:	f003 fcef 	bl	8003ffe <HAL_GPIO_TogglePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58020c00 	.word	0x58020c00

0800062c <HAL_UART_RxCpltCallback>:

// This function is an interrupt called when the UART Received (RX) function has finished receiving IMU_UART_FRAME_SIZE bytes
// This function then sends the data over USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart7, UART_rxBuffer, IMU_UART_FRAME_SIZE, 100);  	// You may uncomment this line for debug
//	uint8_t buffer2[] = "Test";												// You may uncomment this line for debug
	CDC_Transmit_HS(UART_rxBuffer, sizeof(UART_rxBuffer));
 8000634:	210b      	movs	r1, #11
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <HAL_UART_RxCpltCallback+0x24>)
 8000638:	f00d fb7a 	bl	800dd30 <CDC_Transmit_HS>
    HAL_UART_Receive_DMA(&huart7, UART_rxBuffer, IMU_UART_FRAME_SIZE);
 800063c:	220b      	movs	r2, #11
 800063e:	4904      	ldr	r1, [pc, #16]	; (8000650 <HAL_UART_RxCpltCallback+0x24>)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <HAL_UART_RxCpltCallback+0x28>)
 8000642:	f007 fe05 	bl	8008250 <HAL_UART_Receive_DMA>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	24000228 	.word	0x24000228
 8000654:	2400011c 	.word	0x2400011c

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fb0e 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f81c 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f8fa 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 f8d8 	bl	800081c <MX_DMA_Init>
  MX_UART7_Init();
 800066c:	f000 f88a 	bl	8000784 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000670:	f00d fa98 	bl	800dba4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart7, UART_rxBuffer, IMU_UART_FRAME_SIZE);  // Activate the listening and saving though DMA UART Receive (RX) function
 8000674:	220b      	movs	r2, #11
 8000676:	4906      	ldr	r1, [pc, #24]	; (8000690 <main+0x38>)
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <main+0x3c>)
 800067a:	f007 fde9 	bl	8008250 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Blink the RED LED to show the user that main loop is running.
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800067e:	2110      	movs	r1, #16
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <main+0x40>)
 8000682:	f003 fcbc 	bl	8003ffe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	f000 fb89 	bl	8000da0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800068e:	e7f6      	b.n	800067e <main+0x26>
 8000690:	24000228 	.word	0x24000228
 8000694:	2400011c 	.word	0x2400011c
 8000698:	58020c00 	.word	0x58020c00

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	; 0x70
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	224c      	movs	r2, #76	; 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00d ffb8 	bl	800e620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00d ffb2 	bl	800e620 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006bc:	2002      	movs	r0, #2
 80006be:	f004 ff71 	bl	80055a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemClock_Config+0xe4>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ce:	4a2c      	ldr	r2, [pc, #176]	; (8000780 <SystemClock_Config+0xe4>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <SystemClock_Config+0xe4>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e2:	bf00      	nop
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <SystemClock_Config+0xe4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f0:	d1f8      	bne.n	80006e4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006f2:	2303      	movs	r3, #3
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000700:	2340      	movs	r3, #64	; 0x40
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000710:	230c      	movs	r3, #12
 8000712:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000720:	230c      	movs	r3, #12
 8000722:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000724:	2300      	movs	r3, #0
 8000726:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4618      	mov	r0, r3
 8000732:	f004 ff81 	bl	8005638 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800073c:	f000 f8f0 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	233f      	movs	r3, #63	; 0x3f
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000754:	2340      	movs	r3, #64	; 0x40
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2101      	movs	r1, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f005 fb40 	bl	8005dec <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000772:	f000 f8d5 	bl	8000920 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3770      	adds	r7, #112	; 0x70
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	58024800 	.word	0x58024800

08000784 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_UART7_Init+0x90>)
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_UART7_Init+0x94>)
 800078c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_UART7_Init+0x90>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_UART7_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_UART7_Init+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_UART7_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_UART7_Init+0x90>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_UART7_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_UART7_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_UART7_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_UART7_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_UART7_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_UART7_Init+0x90>)
 80007ce:	f007 fc5b 	bl	8008088 <HAL_UART_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 f8a2 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_UART7_Init+0x90>)
 80007e0:	f009 fdf7 	bl	800a3d2 <HAL_UARTEx_SetTxFifoThreshold>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 f899 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_UART7_Init+0x90>)
 80007f2:	f009 fe2c 	bl	800a44e <HAL_UARTEx_SetRxFifoThreshold>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80007fc:	f000 f890 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_UART7_Init+0x90>)
 8000802:	f009 fdad 	bl	800a360 <HAL_UARTEx_DisableFifoMode>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800080c:	f000 f888 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2400011c 	.word	0x2400011c
 8000818:	40007800 	.word	0x40007800

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_DMA_Init+0x3c>)
 8000824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <MX_DMA_Init+0x3c>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_DMA_Init+0x3c>)
 8000834:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2010      	movs	r0, #16
 8000846:	f000 fbaa 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800084a:	2010      	movs	r0, #16
 800084c:	f000 fbc1 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58024400 	.word	0x58024400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_GPIO_Init+0xbc>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000878:	4a27      	ldr	r2, [pc, #156]	; (8000918 <MX_GPIO_Init+0xbc>)
 800087a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_GPIO_Init+0xbc>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_GPIO_Init+0xbc>)
 8000892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000896:	4a20      	ldr	r2, [pc, #128]	; (8000918 <MX_GPIO_Init+0xbc>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a18      	ldr	r2, [pc, #96]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2118      	movs	r1, #24
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0xc0>)
 80008f0:	f003 fb6c 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 80008f4:	2318      	movs	r3, #24
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0xc0>)
 800090c:	f003 f9b6 	bl	8003c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	58024400 	.word	0x58024400
 800091c:	58020c00 	.word	0x58020c00

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_MspInit+0x30>)
 8000934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x30>)
 800093a:	f043 0302 	orr.w	r3, r3, #2
 800093e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x30>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	58024400 	.word	0x58024400

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0b8      	sub	sp, #224	; 0xe0
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	22b8      	movs	r2, #184	; 0xb8
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00d fe4d 	bl	800e620 <memset>
  if(huart->Instance==UART7)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a42      	ldr	r2, [pc, #264]	; (8000a94 <HAL_UART_MspInit+0x134>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d17c      	bne.n	8000a8a <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000990:	f04f 0202 	mov.w	r2, #2
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fdac 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80009b2:	f7ff ffb5 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80009b6:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <HAL_UART_MspInit+0x138>)
 80009b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009bc:	4a36      	ldr	r2, [pc, #216]	; (8000a98 <HAL_UART_MspInit+0x138>)
 80009be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80009c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009c6:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <HAL_UART_MspInit+0x138>)
 80009c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_UART_MspInit+0x138>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <HAL_UART_MspInit+0x138>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e4:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <HAL_UART_MspInit+0x138>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a16:	4619      	mov	r1, r3
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <HAL_UART_MspInit+0x13c>)
 8000a1a:	f003 f92f 	bl	8003c7c <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream5;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <HAL_UART_MspInit+0x144>)
 8000a22:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a26:	224f      	movs	r2, #79	; 0x4f
 8000a28:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8000a5c:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a5e:	f000 fad3 	bl	8001008 <HAL_DMA_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000a68:	f7ff ff5a 	bl	8000920 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_UART_MspInit+0x140>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2052      	movs	r0, #82	; 0x52
 8000a80:	f000 fa8d 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000a84:	2052      	movs	r0, #82	; 0x52
 8000a86:	f000 faa4 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	37e0      	adds	r7, #224	; 0xe0
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40007800 	.word	0x40007800
 8000a98:	58024400 	.word	0x58024400
 8000a9c:	58021000 	.word	0x58021000
 8000aa0:	240001b0 	.word	0x240001b0
 8000aa4:	40020088 	.word	0x40020088

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f934 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <DMA1_Stream5_IRQHandler+0x10>)
 8000b02:	f001 fda9 	bl	8002658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	240001b0 	.word	0x240001b0

08000b10 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <OTG_HS_IRQHandler+0x10>)
 8000b16:	f003 fbe5 	bl	80042e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2400072c 	.word	0x2400072c

08000b24 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <UART7_IRQHandler+0x10>)
 8000b2a:	f007 fbdd 	bl	80082e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2400011c 	.word	0x2400011c

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <SystemInit+0xd0>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <SystemInit+0xd0>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <SystemInit+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	2b06      	cmp	r3, #6
 8000b56:	d807      	bhi.n	8000b68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <SystemInit+0xd4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 030f 	bic.w	r3, r3, #15
 8000b60:	4a2a      	ldr	r2, [pc, #168]	; (8000c0c <SystemInit+0xd4>)
 8000b62:	f043 0307 	orr.w	r3, r3, #7
 8000b66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <SystemInit+0xd8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a28      	ldr	r2, [pc, #160]	; (8000c10 <SystemInit+0xd8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <SystemInit+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <SystemInit+0xd8>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4924      	ldr	r1, [pc, #144]	; (8000c10 <SystemInit+0xd8>)
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <SystemInit+0xdc>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <SystemInit+0xd4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <SystemInit+0xd4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f023 030f 	bic.w	r3, r3, #15
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <SystemInit+0xd4>)
 8000b9c:	f043 0307 	orr.w	r3, r3, #7
 8000ba0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <SystemInit+0xd8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <SystemInit+0xd8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <SystemInit+0xd8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <SystemInit+0xd8>)
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <SystemInit+0xe0>)
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <SystemInit+0xd8>)
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <SystemInit+0xe4>)
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <SystemInit+0xd8>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <SystemInit+0xe8>)
 8000bc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <SystemInit+0xd8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <SystemInit+0xd8>)
 8000bce:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <SystemInit+0xe8>)
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <SystemInit+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <SystemInit+0xd8>)
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <SystemInit+0xe8>)
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SystemInit+0xd8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <SystemInit+0xd8>)
 8000bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <SystemInit+0xd8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <SystemInit+0xec>)
 8000bf8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00
 8000c0c:	52002000 	.word	0x52002000
 8000c10:	58024400 	.word	0x58024400
 8000c14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c18:	02020200 	.word	0x02020200
 8000c1c:	01ff0000 	.word	0x01ff0000
 8000c20:	01010280 	.word	0x01010280
 8000c24:	52004000 	.word	0x52004000

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c2c:	f7ff ff84 	bl	8000b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f00d fcbf 	bl	800e5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fcfd 	bl	8000658 <main>
  bx  lr
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000c64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c68:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8000c6c:	0800e6e0 	.word	0x0800e6e0
  ldr r2, =_sbss
 8000c70:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8000c74:	24000e58 	.word	0x24000e58

08000c78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC3_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c82:	2003      	movs	r0, #3
 8000c84:	f000 f980 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c88:	f005 fa66 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_Init+0x68>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	f003 030f 	and.w	r3, r3, #15
 8000c98:	4913      	ldr	r1, [pc, #76]	; (8000ce8 <HAL_Init+0x6c>)
 8000c9a:	5ccb      	ldrb	r3, [r1, r3]
 8000c9c:	f003 031f 	and.w	r3, r3, #31
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_Init+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_Init+0x6c>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <HAL_Init+0x70>)
 8000cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_Init+0x74>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f814 	bl	8000cf4 <HAL_InitTick>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e002      	b.n	8000cdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd6:	f7ff fe29 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	0800e690 	.word	0x0800e690
 8000cec:	24000004 	.word	0x24000004
 8000cf0:	24000000 	.word	0x24000000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_InitTick+0x60>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e021      	b.n	8000d4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_InitTick+0x64>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_InitTick+0x60>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f965 	bl	8000fee <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f92f 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x68>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2400000c 	.word	0x2400000c
 8000d58:	24000000 	.word	0x24000000
 8000d5c:	24000008 	.word	0x24000008

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2400000c 	.word	0x2400000c
 8000d84:	24000234 	.word	0x24000234

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	24000234 	.word	0x24000234

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2400000c 	.word	0x2400000c

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	05fa0000 	.word	0x05fa0000

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff40 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff90 	bl	8000edc <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5f 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff33 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa4 	bl	8000f44 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff feba 	bl	8000d88 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e314      	b.n	800164a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a66      	ldr	r2, [pc, #408]	; (80011c0 <HAL_DMA_Init+0x1b8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d04a      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a65      	ldr	r2, [pc, #404]	; (80011c4 <HAL_DMA_Init+0x1bc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d045      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a63      	ldr	r2, [pc, #396]	; (80011c8 <HAL_DMA_Init+0x1c0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d040      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a62      	ldr	r2, [pc, #392]	; (80011cc <HAL_DMA_Init+0x1c4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d03b      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a60      	ldr	r2, [pc, #384]	; (80011d0 <HAL_DMA_Init+0x1c8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d036      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a5f      	ldr	r2, [pc, #380]	; (80011d4 <HAL_DMA_Init+0x1cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d031      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a5d      	ldr	r2, [pc, #372]	; (80011d8 <HAL_DMA_Init+0x1d0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02c      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a5c      	ldr	r2, [pc, #368]	; (80011dc <HAL_DMA_Init+0x1d4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d027      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a5a      	ldr	r2, [pc, #360]	; (80011e0 <HAL_DMA_Init+0x1d8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d022      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a59      	ldr	r2, [pc, #356]	; (80011e4 <HAL_DMA_Init+0x1dc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d01d      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a57      	ldr	r2, [pc, #348]	; (80011e8 <HAL_DMA_Init+0x1e0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d018      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a56      	ldr	r2, [pc, #344]	; (80011ec <HAL_DMA_Init+0x1e4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d013      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a54      	ldr	r2, [pc, #336]	; (80011f0 <HAL_DMA_Init+0x1e8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00e      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a53      	ldr	r2, [pc, #332]	; (80011f4 <HAL_DMA_Init+0x1ec>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d009      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_DMA_Init+0x1f0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d004      	beq.n	80010c0 <HAL_DMA_Init+0xb8>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_DMA_Init+0x1f4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_DMA_Init+0xbc>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_DMA_Init+0xbe>
 80010c4:	2300      	movs	r3, #0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 813c 	beq.w	8001344 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2202      	movs	r2, #2
 80010d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a37      	ldr	r2, [pc, #220]	; (80011c0 <HAL_DMA_Init+0x1b8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d04a      	beq.n	800117c <HAL_DMA_Init+0x174>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <HAL_DMA_Init+0x1bc>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d045      	beq.n	800117c <HAL_DMA_Init+0x174>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <HAL_DMA_Init+0x1c0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d040      	beq.n	800117c <HAL_DMA_Init+0x174>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <HAL_DMA_Init+0x1c4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d03b      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_DMA_Init+0x1c8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d036      	beq.n	800117c <HAL_DMA_Init+0x174>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <HAL_DMA_Init+0x1cc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d031      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <HAL_DMA_Init+0x1d0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02c      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <HAL_DMA_Init+0x1d4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d027      	beq.n	800117c <HAL_DMA_Init+0x174>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <HAL_DMA_Init+0x1d8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d022      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <HAL_DMA_Init+0x1dc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d01d      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <HAL_DMA_Init+0x1e0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d018      	beq.n	800117c <HAL_DMA_Init+0x174>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_DMA_Init+0x1e4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <HAL_DMA_Init+0x1e8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00e      	beq.n	800117c <HAL_DMA_Init+0x174>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <HAL_DMA_Init+0x1ec>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d009      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_DMA_Init+0x1f0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d004      	beq.n	800117c <HAL_DMA_Init+0x174>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <HAL_DMA_Init+0x1f4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d108      	bne.n	800118e <HAL_DMA_Init+0x186>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e007      	b.n	800119e <HAL_DMA_Init+0x196>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800119e:	e02f      	b.n	8001200 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a0:	f7ff fdf2 	bl	8000d88 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d928      	bls.n	8001200 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2220      	movs	r2, #32
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e244      	b.n	800164a <HAL_DMA_Init+0x642>
 80011c0:	40020010 	.word	0x40020010
 80011c4:	40020028 	.word	0x40020028
 80011c8:	40020040 	.word	0x40020040
 80011cc:	40020058 	.word	0x40020058
 80011d0:	40020070 	.word	0x40020070
 80011d4:	40020088 	.word	0x40020088
 80011d8:	400200a0 	.word	0x400200a0
 80011dc:	400200b8 	.word	0x400200b8
 80011e0:	40020410 	.word	0x40020410
 80011e4:	40020428 	.word	0x40020428
 80011e8:	40020440 	.word	0x40020440
 80011ec:	40020458 	.word	0x40020458
 80011f0:	40020470 	.word	0x40020470
 80011f4:	40020488 	.word	0x40020488
 80011f8:	400204a0 	.word	0x400204a0
 80011fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1c8      	bne.n	80011a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4b84      	ldr	r3, [pc, #528]	; (800142c <HAL_DMA_Init+0x424>)
 800121a:	4013      	ands	r3, r2
 800121c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001226:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001232:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	2b04      	cmp	r3, #4
 8001252:	d107      	bne.n	8001264 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4313      	orrs	r3, r2
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4313      	orrs	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b28      	cmp	r3, #40	; 0x28
 800126a:	d903      	bls.n	8001274 <HAL_DMA_Init+0x26c>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b2e      	cmp	r3, #46	; 0x2e
 8001272:	d91f      	bls.n	80012b4 <HAL_DMA_Init+0x2ac>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b3e      	cmp	r3, #62	; 0x3e
 800127a:	d903      	bls.n	8001284 <HAL_DMA_Init+0x27c>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b42      	cmp	r3, #66	; 0x42
 8001282:	d917      	bls.n	80012b4 <HAL_DMA_Init+0x2ac>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b46      	cmp	r3, #70	; 0x46
 800128a:	d903      	bls.n	8001294 <HAL_DMA_Init+0x28c>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b48      	cmp	r3, #72	; 0x48
 8001292:	d90f      	bls.n	80012b4 <HAL_DMA_Init+0x2ac>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b4e      	cmp	r3, #78	; 0x4e
 800129a:	d903      	bls.n	80012a4 <HAL_DMA_Init+0x29c>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b52      	cmp	r3, #82	; 0x52
 80012a2:	d907      	bls.n	80012b4 <HAL_DMA_Init+0x2ac>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b73      	cmp	r3, #115	; 0x73
 80012aa:	d905      	bls.n	80012b8 <HAL_DMA_Init+0x2b0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b77      	cmp	r3, #119	; 0x77
 80012b2:	d801      	bhi.n	80012b8 <HAL_DMA_Init+0x2b0>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_DMA_Init+0x2b2>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f023 0307 	bic.w	r3, r3, #7
 80012dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d117      	bne.n	8001320 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f002 fb30 	bl	8003968 <DMA_CheckFifoParam>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2240      	movs	r2, #64	; 0x40
 8001312:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e194      	b.n	800164a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f002 fa6b 	bl	8003804 <DMA_CalcBaseAndBitshift>
 800132e:	4603      	mov	r3, r0
 8001330:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	223f      	movs	r2, #63	; 0x3f
 800133c:	409a      	lsls	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	e0ca      	b.n	80014da <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a39      	ldr	r2, [pc, #228]	; (8001430 <HAL_DMA_Init+0x428>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d022      	beq.n	8001394 <HAL_DMA_Init+0x38c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <HAL_DMA_Init+0x42c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d01d      	beq.n	8001394 <HAL_DMA_Init+0x38c>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a36      	ldr	r2, [pc, #216]	; (8001438 <HAL_DMA_Init+0x430>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d018      	beq.n	8001394 <HAL_DMA_Init+0x38c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a35      	ldr	r2, [pc, #212]	; (800143c <HAL_DMA_Init+0x434>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_DMA_Init+0x38c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a33      	ldr	r2, [pc, #204]	; (8001440 <HAL_DMA_Init+0x438>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00e      	beq.n	8001394 <HAL_DMA_Init+0x38c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a32      	ldr	r2, [pc, #200]	; (8001444 <HAL_DMA_Init+0x43c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d009      	beq.n	8001394 <HAL_DMA_Init+0x38c>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a30      	ldr	r2, [pc, #192]	; (8001448 <HAL_DMA_Init+0x440>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d004      	beq.n	8001394 <HAL_DMA_Init+0x38c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_DMA_Init+0x444>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_DMA_Init+0x390>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_DMA_Init+0x392>
 8001398:	2300      	movs	r3, #0
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8094 	beq.w	80014c8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_DMA_Init+0x428>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d021      	beq.n	80013ee <HAL_DMA_Init+0x3e6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <HAL_DMA_Init+0x42c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d01c      	beq.n	80013ee <HAL_DMA_Init+0x3e6>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_DMA_Init+0x430>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d017      	beq.n	80013ee <HAL_DMA_Init+0x3e6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_DMA_Init+0x434>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d012      	beq.n	80013ee <HAL_DMA_Init+0x3e6>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_DMA_Init+0x438>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_DMA_Init+0x3e6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_DMA_Init+0x43c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d008      	beq.n	80013ee <HAL_DMA_Init+0x3e6>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_DMA_Init+0x440>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d003      	beq.n	80013ee <HAL_DMA_Init+0x3e6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_DMA_Init+0x444>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_DMA_Init+0x448>)
 800140c:	4013      	ands	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b40      	cmp	r3, #64	; 0x40
 8001416:	d01d      	beq.n	8001454 <HAL_DMA_Init+0x44c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b80      	cmp	r3, #128	; 0x80
 800141e:	d102      	bne.n	8001426 <HAL_DMA_Init+0x41e>
 8001420:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001424:	e017      	b.n	8001456 <HAL_DMA_Init+0x44e>
 8001426:	2300      	movs	r3, #0
 8001428:	e015      	b.n	8001456 <HAL_DMA_Init+0x44e>
 800142a:	bf00      	nop
 800142c:	fe10803f 	.word	0xfe10803f
 8001430:	58025408 	.word	0x58025408
 8001434:	5802541c 	.word	0x5802541c
 8001438:	58025430 	.word	0x58025430
 800143c:	58025444 	.word	0x58025444
 8001440:	58025458 	.word	0x58025458
 8001444:	5802546c 	.word	0x5802546c
 8001448:	58025480 	.word	0x58025480
 800144c:	58025494 	.word	0x58025494
 8001450:	fffe000f 	.word	0xfffe000f
 8001454:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68d2      	ldr	r2, [r2, #12]
 800145a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800145c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800146c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800147c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001484:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <HAL_DMA_Init+0x64c>)
 800149c:	4413      	add	r3, r2
 800149e:	4a6e      	ldr	r2, [pc, #440]	; (8001658 <HAL_DMA_Init+0x650>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	009a      	lsls	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f002 f9a9 	bl	8003804 <DMA_CalcBaseAndBitshift>
 80014b2:	4603      	mov	r3, r0
 80014b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2201      	movs	r2, #1
 80014c0:	409a      	lsls	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	e008      	b.n	80014da <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2203      	movs	r2, #3
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0b7      	b.n	800164a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a5f      	ldr	r2, [pc, #380]	; (800165c <HAL_DMA_Init+0x654>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d072      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a5d      	ldr	r2, [pc, #372]	; (8001660 <HAL_DMA_Init+0x658>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d06d      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a5c      	ldr	r2, [pc, #368]	; (8001664 <HAL_DMA_Init+0x65c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d068      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <HAL_DMA_Init+0x660>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d063      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a59      	ldr	r2, [pc, #356]	; (800166c <HAL_DMA_Init+0x664>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d05e      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_DMA_Init+0x668>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d059      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a56      	ldr	r2, [pc, #344]	; (8001674 <HAL_DMA_Init+0x66c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d054      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_DMA_Init+0x670>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d04f      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a53      	ldr	r2, [pc, #332]	; (800167c <HAL_DMA_Init+0x674>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d04a      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_DMA_Init+0x678>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d045      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_DMA_Init+0x67c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d040      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a4e      	ldr	r2, [pc, #312]	; (8001688 <HAL_DMA_Init+0x680>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d03b      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a4d      	ldr	r2, [pc, #308]	; (800168c <HAL_DMA_Init+0x684>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d036      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_DMA_Init+0x688>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d031      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_DMA_Init+0x68c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d02c      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <HAL_DMA_Init+0x690>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d027      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a47      	ldr	r2, [pc, #284]	; (800169c <HAL_DMA_Init+0x694>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d022      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <HAL_DMA_Init+0x698>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01d      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <HAL_DMA_Init+0x69c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d018      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <HAL_DMA_Init+0x6a0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a41      	ldr	r2, [pc, #260]	; (80016ac <HAL_DMA_Init+0x6a4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00e      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <HAL_DMA_Init+0x6a8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d009      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a3e      	ldr	r2, [pc, #248]	; (80016b4 <HAL_DMA_Init+0x6ac>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d004      	beq.n	80015ca <HAL_DMA_Init+0x5c2>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a3c      	ldr	r2, [pc, #240]	; (80016b8 <HAL_DMA_Init+0x6b0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_DMA_Init+0x5c6>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_DMA_Init+0x5c8>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d032      	beq.n	800163a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f002 fa43 	bl	8003a60 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b80      	cmp	r3, #128	; 0x80
 80015e0:	d102      	bne.n	80015e8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80015fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d010      	beq.n	8001628 <HAL_DMA_Init+0x620>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d80c      	bhi.n	8001628 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f002 fac0 	bl	8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	e008      	b.n	800163a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	a7fdabf8 	.word	0xa7fdabf8
 8001658:	cccccccd 	.word	0xcccccccd
 800165c:	40020010 	.word	0x40020010
 8001660:	40020028 	.word	0x40020028
 8001664:	40020040 	.word	0x40020040
 8001668:	40020058 	.word	0x40020058
 800166c:	40020070 	.word	0x40020070
 8001670:	40020088 	.word	0x40020088
 8001674:	400200a0 	.word	0x400200a0
 8001678:	400200b8 	.word	0x400200b8
 800167c:	40020410 	.word	0x40020410
 8001680:	40020428 	.word	0x40020428
 8001684:	40020440 	.word	0x40020440
 8001688:	40020458 	.word	0x40020458
 800168c:	40020470 	.word	0x40020470
 8001690:	40020488 	.word	0x40020488
 8001694:	400204a0 	.word	0x400204a0
 8001698:	400204b8 	.word	0x400204b8
 800169c:	58025408 	.word	0x58025408
 80016a0:	5802541c 	.word	0x5802541c
 80016a4:	58025430 	.word	0x58025430
 80016a8:	58025444 	.word	0x58025444
 80016ac:	58025458 	.word	0x58025458
 80016b0:	5802546c 	.word	0x5802546c
 80016b4:	58025480 	.word	0x58025480
 80016b8:	58025494 	.word	0x58025494

080016bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e226      	b.n	8001b26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_DMA_Start_IT+0x2a>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e21f      	b.n	8001b26 <HAL_DMA_Start_IT+0x46a>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	f040 820a 	bne.w	8001b10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a68      	ldr	r2, [pc, #416]	; (80018b0 <HAL_DMA_Start_IT+0x1f4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d04a      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a66      	ldr	r2, [pc, #408]	; (80018b4 <HAL_DMA_Start_IT+0x1f8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d045      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <HAL_DMA_Start_IT+0x1fc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d040      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a63      	ldr	r2, [pc, #396]	; (80018bc <HAL_DMA_Start_IT+0x200>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d03b      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a62      	ldr	r2, [pc, #392]	; (80018c0 <HAL_DMA_Start_IT+0x204>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d036      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a60      	ldr	r2, [pc, #384]	; (80018c4 <HAL_DMA_Start_IT+0x208>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d031      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5f      	ldr	r2, [pc, #380]	; (80018c8 <HAL_DMA_Start_IT+0x20c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d02c      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <HAL_DMA_Start_IT+0x210>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d027      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5c      	ldr	r2, [pc, #368]	; (80018d0 <HAL_DMA_Start_IT+0x214>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d022      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <HAL_DMA_Start_IT+0x218>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01d      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a59      	ldr	r2, [pc, #356]	; (80018d8 <HAL_DMA_Start_IT+0x21c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d018      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a57      	ldr	r2, [pc, #348]	; (80018dc <HAL_DMA_Start_IT+0x220>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a56      	ldr	r2, [pc, #344]	; (80018e0 <HAL_DMA_Start_IT+0x224>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00e      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_DMA_Start_IT+0x228>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d009      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a53      	ldr	r2, [pc, #332]	; (80018e8 <HAL_DMA_Start_IT+0x22c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d004      	beq.n	80017aa <HAL_DMA_Start_IT+0xee>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <HAL_DMA_Start_IT+0x230>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d108      	bne.n	80017bc <HAL_DMA_Start_IT+0x100>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	e007      	b.n	80017cc <HAL_DMA_Start_IT+0x110>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f001 fe6a 	bl	80034ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a34      	ldr	r2, [pc, #208]	; (80018b0 <HAL_DMA_Start_IT+0x1f4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d04a      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a33      	ldr	r2, [pc, #204]	; (80018b4 <HAL_DMA_Start_IT+0x1f8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d045      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <HAL_DMA_Start_IT+0x1fc>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d040      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a30      	ldr	r2, [pc, #192]	; (80018bc <HAL_DMA_Start_IT+0x200>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d03b      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2e      	ldr	r2, [pc, #184]	; (80018c0 <HAL_DMA_Start_IT+0x204>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d036      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <HAL_DMA_Start_IT+0x208>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d031      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <HAL_DMA_Start_IT+0x20c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d02c      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <HAL_DMA_Start_IT+0x210>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d027      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_DMA_Start_IT+0x214>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d022      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <HAL_DMA_Start_IT+0x218>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d01d      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <HAL_DMA_Start_IT+0x21c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d018      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a24      	ldr	r2, [pc, #144]	; (80018dc <HAL_DMA_Start_IT+0x220>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d013      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <HAL_DMA_Start_IT+0x224>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00e      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <HAL_DMA_Start_IT+0x228>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d009      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <HAL_DMA_Start_IT+0x22c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d004      	beq.n	8001878 <HAL_DMA_Start_IT+0x1bc>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <HAL_DMA_Start_IT+0x230>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_DMA_Start_IT+0x1c0>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_DMA_Start_IT+0x1c2>
 800187c:	2300      	movs	r3, #0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d036      	beq.n	80018f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 021e 	bic.w	r2, r3, #30
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0216 	orr.w	r2, r2, #22
 8001894:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03e      	beq.n	800191c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e035      	b.n	800191c <HAL_DMA_Start_IT+0x260>
 80018b0:	40020010 	.word	0x40020010
 80018b4:	40020028 	.word	0x40020028
 80018b8:	40020040 	.word	0x40020040
 80018bc:	40020058 	.word	0x40020058
 80018c0:	40020070 	.word	0x40020070
 80018c4:	40020088 	.word	0x40020088
 80018c8:	400200a0 	.word	0x400200a0
 80018cc:	400200b8 	.word	0x400200b8
 80018d0:	40020410 	.word	0x40020410
 80018d4:	40020428 	.word	0x40020428
 80018d8:	40020440 	.word	0x40020440
 80018dc:	40020458 	.word	0x40020458
 80018e0:	40020470 	.word	0x40020470
 80018e4:	40020488 	.word	0x40020488
 80018e8:	400204a0 	.word	0x400204a0
 80018ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 020e 	bic.w	r2, r3, #14
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 020a 	orr.w	r2, r2, #10
 8001902:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0204 	orr.w	r2, r2, #4
 800191a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a83      	ldr	r2, [pc, #524]	; (8001b30 <HAL_DMA_Start_IT+0x474>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d072      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a82      	ldr	r2, [pc, #520]	; (8001b34 <HAL_DMA_Start_IT+0x478>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d06d      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a80      	ldr	r2, [pc, #512]	; (8001b38 <HAL_DMA_Start_IT+0x47c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d068      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7f      	ldr	r2, [pc, #508]	; (8001b3c <HAL_DMA_Start_IT+0x480>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d063      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a7d      	ldr	r2, [pc, #500]	; (8001b40 <HAL_DMA_Start_IT+0x484>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d05e      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7c      	ldr	r2, [pc, #496]	; (8001b44 <HAL_DMA_Start_IT+0x488>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d059      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a7a      	ldr	r2, [pc, #488]	; (8001b48 <HAL_DMA_Start_IT+0x48c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d054      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a79      	ldr	r2, [pc, #484]	; (8001b4c <HAL_DMA_Start_IT+0x490>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04f      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <HAL_DMA_Start_IT+0x494>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d04a      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a76      	ldr	r2, [pc, #472]	; (8001b54 <HAL_DMA_Start_IT+0x498>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d045      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a74      	ldr	r2, [pc, #464]	; (8001b58 <HAL_DMA_Start_IT+0x49c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d040      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a73      	ldr	r2, [pc, #460]	; (8001b5c <HAL_DMA_Start_IT+0x4a0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d03b      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a71      	ldr	r2, [pc, #452]	; (8001b60 <HAL_DMA_Start_IT+0x4a4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d036      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a70      	ldr	r2, [pc, #448]	; (8001b64 <HAL_DMA_Start_IT+0x4a8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d031      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <HAL_DMA_Start_IT+0x4ac>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d02c      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6d      	ldr	r2, [pc, #436]	; (8001b6c <HAL_DMA_Start_IT+0x4b0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d027      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <HAL_DMA_Start_IT+0x4b4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d022      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_DMA_Start_IT+0x4b8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d01d      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a68      	ldr	r2, [pc, #416]	; (8001b78 <HAL_DMA_Start_IT+0x4bc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d018      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a67      	ldr	r2, [pc, #412]	; (8001b7c <HAL_DMA_Start_IT+0x4c0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <HAL_DMA_Start_IT+0x4c4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00e      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a64      	ldr	r2, [pc, #400]	; (8001b84 <HAL_DMA_Start_IT+0x4c8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d009      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a62      	ldr	r2, [pc, #392]	; (8001b88 <HAL_DMA_Start_IT+0x4cc>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d004      	beq.n	8001a0c <HAL_DMA_Start_IT+0x350>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a61      	ldr	r2, [pc, #388]	; (8001b8c <HAL_DMA_Start_IT+0x4d0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_DMA_Start_IT+0x354>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_DMA_Start_IT+0x356>
 8001a10:	2300      	movs	r3, #0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01a      	beq.n	8001a4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a37      	ldr	r2, [pc, #220]	; (8001b30 <HAL_DMA_Start_IT+0x474>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d04a      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a36      	ldr	r2, [pc, #216]	; (8001b34 <HAL_DMA_Start_IT+0x478>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d045      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <HAL_DMA_Start_IT+0x47c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d040      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a33      	ldr	r2, [pc, #204]	; (8001b3c <HAL_DMA_Start_IT+0x480>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d03b      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <HAL_DMA_Start_IT+0x484>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d036      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a30      	ldr	r2, [pc, #192]	; (8001b44 <HAL_DMA_Start_IT+0x488>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d031      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	; (8001b48 <HAL_DMA_Start_IT+0x48c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d02c      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <HAL_DMA_Start_IT+0x490>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d027      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <HAL_DMA_Start_IT+0x494>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d022      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <HAL_DMA_Start_IT+0x498>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d01d      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <HAL_DMA_Start_IT+0x49c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d018      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_DMA_Start_IT+0x4a0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d013      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <HAL_DMA_Start_IT+0x4a4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00e      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_DMA_Start_IT+0x4a8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d009      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_DMA_Start_IT+0x4ac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d004      	beq.n	8001aec <HAL_DMA_Start_IT+0x430>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_DMA_Start_IT+0x4b0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d108      	bne.n	8001afe <HAL_DMA_Start_IT+0x442>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e012      	b.n	8001b24 <HAL_DMA_Start_IT+0x468>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e009      	b.n	8001b24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40020010 	.word	0x40020010
 8001b34:	40020028 	.word	0x40020028
 8001b38:	40020040 	.word	0x40020040
 8001b3c:	40020058 	.word	0x40020058
 8001b40:	40020070 	.word	0x40020070
 8001b44:	40020088 	.word	0x40020088
 8001b48:	400200a0 	.word	0x400200a0
 8001b4c:	400200b8 	.word	0x400200b8
 8001b50:	40020410 	.word	0x40020410
 8001b54:	40020428 	.word	0x40020428
 8001b58:	40020440 	.word	0x40020440
 8001b5c:	40020458 	.word	0x40020458
 8001b60:	40020470 	.word	0x40020470
 8001b64:	40020488 	.word	0x40020488
 8001b68:	400204a0 	.word	0x400204a0
 8001b6c:	400204b8 	.word	0x400204b8
 8001b70:	58025408 	.word	0x58025408
 8001b74:	5802541c 	.word	0x5802541c
 8001b78:	58025430 	.word	0x58025430
 8001b7c:	58025444 	.word	0x58025444
 8001b80:	58025458 	.word	0x58025458
 8001b84:	5802546c 	.word	0x5802546c
 8001b88:	58025480 	.word	0x58025480
 8001b8c:	58025494 	.word	0x58025494

08001b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff f8f6 	bl	8000d88 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e2dc      	b.n	8002162 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d008      	beq.n	8001bc6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e2cd      	b.n	8002162 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a76      	ldr	r2, [pc, #472]	; (8001da4 <HAL_DMA_Abort+0x214>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04a      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a74      	ldr	r2, [pc, #464]	; (8001da8 <HAL_DMA_Abort+0x218>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d045      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a73      	ldr	r2, [pc, #460]	; (8001dac <HAL_DMA_Abort+0x21c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d040      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a71      	ldr	r2, [pc, #452]	; (8001db0 <HAL_DMA_Abort+0x220>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d03b      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a70      	ldr	r2, [pc, #448]	; (8001db4 <HAL_DMA_Abort+0x224>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d036      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_DMA_Abort+0x228>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d031      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6d      	ldr	r2, [pc, #436]	; (8001dbc <HAL_DMA_Abort+0x22c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d02c      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6b      	ldr	r2, [pc, #428]	; (8001dc0 <HAL_DMA_Abort+0x230>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d027      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6a      	ldr	r2, [pc, #424]	; (8001dc4 <HAL_DMA_Abort+0x234>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a68      	ldr	r2, [pc, #416]	; (8001dc8 <HAL_DMA_Abort+0x238>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01d      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a67      	ldr	r2, [pc, #412]	; (8001dcc <HAL_DMA_Abort+0x23c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d018      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a65      	ldr	r2, [pc, #404]	; (8001dd0 <HAL_DMA_Abort+0x240>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a64      	ldr	r2, [pc, #400]	; (8001dd4 <HAL_DMA_Abort+0x244>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00e      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a62      	ldr	r2, [pc, #392]	; (8001dd8 <HAL_DMA_Abort+0x248>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d009      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a61      	ldr	r2, [pc, #388]	; (8001ddc <HAL_DMA_Abort+0x24c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_DMA_Abort+0xd6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a5f      	ldr	r2, [pc, #380]	; (8001de0 <HAL_DMA_Abort+0x250>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Abort+0xda>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_DMA_Abort+0xdc>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 021e 	bic.w	r2, r2, #30
 8001c7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e00a      	b.n	8001cae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 020e 	bic.w	r2, r2, #14
 8001ca6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <HAL_DMA_Abort+0x214>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d072      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <HAL_DMA_Abort+0x218>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d06d      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a39      	ldr	r2, [pc, #228]	; (8001dac <HAL_DMA_Abort+0x21c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d068      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <HAL_DMA_Abort+0x220>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d063      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a36      	ldr	r2, [pc, #216]	; (8001db4 <HAL_DMA_Abort+0x224>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d05e      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_DMA_Abort+0x228>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d059      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <HAL_DMA_Abort+0x22c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d054      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a31      	ldr	r2, [pc, #196]	; (8001dc0 <HAL_DMA_Abort+0x230>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d04f      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a30      	ldr	r2, [pc, #192]	; (8001dc4 <HAL_DMA_Abort+0x234>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d04a      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2e      	ldr	r2, [pc, #184]	; (8001dc8 <HAL_DMA_Abort+0x238>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d045      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <HAL_DMA_Abort+0x23c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d040      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <HAL_DMA_Abort+0x240>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d03b      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2a      	ldr	r2, [pc, #168]	; (8001dd4 <HAL_DMA_Abort+0x244>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d036      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a28      	ldr	r2, [pc, #160]	; (8001dd8 <HAL_DMA_Abort+0x248>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d031      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <HAL_DMA_Abort+0x24c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d02c      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_DMA_Abort+0x250>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d027      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <HAL_DMA_Abort+0x254>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d022      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a22      	ldr	r2, [pc, #136]	; (8001de8 <HAL_DMA_Abort+0x258>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01d      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a21      	ldr	r2, [pc, #132]	; (8001dec <HAL_DMA_Abort+0x25c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d018      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_DMA_Abort+0x260>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_DMA_Abort+0x264>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00e      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <HAL_DMA_Abort+0x268>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_DMA_Abort+0x26c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_DMA_Abort+0x20e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_DMA_Abort+0x270>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d132      	bne.n	8001e04 <HAL_DMA_Abort+0x274>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e031      	b.n	8001e06 <HAL_DMA_Abort+0x276>
 8001da2:	bf00      	nop
 8001da4:	40020010 	.word	0x40020010
 8001da8:	40020028 	.word	0x40020028
 8001dac:	40020040 	.word	0x40020040
 8001db0:	40020058 	.word	0x40020058
 8001db4:	40020070 	.word	0x40020070
 8001db8:	40020088 	.word	0x40020088
 8001dbc:	400200a0 	.word	0x400200a0
 8001dc0:	400200b8 	.word	0x400200b8
 8001dc4:	40020410 	.word	0x40020410
 8001dc8:	40020428 	.word	0x40020428
 8001dcc:	40020440 	.word	0x40020440
 8001dd0:	40020458 	.word	0x40020458
 8001dd4:	40020470 	.word	0x40020470
 8001dd8:	40020488 	.word	0x40020488
 8001ddc:	400204a0 	.word	0x400204a0
 8001de0:	400204b8 	.word	0x400204b8
 8001de4:	58025408 	.word	0x58025408
 8001de8:	5802541c 	.word	0x5802541c
 8001dec:	58025430 	.word	0x58025430
 8001df0:	58025444 	.word	0x58025444
 8001df4:	58025458 	.word	0x58025458
 8001df8:	5802546c 	.word	0x5802546c
 8001dfc:	58025480 	.word	0x58025480
 8001e00:	58025494 	.word	0x58025494
 8001e04:	2300      	movs	r3, #0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6d      	ldr	r2, [pc, #436]	; (8001fd4 <HAL_DMA_Abort+0x444>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d04a      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a6b      	ldr	r2, [pc, #428]	; (8001fd8 <HAL_DMA_Abort+0x448>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d045      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_DMA_Abort+0x44c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d040      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a68      	ldr	r2, [pc, #416]	; (8001fe0 <HAL_DMA_Abort+0x450>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d03b      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a67      	ldr	r2, [pc, #412]	; (8001fe4 <HAL_DMA_Abort+0x454>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d036      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a65      	ldr	r2, [pc, #404]	; (8001fe8 <HAL_DMA_Abort+0x458>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a64      	ldr	r2, [pc, #400]	; (8001fec <HAL_DMA_Abort+0x45c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d02c      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a62      	ldr	r2, [pc, #392]	; (8001ff0 <HAL_DMA_Abort+0x460>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d027      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a61      	ldr	r2, [pc, #388]	; (8001ff4 <HAL_DMA_Abort+0x464>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5f      	ldr	r2, [pc, #380]	; (8001ff8 <HAL_DMA_Abort+0x468>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01d      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5e      	ldr	r2, [pc, #376]	; (8001ffc <HAL_DMA_Abort+0x46c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5c      	ldr	r2, [pc, #368]	; (8002000 <HAL_DMA_Abort+0x470>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5b      	ldr	r2, [pc, #364]	; (8002004 <HAL_DMA_Abort+0x474>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00e      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a59      	ldr	r2, [pc, #356]	; (8002008 <HAL_DMA_Abort+0x478>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_DMA_Abort+0x47c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_DMA_Abort+0x32a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a56      	ldr	r2, [pc, #344]	; (8002010 <HAL_DMA_Abort+0x480>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <HAL_DMA_Abort+0x33c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e007      	b.n	8001edc <HAL_DMA_Abort+0x34c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001edc:	e013      	b.n	8001f06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ede:	f7fe ff53 	bl	8000d88 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d90c      	bls.n	8001f06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e12d      	b.n	8002162 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e5      	bne.n	8001ede <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <HAL_DMA_Abort+0x444>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04a      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <HAL_DMA_Abort+0x448>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d045      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2c      	ldr	r2, [pc, #176]	; (8001fdc <HAL_DMA_Abort+0x44c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d040      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <HAL_DMA_Abort+0x450>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03b      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <HAL_DMA_Abort+0x454>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d036      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <HAL_DMA_Abort+0x458>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_DMA_Abort+0x45c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02c      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_DMA_Abort+0x460>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d027      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <HAL_DMA_Abort+0x464>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_DMA_Abort+0x468>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_DMA_Abort+0x46c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_DMA_Abort+0x470>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_DMA_Abort+0x474>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_DMA_Abort+0x478>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_DMA_Abort+0x47c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_Abort+0x422>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a18      	ldr	r2, [pc, #96]	; (8002010 <HAL_DMA_Abort+0x480>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Abort+0x426>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_Abort+0x428>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d02b      	beq.n	8002014 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	223f      	movs	r2, #63	; 0x3f
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	e02a      	b.n	800202a <HAL_DMA_Abort+0x49a>
 8001fd4:	40020010 	.word	0x40020010
 8001fd8:	40020028 	.word	0x40020028
 8001fdc:	40020040 	.word	0x40020040
 8001fe0:	40020058 	.word	0x40020058
 8001fe4:	40020070 	.word	0x40020070
 8001fe8:	40020088 	.word	0x40020088
 8001fec:	400200a0 	.word	0x400200a0
 8001ff0:	400200b8 	.word	0x400200b8
 8001ff4:	40020410 	.word	0x40020410
 8001ff8:	40020428 	.word	0x40020428
 8001ffc:	40020440 	.word	0x40020440
 8002000:	40020458 	.word	0x40020458
 8002004:	40020470 	.word	0x40020470
 8002008:	40020488 	.word	0x40020488
 800200c:	400204a0 	.word	0x400204a0
 8002010:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2201      	movs	r2, #1
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a4f      	ldr	r2, [pc, #316]	; (800216c <HAL_DMA_Abort+0x5dc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d072      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4d      	ldr	r2, [pc, #308]	; (8002170 <HAL_DMA_Abort+0x5e0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d06d      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_DMA_Abort+0x5e4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d068      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <HAL_DMA_Abort+0x5e8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d063      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_DMA_Abort+0x5ec>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d05e      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a47      	ldr	r2, [pc, #284]	; (8002180 <HAL_DMA_Abort+0x5f0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d059      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a46      	ldr	r2, [pc, #280]	; (8002184 <HAL_DMA_Abort+0x5f4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d054      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a44      	ldr	r2, [pc, #272]	; (8002188 <HAL_DMA_Abort+0x5f8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d04f      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a43      	ldr	r2, [pc, #268]	; (800218c <HAL_DMA_Abort+0x5fc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d04a      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a41      	ldr	r2, [pc, #260]	; (8002190 <HAL_DMA_Abort+0x600>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d045      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <HAL_DMA_Abort+0x604>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d040      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3e      	ldr	r2, [pc, #248]	; (8002198 <HAL_DMA_Abort+0x608>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d03b      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a3d      	ldr	r2, [pc, #244]	; (800219c <HAL_DMA_Abort+0x60c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d036      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3b      	ldr	r2, [pc, #236]	; (80021a0 <HAL_DMA_Abort+0x610>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d031      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <HAL_DMA_Abort+0x614>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d02c      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a38      	ldr	r2, [pc, #224]	; (80021a8 <HAL_DMA_Abort+0x618>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d027      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a37      	ldr	r2, [pc, #220]	; (80021ac <HAL_DMA_Abort+0x61c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d022      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <HAL_DMA_Abort+0x620>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01d      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a34      	ldr	r2, [pc, #208]	; (80021b4 <HAL_DMA_Abort+0x624>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d018      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a32      	ldr	r2, [pc, #200]	; (80021b8 <HAL_DMA_Abort+0x628>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a31      	ldr	r2, [pc, #196]	; (80021bc <HAL_DMA_Abort+0x62c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00e      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <HAL_DMA_Abort+0x630>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <HAL_DMA_Abort+0x634>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_DMA_Abort+0x58a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <HAL_DMA_Abort+0x638>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_DMA_Abort+0x58e>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_DMA_Abort+0x590>
 800211e:	2300      	movs	r3, #0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800212c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00c      	beq.n	8002150 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002144:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800214e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40020010 	.word	0x40020010
 8002170:	40020028 	.word	0x40020028
 8002174:	40020040 	.word	0x40020040
 8002178:	40020058 	.word	0x40020058
 800217c:	40020070 	.word	0x40020070
 8002180:	40020088 	.word	0x40020088
 8002184:	400200a0 	.word	0x400200a0
 8002188:	400200b8 	.word	0x400200b8
 800218c:	40020410 	.word	0x40020410
 8002190:	40020428 	.word	0x40020428
 8002194:	40020440 	.word	0x40020440
 8002198:	40020458 	.word	0x40020458
 800219c:	40020470 	.word	0x40020470
 80021a0:	40020488 	.word	0x40020488
 80021a4:	400204a0 	.word	0x400204a0
 80021a8:	400204b8 	.word	0x400204b8
 80021ac:	58025408 	.word	0x58025408
 80021b0:	5802541c 	.word	0x5802541c
 80021b4:	58025430 	.word	0x58025430
 80021b8:	58025444 	.word	0x58025444
 80021bc:	58025458 	.word	0x58025458
 80021c0:	5802546c 	.word	0x5802546c
 80021c4:	58025480 	.word	0x58025480
 80021c8:	58025494 	.word	0x58025494

080021cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e237      	b.n	800264e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d004      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e22c      	b.n	800264e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_DMA_Abort_IT+0x1a0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04a      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <HAL_DMA_Abort_IT+0x1a4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d045      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a59      	ldr	r2, [pc, #356]	; (8002374 <HAL_DMA_Abort_IT+0x1a8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d040      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_DMA_Abort_IT+0x1ac>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d03b      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_DMA_Abort_IT+0x1b0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a55      	ldr	r2, [pc, #340]	; (8002380 <HAL_DMA_Abort_IT+0x1b4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d031      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a53      	ldr	r2, [pc, #332]	; (8002384 <HAL_DMA_Abort_IT+0x1b8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02c      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_DMA_Abort_IT+0x1bc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d027      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a50      	ldr	r2, [pc, #320]	; (800238c <HAL_DMA_Abort_IT+0x1c0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4f      	ldr	r2, [pc, #316]	; (8002390 <HAL_DMA_Abort_IT+0x1c4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01d      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a4d      	ldr	r2, [pc, #308]	; (8002394 <HAL_DMA_Abort_IT+0x1c8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d018      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4c      	ldr	r2, [pc, #304]	; (8002398 <HAL_DMA_Abort_IT+0x1cc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4a      	ldr	r2, [pc, #296]	; (800239c <HAL_DMA_Abort_IT+0x1d0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00e      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a49      	ldr	r2, [pc, #292]	; (80023a0 <HAL_DMA_Abort_IT+0x1d4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a47      	ldr	r2, [pc, #284]	; (80023a4 <HAL_DMA_Abort_IT+0x1d8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_DMA_Abort_IT+0xc8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_DMA_Abort_IT+0x1dc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Abort_IT+0xcc>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_DMA_Abort_IT+0xce>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8086 	beq.w	80023ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2204      	movs	r2, #4
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2f      	ldr	r2, [pc, #188]	; (800236c <HAL_DMA_Abort_IT+0x1a0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2e      	ldr	r2, [pc, #184]	; (8002370 <HAL_DMA_Abort_IT+0x1a4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2c      	ldr	r2, [pc, #176]	; (8002374 <HAL_DMA_Abort_IT+0x1a8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <HAL_DMA_Abort_IT+0x1ac>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <HAL_DMA_Abort_IT+0x1b0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a28      	ldr	r2, [pc, #160]	; (8002380 <HAL_DMA_Abort_IT+0x1b4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_DMA_Abort_IT+0x1b8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a25      	ldr	r2, [pc, #148]	; (8002388 <HAL_DMA_Abort_IT+0x1bc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_DMA_Abort_IT+0x1c0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_DMA_Abort_IT+0x1c4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a20      	ldr	r2, [pc, #128]	; (8002394 <HAL_DMA_Abort_IT+0x1c8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HAL_DMA_Abort_IT+0x1cc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_DMA_Abort_IT+0x1d0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_DMA_Abort_IT+0x1d4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1a      	ldr	r2, [pc, #104]	; (80023a4 <HAL_DMA_Abort_IT+0x1d8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Abort_IT+0x17c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_DMA_Abort_IT+0x1dc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <HAL_DMA_Abort_IT+0x18e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e178      	b.n	800264c <HAL_DMA_Abort_IT+0x480>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e16f      	b.n	800264c <HAL_DMA_Abort_IT+0x480>
 800236c:	40020010 	.word	0x40020010
 8002370:	40020028 	.word	0x40020028
 8002374:	40020040 	.word	0x40020040
 8002378:	40020058 	.word	0x40020058
 800237c:	40020070 	.word	0x40020070
 8002380:	40020088 	.word	0x40020088
 8002384:	400200a0 	.word	0x400200a0
 8002388:	400200b8 	.word	0x400200b8
 800238c:	40020410 	.word	0x40020410
 8002390:	40020428 	.word	0x40020428
 8002394:	40020440 	.word	0x40020440
 8002398:	40020458 	.word	0x40020458
 800239c:	40020470 	.word	0x40020470
 80023a0:	40020488 	.word	0x40020488
 80023a4:	400204a0 	.word	0x400204a0
 80023a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6c      	ldr	r2, [pc, #432]	; (8002574 <HAL_DMA_Abort_IT+0x3a8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d04a      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6b      	ldr	r2, [pc, #428]	; (8002578 <HAL_DMA_Abort_IT+0x3ac>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d045      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_DMA_Abort_IT+0x3b0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d040      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a68      	ldr	r2, [pc, #416]	; (8002580 <HAL_DMA_Abort_IT+0x3b4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d03b      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a66      	ldr	r2, [pc, #408]	; (8002584 <HAL_DMA_Abort_IT+0x3b8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d036      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_DMA_Abort_IT+0x3bc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d031      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a63      	ldr	r2, [pc, #396]	; (800258c <HAL_DMA_Abort_IT+0x3c0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02c      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a62      	ldr	r2, [pc, #392]	; (8002590 <HAL_DMA_Abort_IT+0x3c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d027      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a60      	ldr	r2, [pc, #384]	; (8002594 <HAL_DMA_Abort_IT+0x3c8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d022      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5f      	ldr	r2, [pc, #380]	; (8002598 <HAL_DMA_Abort_IT+0x3cc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d01d      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5d      	ldr	r2, [pc, #372]	; (800259c <HAL_DMA_Abort_IT+0x3d0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d018      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <HAL_DMA_Abort_IT+0x3d4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5a      	ldr	r2, [pc, #360]	; (80025a4 <HAL_DMA_Abort_IT+0x3d8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00e      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <HAL_DMA_Abort_IT+0x3dc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_DMA_Abort_IT+0x3e0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_DMA_Abort_IT+0x290>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_DMA_Abort_IT+0x3e4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d108      	bne.n	800246e <HAL_DMA_Abort_IT+0x2a2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e007      	b.n	800247e <HAL_DMA_Abort_IT+0x2b2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a3c      	ldr	r2, [pc, #240]	; (8002574 <HAL_DMA_Abort_IT+0x3a8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d072      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3a      	ldr	r2, [pc, #232]	; (8002578 <HAL_DMA_Abort_IT+0x3ac>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d06d      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a39      	ldr	r2, [pc, #228]	; (800257c <HAL_DMA_Abort_IT+0x3b0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d068      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a37      	ldr	r2, [pc, #220]	; (8002580 <HAL_DMA_Abort_IT+0x3b4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d063      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a36      	ldr	r2, [pc, #216]	; (8002584 <HAL_DMA_Abort_IT+0x3b8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d05e      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a34      	ldr	r2, [pc, #208]	; (8002588 <HAL_DMA_Abort_IT+0x3bc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d059      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a33      	ldr	r2, [pc, #204]	; (800258c <HAL_DMA_Abort_IT+0x3c0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d054      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a31      	ldr	r2, [pc, #196]	; (8002590 <HAL_DMA_Abort_IT+0x3c4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d04f      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a30      	ldr	r2, [pc, #192]	; (8002594 <HAL_DMA_Abort_IT+0x3c8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d04a      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2e      	ldr	r2, [pc, #184]	; (8002598 <HAL_DMA_Abort_IT+0x3cc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d045      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2d      	ldr	r2, [pc, #180]	; (800259c <HAL_DMA_Abort_IT+0x3d0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d040      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_DMA_Abort_IT+0x3d4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d03b      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <HAL_DMA_Abort_IT+0x3d8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d036      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a28      	ldr	r2, [pc, #160]	; (80025a8 <HAL_DMA_Abort_IT+0x3dc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a27      	ldr	r2, [pc, #156]	; (80025ac <HAL_DMA_Abort_IT+0x3e0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d02c      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <HAL_DMA_Abort_IT+0x3e4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d027      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_DMA_Abort_IT+0x3e8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <HAL_DMA_Abort_IT+0x3ec>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01d      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_DMA_Abort_IT+0x3f0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d018      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_DMA_Abort_IT+0x3f4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <HAL_DMA_Abort_IT+0x3f8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_DMA_Abort_IT+0x3fc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <HAL_DMA_Abort_IT+0x400>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_DMA_Abort_IT+0x3a2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_DMA_Abort_IT+0x404>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d132      	bne.n	80025d4 <HAL_DMA_Abort_IT+0x408>
 800256e:	2301      	movs	r3, #1
 8002570:	e031      	b.n	80025d6 <HAL_DMA_Abort_IT+0x40a>
 8002572:	bf00      	nop
 8002574:	40020010 	.word	0x40020010
 8002578:	40020028 	.word	0x40020028
 800257c:	40020040 	.word	0x40020040
 8002580:	40020058 	.word	0x40020058
 8002584:	40020070 	.word	0x40020070
 8002588:	40020088 	.word	0x40020088
 800258c:	400200a0 	.word	0x400200a0
 8002590:	400200b8 	.word	0x400200b8
 8002594:	40020410 	.word	0x40020410
 8002598:	40020428 	.word	0x40020428
 800259c:	40020440 	.word	0x40020440
 80025a0:	40020458 	.word	0x40020458
 80025a4:	40020470 	.word	0x40020470
 80025a8:	40020488 	.word	0x40020488
 80025ac:	400204a0 	.word	0x400204a0
 80025b0:	400204b8 	.word	0x400204b8
 80025b4:	58025408 	.word	0x58025408
 80025b8:	5802541c 	.word	0x5802541c
 80025bc:	58025430 	.word	0x58025430
 80025c0:	58025444 	.word	0x58025444
 80025c4:	58025458 	.word	0x58025458
 80025c8:	5802546c 	.word	0x5802546c
 80025cc:	58025480 	.word	0x58025480
 80025d0:	58025494 	.word	0x58025494
 80025d4:	2300      	movs	r3, #0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d028      	beq.n	800262c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2201      	movs	r2, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002608:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002620:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800262a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002664:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_DMA_IRQHandler+0x1ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_DMA_IRQHandler+0x1b0>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0a9b      	lsrs	r3, r3, #10
 8002670:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a5f      	ldr	r2, [pc, #380]	; (800280c <HAL_DMA_IRQHandler+0x1b4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04a      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5d      	ldr	r2, [pc, #372]	; (8002810 <HAL_DMA_IRQHandler+0x1b8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d045      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a5c      	ldr	r2, [pc, #368]	; (8002814 <HAL_DMA_IRQHandler+0x1bc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d040      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5a      	ldr	r2, [pc, #360]	; (8002818 <HAL_DMA_IRQHandler+0x1c0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d03b      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a59      	ldr	r2, [pc, #356]	; (800281c <HAL_DMA_IRQHandler+0x1c4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d036      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a57      	ldr	r2, [pc, #348]	; (8002820 <HAL_DMA_IRQHandler+0x1c8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d031      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a56      	ldr	r2, [pc, #344]	; (8002824 <HAL_DMA_IRQHandler+0x1cc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02c      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a54      	ldr	r2, [pc, #336]	; (8002828 <HAL_DMA_IRQHandler+0x1d0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d027      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a53      	ldr	r2, [pc, #332]	; (800282c <HAL_DMA_IRQHandler+0x1d4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_DMA_IRQHandler+0x1d8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01d      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a50      	ldr	r2, [pc, #320]	; (8002834 <HAL_DMA_IRQHandler+0x1dc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <HAL_DMA_IRQHandler+0x1e0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4d      	ldr	r2, [pc, #308]	; (800283c <HAL_DMA_IRQHandler+0x1e4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a4b      	ldr	r2, [pc, #300]	; (8002840 <HAL_DMA_IRQHandler+0x1e8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4a      	ldr	r2, [pc, #296]	; (8002844 <HAL_DMA_IRQHandler+0x1ec>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_DMA_IRQHandler+0xd2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a48      	ldr	r2, [pc, #288]	; (8002848 <HAL_DMA_IRQHandler+0x1f0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_DMA_IRQHandler+0xd6>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_DMA_IRQHandler+0xd8>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 842b 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2208      	movs	r2, #8
 8002740:	409a      	lsls	r2, r3
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a2 	beq.w	8002890 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2e      	ldr	r2, [pc, #184]	; (800280c <HAL_DMA_IRQHandler+0x1b4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d04a      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2d      	ldr	r2, [pc, #180]	; (8002810 <HAL_DMA_IRQHandler+0x1b8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d045      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <HAL_DMA_IRQHandler+0x1bc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d040      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <HAL_DMA_IRQHandler+0x1c0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d03b      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_DMA_IRQHandler+0x1c4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d036      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_DMA_IRQHandler+0x1c8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d031      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <HAL_DMA_IRQHandler+0x1cc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02c      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a24      	ldr	r2, [pc, #144]	; (8002828 <HAL_DMA_IRQHandler+0x1d0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d027      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a22      	ldr	r2, [pc, #136]	; (800282c <HAL_DMA_IRQHandler+0x1d4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d022      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a21      	ldr	r2, [pc, #132]	; (8002830 <HAL_DMA_IRQHandler+0x1d8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d01d      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <HAL_DMA_IRQHandler+0x1dc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d018      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <HAL_DMA_IRQHandler+0x1e0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_DMA_IRQHandler+0x1e4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00e      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_DMA_IRQHandler+0x1e8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_DMA_IRQHandler+0x1ec>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_IRQHandler+0x194>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_DMA_IRQHandler+0x1f0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d12f      	bne.n	800284c <HAL_DMA_IRQHandler+0x1f4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e02e      	b.n	8002860 <HAL_DMA_IRQHandler+0x208>
 8002802:	bf00      	nop
 8002804:	24000000 	.word	0x24000000
 8002808:	1b4e81b5 	.word	0x1b4e81b5
 800280c:	40020010 	.word	0x40020010
 8002810:	40020028 	.word	0x40020028
 8002814:	40020040 	.word	0x40020040
 8002818:	40020058 	.word	0x40020058
 800281c:	40020070 	.word	0x40020070
 8002820:	40020088 	.word	0x40020088
 8002824:	400200a0 	.word	0x400200a0
 8002828:	400200b8 	.word	0x400200b8
 800282c:	40020410 	.word	0x40020410
 8002830:	40020428 	.word	0x40020428
 8002834:	40020440 	.word	0x40020440
 8002838:	40020458 	.word	0x40020458
 800283c:	40020470 	.word	0x40020470
 8002840:	40020488 	.word	0x40020488
 8002844:	400204a0 	.word	0x400204a0
 8002848:	400204b8 	.word	0x400204b8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2208      	movs	r2, #8
 800287e:	409a      	lsls	r2, r3
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06e      	beq.n	8002984 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a69      	ldr	r2, [pc, #420]	; (8002a50 <HAL_DMA_IRQHandler+0x3f8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04a      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <HAL_DMA_IRQHandler+0x3fc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d045      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <HAL_DMA_IRQHandler+0x400>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d040      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a64      	ldr	r2, [pc, #400]	; (8002a5c <HAL_DMA_IRQHandler+0x404>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d03b      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_DMA_IRQHandler+0x408>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d036      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a61      	ldr	r2, [pc, #388]	; (8002a64 <HAL_DMA_IRQHandler+0x40c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d031      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_DMA_IRQHandler+0x410>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02c      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a5e      	ldr	r2, [pc, #376]	; (8002a6c <HAL_DMA_IRQHandler+0x414>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d027      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5d      	ldr	r2, [pc, #372]	; (8002a70 <HAL_DMA_IRQHandler+0x418>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5b      	ldr	r2, [pc, #364]	; (8002a74 <HAL_DMA_IRQHandler+0x41c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01d      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5a      	ldr	r2, [pc, #360]	; (8002a78 <HAL_DMA_IRQHandler+0x420>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_DMA_IRQHandler+0x424>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a57      	ldr	r2, [pc, #348]	; (8002a80 <HAL_DMA_IRQHandler+0x428>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a55      	ldr	r2, [pc, #340]	; (8002a84 <HAL_DMA_IRQHandler+0x42c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d009      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a54      	ldr	r2, [pc, #336]	; (8002a88 <HAL_DMA_IRQHandler+0x430>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d004      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2ee>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_DMA_IRQHandler+0x434>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10a      	bne.n	800295c <HAL_DMA_IRQHandler+0x304>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e003      	b.n	8002964 <HAL_DMA_IRQHandler+0x30c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2201      	movs	r2, #1
 8002972:	409a      	lsls	r2, r3
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	f043 0202 	orr.w	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2204      	movs	r2, #4
 800298e:	409a      	lsls	r2, r3
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 808f 	beq.w	8002ab8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2c      	ldr	r2, [pc, #176]	; (8002a50 <HAL_DMA_IRQHandler+0x3f8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d04a      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_DMA_IRQHandler+0x3fc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d045      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a29      	ldr	r2, [pc, #164]	; (8002a58 <HAL_DMA_IRQHandler+0x400>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d040      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <HAL_DMA_IRQHandler+0x404>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d03b      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <HAL_DMA_IRQHandler+0x408>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d036      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <HAL_DMA_IRQHandler+0x40c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <HAL_DMA_IRQHandler+0x410>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d02c      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a21      	ldr	r2, [pc, #132]	; (8002a6c <HAL_DMA_IRQHandler+0x414>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d027      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a20      	ldr	r2, [pc, #128]	; (8002a70 <HAL_DMA_IRQHandler+0x418>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_DMA_IRQHandler+0x41c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01d      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_DMA_IRQHandler+0x420>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_DMA_IRQHandler+0x424>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_DMA_IRQHandler+0x428>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <HAL_DMA_IRQHandler+0x42c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_DMA_IRQHandler+0x430>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x3e2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_DMA_IRQHandler+0x434>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12a      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x438>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e023      	b.n	8002a98 <HAL_DMA_IRQHandler+0x440>
 8002a50:	40020010 	.word	0x40020010
 8002a54:	40020028 	.word	0x40020028
 8002a58:	40020040 	.word	0x40020040
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	40020070 	.word	0x40020070
 8002a64:	40020088 	.word	0x40020088
 8002a68:	400200a0 	.word	0x400200a0
 8002a6c:	400200b8 	.word	0x400200b8
 8002a70:	40020410 	.word	0x40020410
 8002a74:	40020428 	.word	0x40020428
 8002a78:	40020440 	.word	0x40020440
 8002a7c:	40020458 	.word	0x40020458
 8002a80:	40020470 	.word	0x40020470
 8002a84:	40020488 	.word	0x40020488
 8002a88:	400204a0 	.word	0x400204a0
 8002a8c:	400204b8 	.word	0x400204b8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f043 0204 	orr.w	r2, r3, #4
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a6 	beq.w	8002c1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a85      	ldr	r2, [pc, #532]	; (8002ce8 <HAL_DMA_IRQHandler+0x690>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d04a      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a83      	ldr	r2, [pc, #524]	; (8002cec <HAL_DMA_IRQHandler+0x694>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d045      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a82      	ldr	r2, [pc, #520]	; (8002cf0 <HAL_DMA_IRQHandler+0x698>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d040      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a80      	ldr	r2, [pc, #512]	; (8002cf4 <HAL_DMA_IRQHandler+0x69c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d03b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7f      	ldr	r2, [pc, #508]	; (8002cf8 <HAL_DMA_IRQHandler+0x6a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d036      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7d      	ldr	r2, [pc, #500]	; (8002cfc <HAL_DMA_IRQHandler+0x6a4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d031      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <HAL_DMA_IRQHandler+0x6a8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d02c      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7a      	ldr	r2, [pc, #488]	; (8002d04 <HAL_DMA_IRQHandler+0x6ac>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d027      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a79      	ldr	r2, [pc, #484]	; (8002d08 <HAL_DMA_IRQHandler+0x6b0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d022      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a77      	ldr	r2, [pc, #476]	; (8002d0c <HAL_DMA_IRQHandler+0x6b4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01d      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a76      	ldr	r2, [pc, #472]	; (8002d10 <HAL_DMA_IRQHandler+0x6b8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d018      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a74      	ldr	r2, [pc, #464]	; (8002d14 <HAL_DMA_IRQHandler+0x6bc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a73      	ldr	r2, [pc, #460]	; (8002d18 <HAL_DMA_IRQHandler+0x6c0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00e      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a71      	ldr	r2, [pc, #452]	; (8002d1c <HAL_DMA_IRQHandler+0x6c4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a70      	ldr	r2, [pc, #448]	; (8002d20 <HAL_DMA_IRQHandler+0x6c8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x516>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <HAL_DMA_IRQHandler+0x6cc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d10a      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x52c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e009      	b.n	8002b98 <HAL_DMA_IRQHandler+0x540>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d03e      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d018      	beq.n	8002bec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d024      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
 8002bd8:	e01f      	b.n	8002c1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01b      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e016      	b.n	8002c1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0208 	bic.w	r2, r2, #8
 8002c08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2220      	movs	r2, #32
 8002c24:	409a      	lsls	r2, r3
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8110 	beq.w	8002e50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2c      	ldr	r2, [pc, #176]	; (8002ce8 <HAL_DMA_IRQHandler+0x690>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <HAL_DMA_IRQHandler+0x694>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a29      	ldr	r2, [pc, #164]	; (8002cf0 <HAL_DMA_IRQHandler+0x698>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a28      	ldr	r2, [pc, #160]	; (8002cf4 <HAL_DMA_IRQHandler+0x69c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <HAL_DMA_IRQHandler+0x6a0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <HAL_DMA_IRQHandler+0x6a4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_DMA_IRQHandler+0x6a8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <HAL_DMA_IRQHandler+0x6ac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_DMA_IRQHandler+0x6b0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_DMA_IRQHandler+0x6b4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <HAL_DMA_IRQHandler+0x6b8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_DMA_IRQHandler+0x6bc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_DMA_IRQHandler+0x6c0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <HAL_DMA_IRQHandler+0x6c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_DMA_IRQHandler+0x6c8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x678>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <HAL_DMA_IRQHandler+0x6cc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d12b      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x6d0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf14      	ite	ne
 8002cde:	2301      	movne	r3, #1
 8002ce0:	2300      	moveq	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e02a      	b.n	8002d3c <HAL_DMA_IRQHandler+0x6e4>
 8002ce6:	bf00      	nop
 8002ce8:	40020010 	.word	0x40020010
 8002cec:	40020028 	.word	0x40020028
 8002cf0:	40020040 	.word	0x40020040
 8002cf4:	40020058 	.word	0x40020058
 8002cf8:	40020070 	.word	0x40020070
 8002cfc:	40020088 	.word	0x40020088
 8002d00:	400200a0 	.word	0x400200a0
 8002d04:	400200b8 	.word	0x400200b8
 8002d08:	40020410 	.word	0x40020410
 8002d0c:	40020428 	.word	0x40020428
 8002d10:	40020440 	.word	0x40020440
 8002d14:	40020458 	.word	0x40020458
 8002d18:	40020470 	.word	0x40020470
 8002d1c:	40020488 	.word	0x40020488
 8002d20:	400204a0 	.word	0x400204a0
 8002d24:	400204b8 	.word	0x400204b8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8087 	beq.w	8002e50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d139      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0216 	bic.w	r2, r2, #22
 8002d6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <HAL_DMA_IRQHandler+0x736>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0208 	bic.w	r2, r2, #8
 8002d9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	223f      	movs	r2, #63	; 0x3f
 8002da8:	409a      	lsls	r2, r3
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 834a 	beq.w	800345c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
          }
          return;
 8002dd0:	e344      	b.n	800345c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02c      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
 8002dfe:	e027      	b.n	8002e50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d023      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
 8002e10:	e01e      	b.n	8002e50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10f      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0210 	bic.w	r2, r2, #16
 8002e2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8306 	beq.w	8003466 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8088 	beq.w	8002f78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_DMA_IRQHandler+0xa08>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d04a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a79      	ldr	r2, [pc, #484]	; (8003064 <HAL_DMA_IRQHandler+0xa0c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d045      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a77      	ldr	r2, [pc, #476]	; (8003068 <HAL_DMA_IRQHandler+0xa10>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d040      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a76      	ldr	r2, [pc, #472]	; (800306c <HAL_DMA_IRQHandler+0xa14>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d03b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a74      	ldr	r2, [pc, #464]	; (8003070 <HAL_DMA_IRQHandler+0xa18>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d036      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a73      	ldr	r2, [pc, #460]	; (8003074 <HAL_DMA_IRQHandler+0xa1c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d031      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a71      	ldr	r2, [pc, #452]	; (8003078 <HAL_DMA_IRQHandler+0xa20>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02c      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a70      	ldr	r2, [pc, #448]	; (800307c <HAL_DMA_IRQHandler+0xa24>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d027      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_DMA_IRQHandler+0xa28>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d022      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6d      	ldr	r2, [pc, #436]	; (8003084 <HAL_DMA_IRQHandler+0xa2c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d01d      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6b      	ldr	r2, [pc, #428]	; (8003088 <HAL_DMA_IRQHandler+0xa30>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6a      	ldr	r2, [pc, #424]	; (800308c <HAL_DMA_IRQHandler+0xa34>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a68      	ldr	r2, [pc, #416]	; (8003090 <HAL_DMA_IRQHandler+0xa38>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_DMA_IRQHandler+0xa3c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a65      	ldr	r2, [pc, #404]	; (8003098 <HAL_DMA_IRQHandler+0xa40>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x8b8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a64      	ldr	r2, [pc, #400]	; (800309c <HAL_DMA_IRQHandler+0xa44>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d108      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x8ca>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e007      	b.n	8002f32 <HAL_DMA_IRQHandler+0x8da>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d307      	bcc.n	8002f4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f2      	bne.n	8002f32 <HAL_DMA_IRQHandler+0x8da>
 8002f4c:	e000      	b.n	8002f50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002f4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2203      	movs	r2, #3
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002f66:	e003      	b.n	8002f70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8272 	beq.w	8003466 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
 8002f8a:	e26c      	b.n	8003466 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <HAL_DMA_IRQHandler+0xa48>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d022      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x984>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a42      	ldr	r2, [pc, #264]	; (80030a4 <HAL_DMA_IRQHandler+0xa4c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d01d      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x984>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_DMA_IRQHandler+0xa50>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x984>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <HAL_DMA_IRQHandler+0xa54>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x984>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3d      	ldr	r2, [pc, #244]	; (80030b0 <HAL_DMA_IRQHandler+0xa58>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x984>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a3c      	ldr	r2, [pc, #240]	; (80030b4 <HAL_DMA_IRQHandler+0xa5c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x984>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <HAL_DMA_IRQHandler+0xa60>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x984>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a39      	ldr	r2, [pc, #228]	; (80030bc <HAL_DMA_IRQHandler+0xa64>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x988>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x98a>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 823f 	beq.w	8003466 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80cd 	beq.w	80031a0 <HAL_DMA_IRQHandler+0xb48>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80c7 	beq.w	80031a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2204      	movs	r2, #4
 800301c:	409a      	lsls	r2, r3
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d049      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8210 	beq.w	8003460 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003048:	e20a      	b.n	8003460 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8206 	beq.w	8003460 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800305c:	e200      	b.n	8003460 <HAL_DMA_IRQHandler+0xe08>
 800305e:	bf00      	nop
 8003060:	40020010 	.word	0x40020010
 8003064:	40020028 	.word	0x40020028
 8003068:	40020040 	.word	0x40020040
 800306c:	40020058 	.word	0x40020058
 8003070:	40020070 	.word	0x40020070
 8003074:	40020088 	.word	0x40020088
 8003078:	400200a0 	.word	0x400200a0
 800307c:	400200b8 	.word	0x400200b8
 8003080:	40020410 	.word	0x40020410
 8003084:	40020428 	.word	0x40020428
 8003088:	40020440 	.word	0x40020440
 800308c:	40020458 	.word	0x40020458
 8003090:	40020470 	.word	0x40020470
 8003094:	40020488 	.word	0x40020488
 8003098:	400204a0 	.word	0x400204a0
 800309c:	400204b8 	.word	0x400204b8
 80030a0:	58025408 	.word	0x58025408
 80030a4:	5802541c 	.word	0x5802541c
 80030a8:	58025430 	.word	0x58025430
 80030ac:	58025444 	.word	0x58025444
 80030b0:	58025458 	.word	0x58025458
 80030b4:	5802546c 	.word	0x5802546c
 80030b8:	58025480 	.word	0x58025480
 80030bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d160      	bne.n	800318c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7f      	ldr	r2, [pc, #508]	; (80032cc <HAL_DMA_IRQHandler+0xc74>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d04a      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a7d      	ldr	r2, [pc, #500]	; (80032d0 <HAL_DMA_IRQHandler+0xc78>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d045      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7c      	ldr	r2, [pc, #496]	; (80032d4 <HAL_DMA_IRQHandler+0xc7c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d040      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7a      	ldr	r2, [pc, #488]	; (80032d8 <HAL_DMA_IRQHandler+0xc80>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d03b      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a79      	ldr	r2, [pc, #484]	; (80032dc <HAL_DMA_IRQHandler+0xc84>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d036      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a77      	ldr	r2, [pc, #476]	; (80032e0 <HAL_DMA_IRQHandler+0xc88>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d031      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a76      	ldr	r2, [pc, #472]	; (80032e4 <HAL_DMA_IRQHandler+0xc8c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d02c      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a74      	ldr	r2, [pc, #464]	; (80032e8 <HAL_DMA_IRQHandler+0xc90>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d027      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a73      	ldr	r2, [pc, #460]	; (80032ec <HAL_DMA_IRQHandler+0xc94>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a71      	ldr	r2, [pc, #452]	; (80032f0 <HAL_DMA_IRQHandler+0xc98>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a70      	ldr	r2, [pc, #448]	; (80032f4 <HAL_DMA_IRQHandler+0xc9c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6e      	ldr	r2, [pc, #440]	; (80032f8 <HAL_DMA_IRQHandler+0xca0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6d      	ldr	r2, [pc, #436]	; (80032fc <HAL_DMA_IRQHandler+0xca4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6b      	ldr	r2, [pc, #428]	; (8003300 <HAL_DMA_IRQHandler+0xca8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6a      	ldr	r2, [pc, #424]	; (8003304 <HAL_DMA_IRQHandler+0xcac>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_DMA_IRQHandler+0xb12>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a68      	ldr	r2, [pc, #416]	; (8003308 <HAL_DMA_IRQHandler+0xcb0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <HAL_DMA_IRQHandler+0xb24>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0208 	bic.w	r2, r2, #8
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e007      	b.n	800318c <HAL_DMA_IRQHandler+0xb34>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8165 	beq.w	8003460 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800319e:	e15f      	b.n	8003460 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2202      	movs	r2, #2
 80031aa:	409a      	lsls	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80c5 	beq.w	8003340 <HAL_DMA_IRQHandler+0xce8>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80bf 	beq.w	8003340 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2202      	movs	r2, #2
 80031cc:	409a      	lsls	r2, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d018      	beq.n	800320e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 813a 	beq.w	8003464 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031f8:	e134      	b.n	8003464 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8130 	beq.w	8003464 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800320c:	e12a      	b.n	8003464 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 8089 	bne.w	800332c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <HAL_DMA_IRQHandler+0xc74>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d04a      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_DMA_IRQHandler+0xc78>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d045      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <HAL_DMA_IRQHandler+0xc7c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d040      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_DMA_IRQHandler+0xc80>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d03b      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a25      	ldr	r2, [pc, #148]	; (80032dc <HAL_DMA_IRQHandler+0xc84>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d036      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_DMA_IRQHandler+0xc88>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d031      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_DMA_IRQHandler+0xc8c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d02c      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <HAL_DMA_IRQHandler+0xc90>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d027      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_DMA_IRQHandler+0xc94>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_DMA_IRQHandler+0xc98>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_DMA_IRQHandler+0xc9c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_DMA_IRQHandler+0xca0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_DMA_IRQHandler+0xca4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a17      	ldr	r2, [pc, #92]	; (8003300 <HAL_DMA_IRQHandler+0xca8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_DMA_IRQHandler+0xcac>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_DMA_IRQHandler+0xc62>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_DMA_IRQHandler+0xcb0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d128      	bne.n	800330c <HAL_DMA_IRQHandler+0xcb4>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0214 	bic.w	r2, r2, #20
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e027      	b.n	800331c <HAL_DMA_IRQHandler+0xcc4>
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020a 	bic.w	r2, r2, #10
 800331a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8097 	beq.w	8003464 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800333e:	e091      	b.n	8003464 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2208      	movs	r2, #8
 800334a:	409a      	lsls	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8088 	beq.w	8003466 <HAL_DMA_IRQHandler+0xe0e>
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8082 	beq.w	8003466 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a41      	ldr	r2, [pc, #260]	; (800346c <HAL_DMA_IRQHandler+0xe14>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04a      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3f      	ldr	r2, [pc, #252]	; (8003470 <HAL_DMA_IRQHandler+0xe18>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d045      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3e      	ldr	r2, [pc, #248]	; (8003474 <HAL_DMA_IRQHandler+0xe1c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d040      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <HAL_DMA_IRQHandler+0xe20>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3b      	ldr	r2, [pc, #236]	; (800347c <HAL_DMA_IRQHandler+0xe24>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d036      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a39      	ldr	r2, [pc, #228]	; (8003480 <HAL_DMA_IRQHandler+0xe28>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a38      	ldr	r2, [pc, #224]	; (8003484 <HAL_DMA_IRQHandler+0xe2c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d02c      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a36      	ldr	r2, [pc, #216]	; (8003488 <HAL_DMA_IRQHandler+0xe30>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d027      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a35      	ldr	r2, [pc, #212]	; (800348c <HAL_DMA_IRQHandler+0xe34>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a33      	ldr	r2, [pc, #204]	; (8003490 <HAL_DMA_IRQHandler+0xe38>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a32      	ldr	r2, [pc, #200]	; (8003494 <HAL_DMA_IRQHandler+0xe3c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a30      	ldr	r2, [pc, #192]	; (8003498 <HAL_DMA_IRQHandler+0xe40>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2f      	ldr	r2, [pc, #188]	; (800349c <HAL_DMA_IRQHandler+0xe44>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <HAL_DMA_IRQHandler+0xe48>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2c      	ldr	r2, [pc, #176]	; (80034a4 <HAL_DMA_IRQHandler+0xe4c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_IRQHandler+0xdaa>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <HAL_DMA_IRQHandler+0xe50>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <HAL_DMA_IRQHandler+0xdbc>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 021c 	bic.w	r2, r2, #28
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e007      	b.n	8003424 <HAL_DMA_IRQHandler+0xdcc>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 020e 	bic.w	r2, r2, #14
 8003422:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2201      	movs	r2, #1
 800342e:	409a      	lsls	r2, r3
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e004      	b.n	8003466 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800345c:	bf00      	nop
 800345e:	e002      	b.n	8003466 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003464:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40020010 	.word	0x40020010
 8003470:	40020028 	.word	0x40020028
 8003474:	40020040 	.word	0x40020040
 8003478:	40020058 	.word	0x40020058
 800347c:	40020070 	.word	0x40020070
 8003480:	40020088 	.word	0x40020088
 8003484:	400200a0 	.word	0x400200a0
 8003488:	400200b8 	.word	0x400200b8
 800348c:	40020410 	.word	0x40020410
 8003490:	40020428 	.word	0x40020428
 8003494:	40020440 	.word	0x40020440
 8003498:	40020458 	.word	0x40020458
 800349c:	40020470 	.word	0x40020470
 80034a0:	40020488 	.word	0x40020488
 80034a4:	400204a0 	.word	0x400204a0
 80034a8:	400204b8 	.word	0x400204b8

080034ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a7f      	ldr	r2, [pc, #508]	; (80036c8 <DMA_SetConfig+0x21c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d072      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a7d      	ldr	r2, [pc, #500]	; (80036cc <DMA_SetConfig+0x220>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d06d      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7c      	ldr	r2, [pc, #496]	; (80036d0 <DMA_SetConfig+0x224>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d068      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a7a      	ldr	r2, [pc, #488]	; (80036d4 <DMA_SetConfig+0x228>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d063      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a79      	ldr	r2, [pc, #484]	; (80036d8 <DMA_SetConfig+0x22c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d05e      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a77      	ldr	r2, [pc, #476]	; (80036dc <DMA_SetConfig+0x230>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d059      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a76      	ldr	r2, [pc, #472]	; (80036e0 <DMA_SetConfig+0x234>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d054      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a74      	ldr	r2, [pc, #464]	; (80036e4 <DMA_SetConfig+0x238>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d04f      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a73      	ldr	r2, [pc, #460]	; (80036e8 <DMA_SetConfig+0x23c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d04a      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a71      	ldr	r2, [pc, #452]	; (80036ec <DMA_SetConfig+0x240>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d045      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a70      	ldr	r2, [pc, #448]	; (80036f0 <DMA_SetConfig+0x244>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d040      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6e      	ldr	r2, [pc, #440]	; (80036f4 <DMA_SetConfig+0x248>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d03b      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6d      	ldr	r2, [pc, #436]	; (80036f8 <DMA_SetConfig+0x24c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d036      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6b      	ldr	r2, [pc, #428]	; (80036fc <DMA_SetConfig+0x250>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <DMA_SetConfig+0x254>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d02c      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a68      	ldr	r2, [pc, #416]	; (8003704 <DMA_SetConfig+0x258>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d027      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a67      	ldr	r2, [pc, #412]	; (8003708 <DMA_SetConfig+0x25c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a65      	ldr	r2, [pc, #404]	; (800370c <DMA_SetConfig+0x260>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01d      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a64      	ldr	r2, [pc, #400]	; (8003710 <DMA_SetConfig+0x264>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d018      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a62      	ldr	r2, [pc, #392]	; (8003714 <DMA_SetConfig+0x268>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a61      	ldr	r2, [pc, #388]	; (8003718 <DMA_SetConfig+0x26c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a5f      	ldr	r2, [pc, #380]	; (800371c <DMA_SetConfig+0x270>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5e      	ldr	r2, [pc, #376]	; (8003720 <DMA_SetConfig+0x274>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <DMA_SetConfig+0x10a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5c      	ldr	r2, [pc, #368]	; (8003724 <DMA_SetConfig+0x278>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <DMA_SetConfig+0x10e>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <DMA_SetConfig+0x110>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a39      	ldr	r2, [pc, #228]	; (80036c8 <DMA_SetConfig+0x21c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <DMA_SetConfig+0x1d0>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a38      	ldr	r2, [pc, #224]	; (80036cc <DMA_SetConfig+0x220>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <DMA_SetConfig+0x1d0>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a36      	ldr	r2, [pc, #216]	; (80036d0 <DMA_SetConfig+0x224>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <DMA_SetConfig+0x1d0>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <DMA_SetConfig+0x228>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <DMA_SetConfig+0x22c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <DMA_SetConfig+0x1d0>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a32      	ldr	r2, [pc, #200]	; (80036dc <DMA_SetConfig+0x230>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a30      	ldr	r2, [pc, #192]	; (80036e0 <DMA_SetConfig+0x234>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <DMA_SetConfig+0x238>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <DMA_SetConfig+0x1d0>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <DMA_SetConfig+0x23c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2c      	ldr	r2, [pc, #176]	; (80036ec <DMA_SetConfig+0x240>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <DMA_SetConfig+0x244>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <DMA_SetConfig+0x1d0>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <DMA_SetConfig+0x248>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a27      	ldr	r2, [pc, #156]	; (80036f8 <DMA_SetConfig+0x24c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <DMA_SetConfig+0x1d0>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a26      	ldr	r2, [pc, #152]	; (80036fc <DMA_SetConfig+0x250>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a24      	ldr	r2, [pc, #144]	; (8003700 <DMA_SetConfig+0x254>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <DMA_SetConfig+0x1d0>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a23      	ldr	r2, [pc, #140]	; (8003704 <DMA_SetConfig+0x258>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <DMA_SetConfig+0x1d4>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <DMA_SetConfig+0x1d6>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d059      	beq.n	800373a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	223f      	movs	r2, #63	; 0x3f
 8003690:	409a      	lsls	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d138      	bne.n	8003728 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036c6:	e086      	b.n	80037d6 <DMA_SetConfig+0x32a>
 80036c8:	40020010 	.word	0x40020010
 80036cc:	40020028 	.word	0x40020028
 80036d0:	40020040 	.word	0x40020040
 80036d4:	40020058 	.word	0x40020058
 80036d8:	40020070 	.word	0x40020070
 80036dc:	40020088 	.word	0x40020088
 80036e0:	400200a0 	.word	0x400200a0
 80036e4:	400200b8 	.word	0x400200b8
 80036e8:	40020410 	.word	0x40020410
 80036ec:	40020428 	.word	0x40020428
 80036f0:	40020440 	.word	0x40020440
 80036f4:	40020458 	.word	0x40020458
 80036f8:	40020470 	.word	0x40020470
 80036fc:	40020488 	.word	0x40020488
 8003700:	400204a0 	.word	0x400204a0
 8003704:	400204b8 	.word	0x400204b8
 8003708:	58025408 	.word	0x58025408
 800370c:	5802541c 	.word	0x5802541c
 8003710:	58025430 	.word	0x58025430
 8003714:	58025444 	.word	0x58025444
 8003718:	58025458 	.word	0x58025458
 800371c:	5802546c 	.word	0x5802546c
 8003720:	58025480 	.word	0x58025480
 8003724:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
}
 8003738:	e04d      	b.n	80037d6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a29      	ldr	r2, [pc, #164]	; (80037e4 <DMA_SetConfig+0x338>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <DMA_SetConfig+0x2de>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <DMA_SetConfig+0x33c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <DMA_SetConfig+0x2de>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a26      	ldr	r2, [pc, #152]	; (80037ec <DMA_SetConfig+0x340>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <DMA_SetConfig+0x2de>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <DMA_SetConfig+0x344>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <DMA_SetConfig+0x2de>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <DMA_SetConfig+0x348>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <DMA_SetConfig+0x2de>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <DMA_SetConfig+0x34c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <DMA_SetConfig+0x2de>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a20      	ldr	r2, [pc, #128]	; (80037fc <DMA_SetConfig+0x350>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <DMA_SetConfig+0x2de>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <DMA_SetConfig+0x354>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <DMA_SetConfig+0x2e2>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <DMA_SetConfig+0x2e4>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d108      	bne.n	80037c6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	60da      	str	r2, [r3, #12]
}
 80037c4:	e007      	b.n	80037d6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	58025408 	.word	0x58025408
 80037e8:	5802541c 	.word	0x5802541c
 80037ec:	58025430 	.word	0x58025430
 80037f0:	58025444 	.word	0x58025444
 80037f4:	58025458 	.word	0x58025458
 80037f8:	5802546c 	.word	0x5802546c
 80037fc:	58025480 	.word	0x58025480
 8003800:	58025494 	.word	0x58025494

08003804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a42      	ldr	r2, [pc, #264]	; (800391c <DMA_CalcBaseAndBitshift+0x118>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04a      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a41      	ldr	r2, [pc, #260]	; (8003920 <DMA_CalcBaseAndBitshift+0x11c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d045      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a3f      	ldr	r2, [pc, #252]	; (8003924 <DMA_CalcBaseAndBitshift+0x120>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d040      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a3e      	ldr	r2, [pc, #248]	; (8003928 <DMA_CalcBaseAndBitshift+0x124>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d03b      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3c      	ldr	r2, [pc, #240]	; (800392c <DMA_CalcBaseAndBitshift+0x128>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d036      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a3b      	ldr	r2, [pc, #236]	; (8003930 <DMA_CalcBaseAndBitshift+0x12c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d031      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a39      	ldr	r2, [pc, #228]	; (8003934 <DMA_CalcBaseAndBitshift+0x130>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02c      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a38      	ldr	r2, [pc, #224]	; (8003938 <DMA_CalcBaseAndBitshift+0x134>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d027      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a36      	ldr	r2, [pc, #216]	; (800393c <DMA_CalcBaseAndBitshift+0x138>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d022      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a35      	ldr	r2, [pc, #212]	; (8003940 <DMA_CalcBaseAndBitshift+0x13c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d01d      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a33      	ldr	r2, [pc, #204]	; (8003944 <DMA_CalcBaseAndBitshift+0x140>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a32      	ldr	r2, [pc, #200]	; (8003948 <DMA_CalcBaseAndBitshift+0x144>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a30      	ldr	r2, [pc, #192]	; (800394c <DMA_CalcBaseAndBitshift+0x148>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <DMA_CalcBaseAndBitshift+0x14c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <DMA_CalcBaseAndBitshift+0x150>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <DMA_CalcBaseAndBitshift+0xa8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2c      	ldr	r2, [pc, #176]	; (8003958 <DMA_CalcBaseAndBitshift+0x154>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d101      	bne.n	80038b0 <DMA_CalcBaseAndBitshift+0xac>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <DMA_CalcBaseAndBitshift+0xae>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d024      	beq.n	8003900 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3b10      	subs	r3, #16
 80038be:	4a27      	ldr	r2, [pc, #156]	; (800395c <DMA_CalcBaseAndBitshift+0x158>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	4a24      	ldr	r2, [pc, #144]	; (8003960 <DMA_CalcBaseAndBitshift+0x15c>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	461a      	mov	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d908      	bls.n	80038f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <DMA_CalcBaseAndBitshift+0x160>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	659a      	str	r2, [r3, #88]	; 0x58
 80038ee:	e00d      	b.n	800390c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <DMA_CalcBaseAndBitshift+0x160>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6593      	str	r3, [r2, #88]	; 0x58
 80038fe:	e005      	b.n	800390c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40020010 	.word	0x40020010
 8003920:	40020028 	.word	0x40020028
 8003924:	40020040 	.word	0x40020040
 8003928:	40020058 	.word	0x40020058
 800392c:	40020070 	.word	0x40020070
 8003930:	40020088 	.word	0x40020088
 8003934:	400200a0 	.word	0x400200a0
 8003938:	400200b8 	.word	0x400200b8
 800393c:	40020410 	.word	0x40020410
 8003940:	40020428 	.word	0x40020428
 8003944:	40020440 	.word	0x40020440
 8003948:	40020458 	.word	0x40020458
 800394c:	40020470 	.word	0x40020470
 8003950:	40020488 	.word	0x40020488
 8003954:	400204a0 	.word	0x400204a0
 8003958:	400204b8 	.word	0x400204b8
 800395c:	aaaaaaab 	.word	0xaaaaaaab
 8003960:	0800e6a0 	.word	0x0800e6a0
 8003964:	fffffc00 	.word	0xfffffc00

08003968 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d120      	bne.n	80039be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	2b03      	cmp	r3, #3
 8003982:	d858      	bhi.n	8003a36 <DMA_CheckFifoParam+0xce>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <DMA_CheckFifoParam+0x24>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039af 	.word	0x080039af
 8003994:	0800399d 	.word	0x0800399d
 8003998:	08003a37 	.word	0x08003a37
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d048      	beq.n	8003a3a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039ac:	e045      	b.n	8003a3a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039b6:	d142      	bne.n	8003a3e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039bc:	e03f      	b.n	8003a3e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c6:	d123      	bne.n	8003a10 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d838      	bhi.n	8003a42 <DMA_CheckFifoParam+0xda>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <DMA_CheckFifoParam+0x70>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	080039ef 	.word	0x080039ef
 80039e0:	080039e9 	.word	0x080039e9
 80039e4:	08003a01 	.word	0x08003a01
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
        break;
 80039ec:	e030      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d025      	beq.n	8003a46 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039fe:	e022      	b.n	8003a46 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a08:	d11f      	bne.n	8003a4a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a0e:	e01c      	b.n	8003a4a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d902      	bls.n	8003a1e <DMA_CheckFifoParam+0xb6>
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d003      	beq.n	8003a24 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a1c:	e018      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
        break;
 8003a22:	e015      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00e      	beq.n	8003a4e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
    break;
 8003a34:	e00b      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
        break;
 8003a36:	bf00      	nop
 8003a38:	e00a      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e008      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e006      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
        break;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
        break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <DMA_CheckFifoParam+0xe8>
    break;
 8003a4e:	bf00      	nop
    }
  }

  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop

08003a60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a38      	ldr	r2, [pc, #224]	; (8003b54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a36      	ldr	r2, [pc, #216]	; (8003b58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01d      	beq.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a35      	ldr	r2, [pc, #212]	; (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a33      	ldr	r2, [pc, #204]	; (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01a      	beq.n	8003afe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3b08      	subs	r3, #8
 8003ad0:	4a28      	ldr	r2, [pc, #160]	; (8003b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003aec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2201      	movs	r2, #1
 8003af6:	409a      	lsls	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003afc:	e024      	b.n	8003b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	3b10      	subs	r3, #16
 8003b06:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d806      	bhi.n	8003b26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d902      	bls.n	8003b26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3308      	adds	r3, #8
 8003b24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2201      	movs	r2, #1
 8003b42:	409a      	lsls	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	58025408 	.word	0x58025408
 8003b58:	5802541c 	.word	0x5802541c
 8003b5c:	58025430 	.word	0x58025430
 8003b60:	58025444 	.word	0x58025444
 8003b64:	58025458 	.word	0x58025458
 8003b68:	5802546c 	.word	0x5802546c
 8003b6c:	58025480 	.word	0x58025480
 8003b70:	58025494 	.word	0x58025494
 8003b74:	cccccccd 	.word	0xcccccccd
 8003b78:	16009600 	.word	0x16009600
 8003b7c:	58025880 	.word	0x58025880
 8003b80:	aaaaaaab 	.word	0xaaaaaaab
 8003b84:	400204b8 	.word	0x400204b8
 8003b88:	4002040f 	.word	0x4002040f
 8003b8c:	10008200 	.word	0x10008200
 8003b90:	40020880 	.word	0x40020880

08003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04a      	beq.n	8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d847      	bhi.n	8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	461a      	mov	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c1c:	671a      	str	r2, [r3, #112]	; 0x70
 8003c1e:	e009      	b.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c32:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	2201      	movs	r2, #1
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	58025408 	.word	0x58025408
 8003c50:	5802541c 	.word	0x5802541c
 8003c54:	58025430 	.word	0x58025430
 8003c58:	58025444 	.word	0x58025444
 8003c5c:	58025458 	.word	0x58025458
 8003c60:	5802546c 	.word	0x5802546c
 8003c64:	58025480 	.word	0x58025480
 8003c68:	58025494 	.word	0x58025494
 8003c6c:	1600963f 	.word	0x1600963f
 8003c70:	58025940 	.word	0x58025940
 8003c74:	1000823f 	.word	0x1000823f
 8003c78:	40020940 	.word	0x40020940

08003c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	; 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003c8a:	4b86      	ldr	r3, [pc, #536]	; (8003ea4 <HAL_GPIO_Init+0x228>)
 8003c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c8e:	e18c      	b.n	8003faa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 817e 	beq.w	8003fa4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d005      	beq.n	8003cc0 <HAL_GPIO_Init+0x44>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d130      	bne.n	8003d22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	2203      	movs	r2, #3
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 0201 	and.w	r2, r3, #1
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d017      	beq.n	8003d5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d123      	bne.n	8003db2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	08da      	lsrs	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3208      	adds	r2, #8
 8003d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	220f      	movs	r2, #15
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	08da      	lsrs	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3208      	adds	r2, #8
 8003dac:	69b9      	ldr	r1, [r7, #24]
 8003dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0203 	and.w	r2, r3, #3
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80d8 	beq.w	8003fa4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <HAL_GPIO_Init+0x22c>)
 8003df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dfa:	4a2b      	ldr	r2, [pc, #172]	; (8003ea8 <HAL_GPIO_Init+0x22c>)
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e04:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_GPIO_Init+0x22c>)
 8003e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e12:	4a26      	ldr	r2, [pc, #152]	; (8003eac <HAL_GPIO_Init+0x230>)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	220f      	movs	r2, #15
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_GPIO_Init+0x234>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d04a      	beq.n	8003ed4 <HAL_GPIO_Init+0x258>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_GPIO_Init+0x238>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02b      	beq.n	8003e9e <HAL_GPIO_Init+0x222>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_GPIO_Init+0x23c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d025      	beq.n	8003e9a <HAL_GPIO_Init+0x21e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <HAL_GPIO_Init+0x240>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01f      	beq.n	8003e96 <HAL_GPIO_Init+0x21a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_GPIO_Init+0x244>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d019      	beq.n	8003e92 <HAL_GPIO_Init+0x216>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <HAL_GPIO_Init+0x248>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_GPIO_Init+0x24c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00d      	beq.n	8003e8a <HAL_GPIO_Init+0x20e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <HAL_GPIO_Init+0x250>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <HAL_GPIO_Init+0x20a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_GPIO_Init+0x254>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_GPIO_Init+0x206>
 8003e7e:	2309      	movs	r3, #9
 8003e80:	e029      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e82:	230a      	movs	r3, #10
 8003e84:	e027      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e86:	2307      	movs	r3, #7
 8003e88:	e025      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e8a:	2306      	movs	r3, #6
 8003e8c:	e023      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e8e:	2305      	movs	r3, #5
 8003e90:	e021      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e92:	2304      	movs	r3, #4
 8003e94:	e01f      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e96:	2303      	movs	r3, #3
 8003e98:	e01d      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e01b      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e019      	b.n	8003ed6 <HAL_GPIO_Init+0x25a>
 8003ea2:	bf00      	nop
 8003ea4:	58000080 	.word	0x58000080
 8003ea8:	58024400 	.word	0x58024400
 8003eac:	58000400 	.word	0x58000400
 8003eb0:	58020000 	.word	0x58020000
 8003eb4:	58020400 	.word	0x58020400
 8003eb8:	58020800 	.word	0x58020800
 8003ebc:	58020c00 	.word	0x58020c00
 8003ec0:	58021000 	.word	0x58021000
 8003ec4:	58021400 	.word	0x58021400
 8003ec8:	58021800 	.word	0x58021800
 8003ecc:	58021c00 	.word	0x58021c00
 8003ed0:	58022400 	.word	0x58022400
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	f002 0203 	and.w	r2, r2, #3
 8003edc:	0092      	lsls	r2, r2, #2
 8003ede:	4093      	lsls	r3, r2
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee6:	4938      	ldr	r1, [pc, #224]	; (8003fc8 <HAL_GPIO_Init+0x34c>)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	3302      	adds	r3, #2
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f ae6b 	bne.w	8003c90 <HAL_GPIO_Init+0x14>
  }
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	3724      	adds	r7, #36	; 0x24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	58000400 	.word	0x58000400

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003fe8:	e003      	b.n	8003ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	041a      	lsls	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4013      	ands	r3, r2
 8004016:	041a      	lsls	r2, r3, #16
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	43d9      	mvns	r1, r3
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	400b      	ands	r3, r1
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	619a      	str	r2, [r3, #24]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004034:	b08f      	sub	sp, #60	; 0x3c
 8004036:	af0a      	add	r7, sp, #40	; 0x28
 8004038:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e116      	b.n	8004272 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f009 ffae 	bl	800dfc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2203      	movs	r2, #3
 8004068:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f006 fb91 	bl	800a7aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	687e      	ldr	r6, [r7, #4]
 8004090:	466d      	mov	r5, sp
 8004092:	f106 0410 	add.w	r4, r6, #16
 8004096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800409a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800409c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800409e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040a6:	1d33      	adds	r3, r6, #4
 80040a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040aa:	6838      	ldr	r0, [r7, #0]
 80040ac:	f006 fa5c 	bl	800a568 <USB_CoreInit>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0d7      	b.n	8004272 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f006 fb7f 	bl	800a7cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e04a      	b.n	800416a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040d4:	7bfa      	ldrb	r2, [r7, #15]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	333d      	adds	r3, #61	; 0x3d
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	333c      	adds	r3, #60	; 0x3c
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	b298      	uxth	r0, r3
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3356      	adds	r3, #86	; 0x56
 8004110:	4602      	mov	r2, r0
 8004112:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	3340      	adds	r3, #64	; 0x40
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3344      	adds	r3, #68	; 0x44
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	3348      	adds	r3, #72	; 0x48
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	334c      	adds	r3, #76	; 0x4c
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	3301      	adds	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d3af      	bcc.n	80040d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e044      	b.n	8004204 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	3301      	adds	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
 8004204:	7bfa      	ldrb	r2, [r7, #15]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d3b5      	bcc.n	800417a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	687e      	ldr	r6, [r7, #4]
 8004216:	466d      	mov	r5, sp
 8004218:	f106 0410 	add.w	r4, r6, #16
 800421c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004224:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004228:	e885 0003 	stmia.w	r5, {r0, r1}
 800422c:	1d33      	adds	r3, r6, #4
 800422e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004230:	6838      	ldr	r0, [r7, #0]
 8004232:	f006 fb17 	bl	800a864 <USB_DevInit>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e014      	b.n	8004272 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b01      	cmp	r3, #1
 800425e:	d102      	bne.n	8004266 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f001 f96f 	bl	8005544 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f007 fb59 	bl	800b922 <USB_DevDisconnect>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800427a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_PCD_Start+0x1c>
 8004292:	2302      	movs	r3, #2
 8004294:	e022      	b.n	80042dc <HAL_PCD_Start+0x62>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f006 fa60 	bl	800a788 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f007 fb07 	bl	800b8e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b08d      	sub	sp, #52	; 0x34
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f007 fbc5 	bl	800ba8a <USB_GetMode>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 84b7 	bne.w	8004c76 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f007 fb29 	bl	800b964 <USB_ReadInterrupts>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 84ad 	beq.w	8004c74 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f007 fb16 	bl	800b964 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d107      	bne.n	8004352 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f002 0202 	and.w	r2, r2, #2
 8004350:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f007 fb04 	bl	800b964 <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b10      	cmp	r3, #16
 8004364:	d161      	bne.n	800442a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0210 	bic.w	r2, r2, #16
 8004374:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	0c5b      	lsrs	r3, r3, #17
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d124      	bne.n	80043ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d035      	beq.n	800441a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043bc:	b29b      	uxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	6a38      	ldr	r0, [r7, #32]
 80043c2:	f007 f93b 	bl	800b63c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d2:	441a      	add	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	695a      	ldr	r2, [r3, #20]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e4:	441a      	add	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	615a      	str	r2, [r3, #20]
 80043ea:	e016      	b.n	800441a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	0c5b      	lsrs	r3, r3, #17
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d110      	bne.n	800441a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043fe:	2208      	movs	r2, #8
 8004400:	4619      	mov	r1, r3
 8004402:	6a38      	ldr	r0, [r7, #32]
 8004404:	f007 f91a 	bl	800b63c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004414:	441a      	add	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0210 	orr.w	r2, r2, #16
 8004428:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f007 fa98 	bl	800b964 <USB_ReadInterrupts>
 8004434:	4603      	mov	r3, r0
 8004436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800443e:	f040 80a7 	bne.w	8004590 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f007 fa9d 	bl	800b98a <USB_ReadDevAllOutEpInterrupt>
 8004450:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004452:	e099      	b.n	8004588 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 808e 	beq.w	800457c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f007 fac1 	bl	800b9f2 <USB_ReadDevOutEPInterrupt>
 8004470:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	461a      	mov	r2, r3
 800448a:	2301      	movs	r3, #1
 800448c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800448e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fed1 	bl	8005238 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	461a      	mov	r2, r3
 80044ae:	2308      	movs	r3, #8
 80044b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 ffa7 	bl	8005408 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	461a      	mov	r2, r3
 80044d2:	2310      	movs	r3, #16
 80044d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d030      	beq.n	8004542 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d109      	bne.n	8004500 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	3304      	adds	r3, #4
 8004514:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	78db      	ldrb	r3, [r3, #3]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d108      	bne.n	8004530 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	b2db      	uxtb	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f009 fe40 	bl	800e1b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	2302      	movs	r3, #2
 8004540:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	461a      	mov	r2, r3
 800455a:	2320      	movs	r3, #32
 800455c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	461a      	mov	r2, r3
 8004576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800457a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	3301      	adds	r3, #1
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	085b      	lsrs	r3, r3, #1
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	f47f af62 	bne.w	8004454 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f007 f9e5 	bl	800b964 <USB_ReadInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a4:	f040 80db 	bne.w	800475e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f007 fa06 	bl	800b9be <USB_ReadDevAllInEpInterrupt>
 80045b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045b8:	e0cd      	b.n	8004756 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80c2 	beq.w	800474a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f007 fa2c 	bl	800ba2e <USB_ReadDevInEPInterrupt>
 80045d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d057      	beq.n	8004692 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	2201      	movs	r2, #1
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69f9      	ldr	r1, [r7, #28]
 80045fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004602:	4013      	ands	r3, r2
 8004604:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	2301      	movs	r3, #1
 8004616:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d132      	bne.n	8004686 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	3348      	adds	r3, #72	; 0x48
 8004630:	6819      	ldr	r1, [r3, #0]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4403      	add	r3, r0
 8004640:	3344      	adds	r3, #68	; 0x44
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4419      	add	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4403      	add	r3, r0
 8004654:	3348      	adds	r3, #72	; 0x48
 8004656:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d113      	bne.n	8004686 <HAL_PCD_IRQHandler+0x3a2>
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	334c      	adds	r3, #76	; 0x4c
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800467e:	461a      	mov	r2, r3
 8004680:	2101      	movs	r1, #1
 8004682:	f007 fa35 	bl	800baf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	b2db      	uxtb	r3, r3
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f009 fd0a 	bl	800e0a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	461a      	mov	r2, r3
 80046aa:	2308      	movs	r3, #8
 80046ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	461a      	mov	r2, r3
 80046c6:	2310      	movs	r3, #16
 80046c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d023      	beq.n	8004738 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f2:	6a38      	ldr	r0, [r7, #32]
 80046f4:	f006 fa14 	bl	800ab20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	3338      	adds	r3, #56	; 0x38
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d108      	bne.n	8004726 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2200      	movs	r2, #0
 8004718:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f009 fd57 	bl	800e1d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004732:	461a      	mov	r2, r3
 8004734:	2302      	movs	r3, #2
 8004736:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fcea 	bl	800511e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	3301      	adds	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f af2e 	bne.w	80045ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f007 f8fe 	bl	800b964 <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800476e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004772:	d122      	bne.n	80047ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800478e:	2b01      	cmp	r3, #1
 8004790:	d108      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800479a:	2100      	movs	r1, #0
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fef5 	bl	800558c <HAL_PCDEx_LPM_Callback>
 80047a2:	e002      	b.n	80047aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f009 fcf5 	bl	800e194 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695a      	ldr	r2, [r3, #20]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f007 f8d0 	bl	800b964 <USB_ReadInterrupts>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ce:	d112      	bne.n	80047f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f009 fcb1 	bl	800e148 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f007 f8b2 	bl	800b964 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480a:	d121      	bne.n	8004850 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800481a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d111      	bne.n	800484a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	f003 020f 	and.w	r2, r3, #15
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004840:	2101      	movs	r1, #1
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fea2 	bl	800558c <HAL_PCDEx_LPM_Callback>
 8004848:	e002      	b.n	8004850 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f009 fc7c 	bl	800e148 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f007 f885 	bl	800b964 <USB_ReadInterrupts>
 800485a:	4603      	mov	r3, r0
 800485c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004864:	f040 80b7 	bne.w	80049d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2110      	movs	r1, #16
 8004882:	4618      	mov	r0, r3
 8004884:	f006 f94c 	bl	800ab20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004888:	2300      	movs	r3, #0
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488c:	e046      	b.n	800491c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	461a      	mov	r2, r3
 800489c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	461a      	mov	r2, r3
 80048d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004910:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004914:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	3301      	adds	r3, #1
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004922:	429a      	cmp	r2, r3
 8004924:	d3b3      	bcc.n	800488e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004934:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004938:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004952:	f043 030b 	orr.w	r3, r3, #11
 8004956:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004968:	f043 030b 	orr.w	r3, r3, #11
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	e015      	b.n	800499c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	4619      	mov	r1, r3
 8004980:	f242 032b 	movw	r3, #8235	; 0x202b
 8004984:	4313      	orrs	r3, r2
 8004986:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004996:	f043 030b 	orr.w	r3, r3, #11
 800499a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049c0:	461a      	mov	r2, r3
 80049c2:	f007 f895 	bl	800baf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80049d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f006 ffc2 	bl	800b964 <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ea:	d124      	bne.n	8004a36 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f007 f859 	bl	800baa8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f006 f90d 	bl	800ac1a <USB_GetDevSpeed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681c      	ldr	r4, [r3, #0]
 8004a0c:	f001 fd1e 	bl	800644c <HAL_RCC_GetHCLKFreq>
 8004a10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f005 fe12 	bl	800a644 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f009 fb68 	bl	800e0f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f006 ff92 	bl	800b964 <USB_ReadInterrupts>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d10a      	bne.n	8004a60 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f009 fb45 	bl	800e0da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f002 0208 	and.w	r2, r2, #8
 8004a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f006 ff7d 	bl	800b964 <USB_ReadInterrupts>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d122      	bne.n	8004aba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a80:	2301      	movs	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	e014      	b.n	8004ab0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fb09 	bl	80050bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	3301      	adds	r3, #1
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d3e5      	bcc.n	8004a86 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f006 ff50 	bl	800b964 <USB_ReadInterrupts>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ace:	d13b      	bne.n	8004b48 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad4:	e02b      	b.n	8004b2e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3340      	adds	r3, #64	; 0x40
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d115      	bne.n	8004b28 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004afc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da12      	bge.n	8004b28 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	333f      	adds	r3, #63	; 0x3f
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 faca 	bl	80050bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3ce      	bcc.n	8004ad6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f006 ff09 	bl	800b964 <USB_ReadInterrupts>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b5c:	d155      	bne.n	8004c0a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b5e:	2301      	movs	r3, #1
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	e045      	b.n	8004bf0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d12e      	bne.n	8004bea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da2b      	bge.n	8004bea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d121      	bne.n	8004bea <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be6:	6053      	str	r3, [r2, #4]
            break;
 8004be8:	e007      	b.n	8004bfa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	3301      	adds	r3, #1
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d3b4      	bcc.n	8004b64 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f006 fea8 	bl	800b964 <USB_ReadInterrupts>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1e:	d10a      	bne.n	8004c36 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f009 fae9 	bl	800e1f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f006 fe92 	bl	800b964 <USB_ReadInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d115      	bne.n	8004c76 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f009 fad9 	bl	800e214 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	e000      	b.n	8004c76 <HAL_PCD_IRQHandler+0x992>
      return;
 8004c74:	bf00      	nop
    }
  }
}
 8004c76:	3734      	adds	r7, #52	; 0x34
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd90      	pop	{r4, r7, pc}

08004c7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_PCD_SetAddress+0x1a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e013      	b.n	8004cbe <HAL_PCD_SetAddress+0x42>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	78fa      	ldrb	r2, [r7, #3]
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f006 fdf0 	bl	800b894 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	4608      	mov	r0, r1
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	70fb      	strb	r3, [r7, #3]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	803b      	strh	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da0f      	bge.n	8004d0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	3338      	adds	r3, #56	; 0x38
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4413      	add	r3, r2
 8004d00:	3304      	adds	r3, #4
 8004d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	705a      	strb	r2, [r3, #1]
 8004d0a:	e00f      	b.n	8004d2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	3304      	adds	r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d38:	883a      	ldrh	r2, [r7, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	78ba      	ldrb	r2, [r7, #2]
 8004d42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d004      	beq.n	8004d56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d56:	78bb      	ldrb	r3, [r7, #2]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d102      	bne.n	8004d62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_PCD_EP_Open+0xaa>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e00e      	b.n	8004d8e <HAL_PCD_EP_Open+0xc8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68f9      	ldr	r1, [r7, #12]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f005 ff70 	bl	800ac64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	da0f      	bge.n	8004dca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	f003 020f 	and.w	r2, r3, #15
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	3338      	adds	r3, #56	; 0x38
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	705a      	strb	r2, [r3, #1]
 8004dc8:	e00f      	b.n	8004dea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	3304      	adds	r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_PCD_EP_Close+0x6e>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e00e      	b.n	8004e22 <HAL_PCD_EP_Close+0x8c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f005 ffae 	bl	800ad74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b086      	sub	sp, #24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	460b      	mov	r3, r1
 8004e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e3a:	7afb      	ldrb	r3, [r7, #11]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	3304      	adds	r3, #4
 8004e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2200      	movs	r2, #0
 8004e64:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d102      	bne.n	8004e86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	f006 f84a 	bl	800af2c <USB_EPStartXfer>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004ec4:	681b      	ldr	r3, [r3, #0]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3338      	adds	r3, #56	; 0x38
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f12:	7afb      	ldrb	r3, [r7, #11]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d102      	bne.n	8004f2c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	f005 fff7 	bl	800af2c <USB_EPStartXfer>

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d901      	bls.n	8004f66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e050      	b.n	8005008 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da0f      	bge.n	8004f8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	3338      	adds	r3, #56	; 0x38
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	3304      	adds	r3, #4
 8004f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	705a      	strb	r2, [r3, #1]
 8004f8c:	e00d      	b.n	8004faa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	4613      	mov	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_PCD_EP_SetStall+0x82>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e01e      	b.n	8005008 <HAL_PCD_EP_SetStall+0xc0>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f006 fb87 	bl	800b6ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	b2d9      	uxtb	r1, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f006 fd79 	bl	800baf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	429a      	cmp	r2, r3
 8005028:	d901      	bls.n	800502e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e042      	b.n	80050b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800502e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005032:	2b00      	cmp	r3, #0
 8005034:	da0f      	bge.n	8005056 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	3338      	adds	r3, #56	; 0x38
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	3304      	adds	r3, #4
 800504c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	705a      	strb	r2, [r3, #1]
 8005054:	e00f      	b.n	8005076 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	3304      	adds	r3, #4
 800506e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	b2da      	uxtb	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_PCD_EP_ClrStall+0x86>
 8005092:	2302      	movs	r3, #2
 8005094:	e00e      	b.n	80050b4 <HAL_PCD_EP_ClrStall+0xa4>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f006 fb8f 	bl	800b7c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80050c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	da0c      	bge.n	80050ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	f003 020f 	and.w	r2, r3, #15
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	3338      	adds	r3, #56	; 0x38
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4413      	add	r3, r2
 80050e4:	3304      	adds	r3, #4
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e00c      	b.n	8005104 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	4613      	mov	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	3304      	adds	r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	f006 f9ae 	bl	800b46c <USB_EPStopXfer>
 8005110:	4603      	mov	r3, r0
 8005112:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005114:	7afb      	ldrb	r3, [r7, #11]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b08a      	sub	sp, #40	; 0x28
 8005122:	af02      	add	r7, sp, #8
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	3338      	adds	r3, #56	; 0x38
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	3304      	adds	r3, #4
 8005144:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	429a      	cmp	r2, r3
 8005150:	d901      	bls.n	8005156 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e06c      	b.n	8005230 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	429a      	cmp	r2, r3
 800516a:	d902      	bls.n	8005172 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3303      	adds	r3, #3
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800517a:	e02b      	b.n	80051d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	429a      	cmp	r2, r3
 8005190:	d902      	bls.n	8005198 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3303      	adds	r3, #3
 800519c:	089b      	lsrs	r3, r3, #2
 800519e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68d9      	ldr	r1, [r3, #12]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4603      	mov	r3, r0
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f006 fa02 	bl	800b5c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	441a      	add	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	441a      	add	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d809      	bhi.n	80051fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d203      	bcs.n	80051fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1be      	bne.n	800517c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	429a      	cmp	r2, r3
 8005208:	d811      	bhi.n	800522e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	2201      	movs	r2, #1
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	43db      	mvns	r3, r3
 8005224:	6939      	ldr	r1, [r7, #16]
 8005226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800522a:	4013      	ands	r3, r2
 800522c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	333c      	adds	r3, #60	; 0x3c
 8005250:	3304      	adds	r3, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d17b      	bne.n	8005366 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4a61      	ldr	r2, [pc, #388]	; (8005400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	f240 80b9 	bls.w	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80b3 	beq.w	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a0:	6093      	str	r3, [r2, #8]
 80052a2:	e0a7      	b.n	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	461a      	mov	r2, r3
 80052bc:	2320      	movs	r3, #32
 80052be:	6093      	str	r3, [r2, #8]
 80052c0:	e098      	b.n	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f040 8093 	bne.w	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	4a4b      	ldr	r2, [pc, #300]	; (8005400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d90f      	bls.n	80052f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	461a      	mov	r2, r3
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	6093      	str	r3, [r2, #8]
 80052f4:	e07e      	b.n	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4413      	add	r3, r2
 8005308:	3304      	adds	r3, #4
 800530a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	0159      	lsls	r1, r3, #5
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	440b      	add	r3, r1
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005322:	1ad2      	subs	r2, r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d114      	bne.n	8005358 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005340:	461a      	mov	r2, r3
 8005342:	2101      	movs	r1, #1
 8005344:	f006 fbd4 	bl	800baf0 <USB_EP0_OutStart>
 8005348:	e006      	b.n	8005358 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	441a      	add	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f008 fe86 	bl	800e070 <HAL_PCD_DataOutStageCallback>
 8005364:	e046      	b.n	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4a26      	ldr	r2, [pc, #152]	; (8005404 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d124      	bne.n	80053b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	6093      	str	r3, [r2, #8]
 800538c:	e032      	b.n	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	461a      	mov	r2, r3
 80053a6:	2320      	movs	r3, #32
 80053a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f008 fe5d 	bl	800e070 <HAL_PCD_DataOutStageCallback>
 80053b6:	e01d      	b.n	80053f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d114      	bne.n	80053e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d108      	bne.n	80053e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053e0:	461a      	mov	r2, r3
 80053e2:	2100      	movs	r1, #0
 80053e4:	f006 fb84 	bl	800baf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f008 fe3e 	bl	800e070 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	4f54300a 	.word	0x4f54300a
 8005404:	4f54310a 	.word	0x4f54310a

08005408 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	333c      	adds	r3, #60	; 0x3c
 8005420:	3304      	adds	r3, #4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a15      	ldr	r2, [pc, #84]	; (8005490 <PCD_EP_OutSetupPacket_int+0x88>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d90e      	bls.n	800545c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	461a      	mov	r2, r3
 8005456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800545a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f008 fdf5 	bl	800e04c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <PCD_EP_OutSetupPacket_int+0x88>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d90c      	bls.n	8005484 <PCD_EP_OutSetupPacket_int+0x7c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d108      	bne.n	8005484 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800547c:	461a      	mov	r2, r3
 800547e:	2101      	movs	r1, #1
 8005480:	f006 fb36 	bl	800baf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	4f54300a 	.word	0x4f54300a

08005494 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
 80054a0:	4613      	mov	r3, r2
 80054a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054b2:	883b      	ldrh	r3, [r7, #0]
 80054b4:	0419      	lsls	r1, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	430a      	orrs	r2, r1
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
 80054c0:	e028      	b.n	8005514 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4413      	add	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]
 80054d4:	e00d      	b.n	80054f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	3340      	adds	r3, #64	; 0x40
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	3301      	adds	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d3ec      	bcc.n	80054d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054fc:	883b      	ldrh	r3, [r7, #0]
 80054fe:	0418      	lsls	r0, r3, #16
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	3b01      	subs	r3, #1
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	4302      	orrs	r2, r0
 800550c:	3340      	adds	r3, #64	; 0x40
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	887a      	ldrh	r2, [r7, #2]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_PCDEx_ActivateLPM+0x44>)
 8005574:	4313      	orrs	r3, r2
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	10000003 	.word	0x10000003

0800558c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d00a      	beq.n	80055ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d001      	beq.n	80055ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e01f      	b.n	800560a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e01d      	b.n	800560a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055ce:	4b11      	ldr	r3, [pc, #68]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 0207 	bic.w	r2, r3, #7
 80055d6:	490f      	ldr	r1, [pc, #60]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055de:	f7fb fbd3 	bl	8000d88 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055e4:	e009      	b.n	80055fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80055e6:	f7fb fbcf 	bl	8000d88 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f4:	d901      	bls.n	80055fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e007      	b.n	800560a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	d1ee      	bne.n	80055e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	58024800 	.word	0x58024800

08005618 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a04      	ldr	r2, [pc, #16]	; (8005634 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005626:	60d3      	str	r3, [r2, #12]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	58024800 	.word	0x58024800

08005638 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08c      	sub	sp, #48	; 0x30
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e3c8      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8087 	beq.w	8005766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005658:	4b88      	ldr	r3, [pc, #544]	; (800587c <HAL_RCC_OscConfig+0x244>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005662:	4b86      	ldr	r3, [pc, #536]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	2b10      	cmp	r3, #16
 800566c:	d007      	beq.n	800567e <HAL_RCC_OscConfig+0x46>
 800566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005670:	2b18      	cmp	r3, #24
 8005672:	d110      	bne.n	8005696 <HAL_RCC_OscConfig+0x5e>
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d10b      	bne.n	8005696 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567e:	4b7f      	ldr	r3, [pc, #508]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d06c      	beq.n	8005764 <HAL_RCC_OscConfig+0x12c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d168      	bne.n	8005764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e3a2      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569e:	d106      	bne.n	80056ae <HAL_RCC_OscConfig+0x76>
 80056a0:	4b76      	ldr	r3, [pc, #472]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a75      	ldr	r2, [pc, #468]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e02e      	b.n	800570c <HAL_RCC_OscConfig+0xd4>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCC_OscConfig+0x98>
 80056b6:	4b71      	ldr	r3, [pc, #452]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a70      	ldr	r2, [pc, #448]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4b6e      	ldr	r3, [pc, #440]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a6d      	ldr	r2, [pc, #436]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	e01d      	b.n	800570c <HAL_RCC_OscConfig+0xd4>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCC_OscConfig+0xbc>
 80056da:	4b68      	ldr	r3, [pc, #416]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a67      	ldr	r2, [pc, #412]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b65      	ldr	r3, [pc, #404]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a64      	ldr	r2, [pc, #400]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e00b      	b.n	800570c <HAL_RCC_OscConfig+0xd4>
 80056f4:	4b61      	ldr	r3, [pc, #388]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a60      	ldr	r2, [pc, #384]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80056fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b5e      	ldr	r3, [pc, #376]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a5d      	ldr	r2, [pc, #372]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d013      	beq.n	800573c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fb fb38 	bl	8000d88 <HAL_GetTick>
 8005718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800571c:	f7fb fb34 	bl	8000d88 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b64      	cmp	r3, #100	; 0x64
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e356      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800572e:	4b53      	ldr	r3, [pc, #332]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0xe4>
 800573a:	e014      	b.n	8005766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fb fb24 	bl	8000d88 <HAL_GetTick>
 8005740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005744:	f7fb fb20 	bl	8000d88 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e342      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005756:	4b49      	ldr	r3, [pc, #292]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f0      	bne.n	8005744 <HAL_RCC_OscConfig+0x10c>
 8005762:	e000      	b.n	8005766 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 808c 	beq.w	800588c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005774:	4b41      	ldr	r3, [pc, #260]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800577c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800577e:	4b3f      	ldr	r3, [pc, #252]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_RCC_OscConfig+0x162>
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	2b18      	cmp	r3, #24
 800578e:	d137      	bne.n	8005800 <HAL_RCC_OscConfig+0x1c8>
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d132      	bne.n	8005800 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800579a:	4b38      	ldr	r3, [pc, #224]	; (800587c <HAL_RCC_OscConfig+0x244>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_RCC_OscConfig+0x17a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e314      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057b2:	4b32      	ldr	r3, [pc, #200]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 0219 	bic.w	r2, r3, #25
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	492f      	ldr	r1, [pc, #188]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fb fae0 	bl	8000d88 <HAL_GetTick>
 80057c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057cc:	f7fb fadc 	bl	8000d88 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e2fe      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057de:	4b27      	ldr	r3, [pc, #156]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ea:	4b24      	ldr	r3, [pc, #144]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	061b      	lsls	r3, r3, #24
 80057f8:	4920      	ldr	r1, [pc, #128]	; (800587c <HAL_RCC_OscConfig+0x244>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057fe:	e045      	b.n	800588c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d026      	beq.n	8005856 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005808:	4b1c      	ldr	r3, [pc, #112]	; (800587c <HAL_RCC_OscConfig+0x244>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 0219 	bic.w	r2, r3, #25
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4919      	ldr	r1, [pc, #100]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fb fab5 	bl	8000d88 <HAL_GetTick>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005822:	f7fb fab1 	bl	8000d88 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e2d3      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005840:	4b0e      	ldr	r3, [pc, #56]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	490b      	ldr	r1, [pc, #44]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
 8005854:	e01a      	b.n	800588c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <HAL_RCC_OscConfig+0x244>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a08      	ldr	r2, [pc, #32]	; (800587c <HAL_RCC_OscConfig+0x244>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fb fa91 	bl	8000d88 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800586a:	f7fb fa8d 	bl	8000d88 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d903      	bls.n	8005880 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e2af      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
 800587c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005880:	4b96      	ldr	r3, [pc, #600]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1ee      	bne.n	800586a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d06a      	beq.n	800596e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005898:	4b90      	ldr	r3, [pc, #576]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058a2:	4b8e      	ldr	r3, [pc, #568]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d007      	beq.n	80058be <HAL_RCC_OscConfig+0x286>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b18      	cmp	r3, #24
 80058b2:	d11b      	bne.n	80058ec <HAL_RCC_OscConfig+0x2b4>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d116      	bne.n	80058ec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058be:	4b87      	ldr	r3, [pc, #540]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_RCC_OscConfig+0x29e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	2b80      	cmp	r3, #128	; 0x80
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e282      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058d6:	4b81      	ldr	r3, [pc, #516]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	061b      	lsls	r3, r3, #24
 80058e4:	497d      	ldr	r1, [pc, #500]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058ea:	e040      	b.n	800596e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d023      	beq.n	800593c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058f4:	4b79      	ldr	r3, [pc, #484]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a78      	ldr	r2, [pc, #480]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fb fa42 	bl	8000d88 <HAL_GetTick>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005908:	f7fb fa3e 	bl	8000d88 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e260      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800591a:	4b70      	ldr	r3, [pc, #448]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005926:	4b6d      	ldr	r3, [pc, #436]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	061b      	lsls	r3, r3, #24
 8005934:	4969      	ldr	r1, [pc, #420]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	60cb      	str	r3, [r1, #12]
 800593a:	e018      	b.n	800596e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800593c:	4b67      	ldr	r3, [pc, #412]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a66      	ldr	r2, [pc, #408]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fb fa1e 	bl	8000d88 <HAL_GetTick>
 800594c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005950:	f7fb fa1a 	bl	8000d88 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e23c      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005962:	4b5e      	ldr	r3, [pc, #376]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d036      	beq.n	80059e8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d019      	beq.n	80059b6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005982:	4b56      	ldr	r3, [pc, #344]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005986:	4a55      	ldr	r2, [pc, #340]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598e:	f7fb f9fb 	bl	8000d88 <HAL_GetTick>
 8005992:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005996:	f7fb f9f7 	bl	8000d88 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e219      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059a8:	4b4c      	ldr	r3, [pc, #304]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80059aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <HAL_RCC_OscConfig+0x35e>
 80059b4:	e018      	b.n	80059e8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059b6:	4b49      	ldr	r3, [pc, #292]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80059b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ba:	4a48      	ldr	r2, [pc, #288]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fb f9e1 	bl	8000d88 <HAL_GetTick>
 80059c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ca:	f7fb f9dd 	bl	8000d88 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e1ff      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059dc:	4b3f      	ldr	r3, [pc, #252]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80059de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d036      	beq.n	8005a62 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d019      	beq.n	8005a30 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059fc:	4b37      	ldr	r3, [pc, #220]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a36      	ldr	r2, [pc, #216]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a08:	f7fb f9be 	bl	8000d88 <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a10:	f7fb f9ba 	bl	8000d88 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e1dc      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a22:	4b2e      	ldr	r3, [pc, #184]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x3d8>
 8005a2e:	e018      	b.n	8005a62 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a30:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a29      	ldr	r2, [pc, #164]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a3c:	f7fb f9a4 	bl	8000d88 <HAL_GetTick>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a44:	f7fb f9a0 	bl	8000d88 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e1c2      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8086 	beq.w	8005b7c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a70:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <HAL_RCC_OscConfig+0x4a8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <HAL_RCC_OscConfig+0x4a8>)
 8005a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7c:	f7fb f984 	bl	8000d88 <HAL_GetTick>
 8005a80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fb f980 	bl	8000d88 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1a2      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <HAL_RCC_OscConfig+0x4a8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d106      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x480>
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	4a0b      	ldr	r2, [pc, #44]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab6:	e032      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4ac>
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	4a05      	ldr	r2, [pc, #20]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	6713      	str	r3, [r2, #112]	; 0x70
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad0:	4a02      	ldr	r2, [pc, #8]	; (8005adc <HAL_RCC_OscConfig+0x4a4>)
 8005ad2:	f023 0304 	bic.w	r3, r3, #4
 8005ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad8:	e021      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e6>
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	58024800 	.word	0x58024800
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b05      	cmp	r3, #5
 8005aea:	d10c      	bne.n	8005b06 <HAL_RCC_OscConfig+0x4ce>
 8005aec:	4b83      	ldr	r3, [pc, #524]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a82      	ldr	r2, [pc, #520]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005af2:	f043 0304 	orr.w	r3, r3, #4
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
 8005af8:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	4a7f      	ldr	r2, [pc, #508]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	6713      	str	r3, [r2, #112]	; 0x70
 8005b04:	e00b      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e6>
 8005b06:	4b7d      	ldr	r3, [pc, #500]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	4a7c      	ldr	r2, [pc, #496]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	6713      	str	r3, [r2, #112]	; 0x70
 8005b12:	4b7a      	ldr	r3, [pc, #488]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	4a79      	ldr	r2, [pc, #484]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d015      	beq.n	8005b52 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b26:	f7fb f92f 	bl	8000d88 <HAL_GetTick>
 8005b2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2e:	f7fb f92b 	bl	8000d88 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e14b      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b44:	4b6d      	ldr	r3, [pc, #436]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ee      	beq.n	8005b2e <HAL_RCC_OscConfig+0x4f6>
 8005b50:	e014      	b.n	8005b7c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7fb f919 	bl	8000d88 <HAL_GetTick>
 8005b56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b58:	e00a      	b.n	8005b70 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fb f915 	bl	8000d88 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e135      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b70:	4b62      	ldr	r3, [pc, #392]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1ee      	bne.n	8005b5a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 812a 	beq.w	8005dda <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b86:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b8e:	2b18      	cmp	r3, #24
 8005b90:	f000 80ba 	beq.w	8005d08 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	f040 8095 	bne.w	8005cc8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b57      	ldr	r3, [pc, #348]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a56      	ldr	r2, [pc, #344]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fb f8ed 	bl	8000d88 <HAL_GetTick>
 8005bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb2:	f7fb f8e9 	bl	8000d88 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e10b      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f0      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd0:	4b4a      	ldr	r3, [pc, #296]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd4:	4b4a      	ldr	r3, [pc, #296]	; (8005d00 <HAL_RCC_OscConfig+0x6c8>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005be0:	0112      	lsls	r2, r2, #4
 8005be2:	430a      	orrs	r2, r1
 8005be4:	4945      	ldr	r1, [pc, #276]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	628b      	str	r3, [r1, #40]	; 0x28
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	025b      	lsls	r3, r3, #9
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	3b01      	subs	r3, #1
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	3b01      	subs	r3, #1
 8005c14:	061b      	lsls	r3, r3, #24
 8005c16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c1a:	4938      	ldr	r1, [pc, #224]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c20:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c2c:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c30:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCC_OscConfig+0x6cc>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c38:	00d2      	lsls	r2, r2, #3
 8005c3a:	4930      	ldr	r1, [pc, #192]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c40:	4b2e      	ldr	r3, [pc, #184]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f023 020c 	bic.w	r2, r3, #12
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	492b      	ldr	r1, [pc, #172]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c52:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	f023 0202 	bic.w	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5e:	4927      	ldr	r1, [pc, #156]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	4a24      	ldr	r2, [pc, #144]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c70:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca0:	f7fb f872 	bl	8000d88 <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fb f86e 	bl	8000d88 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e090      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x670>
 8005cc6:	e088      	b.n	8005dda <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a0b      	ldr	r2, [pc, #44]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fb f858 	bl	8000d88 <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cdc:	f7fb f854 	bl	8000d88 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e076      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <HAL_RCC_OscConfig+0x6c4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x6a4>
 8005cfa:	e06e      	b.n	8005dda <HAL_RCC_OscConfig+0x7a2>
 8005cfc:	58024400 	.word	0x58024400
 8005d00:	fffffc0c 	.word	0xfffffc0c
 8005d04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d08:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d0e:	4b35      	ldr	r3, [pc, #212]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d031      	beq.n	8005d80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f003 0203 	and.w	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d12a      	bne.n	8005d80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d122      	bne.n	8005d80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d11a      	bne.n	8005d80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	0a5b      	lsrs	r3, r3, #9
 8005d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d111      	bne.n	8005d80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	0c1b      	lsrs	r3, r3, #16
 8005d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d108      	bne.n	8005d80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	0e1b      	lsrs	r3, r3, #24
 8005d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e02b      	b.n	8005ddc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d84:	4b17      	ldr	r3, [pc, #92]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	08db      	lsrs	r3, r3, #3
 8005d8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d01f      	beq.n	8005dda <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d9a:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	4a11      	ldr	r2, [pc, #68]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005da6:	f7fa ffef 	bl	8000d88 <HAL_GetTick>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005dac:	bf00      	nop
 8005dae:	f7fa ffeb 	bl	8000d88 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d0f9      	beq.n	8005dae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <HAL_RCC_OscConfig+0x7b0>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005dc6:	00d2      	lsls	r2, r2, #3
 8005dc8:	4906      	ldr	r1, [pc, #24]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	4a04      	ldr	r2, [pc, #16]	; (8005de4 <HAL_RCC_OscConfig+0x7ac>)
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3730      	adds	r7, #48	; 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	58024400 	.word	0x58024400
 8005de8:	ffff0007 	.word	0xffff0007

08005dec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e19c      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e00:	4b8a      	ldr	r3, [pc, #552]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d910      	bls.n	8005e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0e:	4b87      	ldr	r3, [pc, #540]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 020f 	bic.w	r2, r3, #15
 8005e16:	4985      	ldr	r1, [pc, #532]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	4b83      	ldr	r3, [pc, #524]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e184      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	4b7b      	ldr	r3, [pc, #492]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d908      	bls.n	8005e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e4c:	4b78      	ldr	r3, [pc, #480]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	4975      	ldr	r1, [pc, #468]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d010      	beq.n	8005e8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	4b70      	ldr	r3, [pc, #448]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d908      	bls.n	8005e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e7a:	4b6d      	ldr	r3, [pc, #436]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	496a      	ldr	r1, [pc, #424]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	4b64      	ldr	r3, [pc, #400]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d908      	bls.n	8005eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ea8:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	495e      	ldr	r1, [pc, #376]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d010      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69da      	ldr	r2, [r3, #28]
 8005eca:	4b59      	ldr	r3, [pc, #356]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d908      	bls.n	8005ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ed6:	4b56      	ldr	r3, [pc, #344]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	4953      	ldr	r1, [pc, #332]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	4b4d      	ldr	r3, [pc, #308]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d908      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f04:	4b4a      	ldr	r3, [pc, #296]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f023 020f 	bic.w	r2, r3, #15
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4947      	ldr	r1, [pc, #284]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d055      	beq.n	8005fce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f22:	4b43      	ldr	r3, [pc, #268]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	4940      	ldr	r1, [pc, #256]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f3c:	4b3c      	ldr	r3, [pc, #240]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d121      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0f6      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d107      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f54:	4b36      	ldr	r3, [pc, #216]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d115      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0ea      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f6c:	4b30      	ldr	r3, [pc, #192]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0de      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f7c:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0d6      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f023 0207 	bic.w	r2, r3, #7
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4925      	ldr	r1, [pc, #148]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f9e:	f7fa fef3 	bl	8000d88 <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa6:	f7fa feef 	bl	8000d88 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e0be      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fbc:	4b1c      	ldr	r3, [pc, #112]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d1eb      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d010      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	4b14      	ldr	r3, [pc, #80]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d208      	bcs.n	8005ffc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f023 020f 	bic.w	r2, r3, #15
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	490e      	ldr	r1, [pc, #56]	; (8006030 <HAL_RCC_ClockConfig+0x244>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d214      	bcs.n	8006034 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b08      	ldr	r3, [pc, #32]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 020f 	bic.w	r2, r3, #15
 8006012:	4906      	ldr	r1, [pc, #24]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b04      	ldr	r3, [pc, #16]	; (800602c <HAL_RCC_ClockConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d005      	beq.n	8006034 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e086      	b.n	800613a <HAL_RCC_ClockConfig+0x34e>
 800602c:	52002000 	.word	0x52002000
 8006030:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d010      	beq.n	8006062 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	4b3f      	ldr	r3, [pc, #252]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800604c:	429a      	cmp	r2, r3
 800604e:	d208      	bcs.n	8006062 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006050:	4b3c      	ldr	r3, [pc, #240]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	4939      	ldr	r1, [pc, #228]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 800605e:	4313      	orrs	r3, r2
 8006060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d010      	beq.n	8006090 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800607a:	429a      	cmp	r2, r3
 800607c:	d208      	bcs.n	8006090 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	492e      	ldr	r1, [pc, #184]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 800608c:	4313      	orrs	r3, r2
 800608e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b00      	cmp	r3, #0
 800609a:	d010      	beq.n	80060be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d208      	bcs.n	80060be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060ac:	4b25      	ldr	r3, [pc, #148]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	4922      	ldr	r1, [pc, #136]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d010      	beq.n	80060ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69da      	ldr	r2, [r3, #28]
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d208      	bcs.n	80060ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060da:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	4917      	ldr	r1, [pc, #92]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060ec:	f000 f834 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	4912      	ldr	r1, [pc, #72]	; (8006148 <HAL_RCC_ClockConfig+0x35c>)
 80060fe:	5ccb      	ldrb	r3, [r1, r3]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
 8006108:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800610a:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_RCC_ClockConfig+0x358>)
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	4a0d      	ldr	r2, [pc, #52]	; (8006148 <HAL_RCC_ClockConfig+0x35c>)
 8006114:	5cd3      	ldrb	r3, [r2, r3]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
 8006120:	4a0a      	ldr	r2, [pc, #40]	; (800614c <HAL_RCC_ClockConfig+0x360>)
 8006122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006124:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <HAL_RCC_ClockConfig+0x364>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <HAL_RCC_ClockConfig+0x368>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa fde0 	bl	8000cf4 <HAL_InitTick>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
 8006148:	0800e690 	.word	0x0800e690
 800614c:	24000004 	.word	0x24000004
 8006150:	24000000 	.word	0x24000000
 8006154:	24000008 	.word	0x24000008

08006158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006158:	b480      	push	{r7}
 800615a:	b089      	sub	sp, #36	; 0x24
 800615c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800615e:	4bb3      	ldr	r3, [pc, #716]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006166:	2b18      	cmp	r3, #24
 8006168:	f200 8155 	bhi.w	8006416 <HAL_RCC_GetSysClockFreq+0x2be>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <HAL_RCC_GetSysClockFreq+0x1c>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	080061d9 	.word	0x080061d9
 8006178:	08006417 	.word	0x08006417
 800617c:	08006417 	.word	0x08006417
 8006180:	08006417 	.word	0x08006417
 8006184:	08006417 	.word	0x08006417
 8006188:	08006417 	.word	0x08006417
 800618c:	08006417 	.word	0x08006417
 8006190:	08006417 	.word	0x08006417
 8006194:	080061ff 	.word	0x080061ff
 8006198:	08006417 	.word	0x08006417
 800619c:	08006417 	.word	0x08006417
 80061a0:	08006417 	.word	0x08006417
 80061a4:	08006417 	.word	0x08006417
 80061a8:	08006417 	.word	0x08006417
 80061ac:	08006417 	.word	0x08006417
 80061b0:	08006417 	.word	0x08006417
 80061b4:	08006205 	.word	0x08006205
 80061b8:	08006417 	.word	0x08006417
 80061bc:	08006417 	.word	0x08006417
 80061c0:	08006417 	.word	0x08006417
 80061c4:	08006417 	.word	0x08006417
 80061c8:	08006417 	.word	0x08006417
 80061cc:	08006417 	.word	0x08006417
 80061d0:	08006417 	.word	0x08006417
 80061d4:	0800620b 	.word	0x0800620b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d8:	4b94      	ldr	r3, [pc, #592]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061e4:	4b91      	ldr	r3, [pc, #580]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	08db      	lsrs	r3, r3, #3
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	4a90      	ldr	r2, [pc, #576]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80061f6:	e111      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80061f8:	4b8d      	ldr	r3, [pc, #564]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061fa:	61bb      	str	r3, [r7, #24]
      break;
 80061fc:	e10e      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80061fe:	4b8d      	ldr	r3, [pc, #564]	; (8006434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006200:	61bb      	str	r3, [r7, #24]
      break;
 8006202:	e10b      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006204:	4b8c      	ldr	r3, [pc, #560]	; (8006438 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006206:	61bb      	str	r3, [r7, #24]
      break;
 8006208:	e108      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800620a:	4b88      	ldr	r3, [pc, #544]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006214:	4b85      	ldr	r3, [pc, #532]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800621e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006220:	4b82      	ldr	r3, [pc, #520]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800622a:	4b80      	ldr	r3, [pc, #512]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622e:	08db      	lsrs	r3, r3, #3
 8006230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80e1 	beq.w	8006410 <HAL_RCC_GetSysClockFreq+0x2b8>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b02      	cmp	r3, #2
 8006252:	f000 8083 	beq.w	800635c <HAL_RCC_GetSysClockFreq+0x204>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b02      	cmp	r3, #2
 800625a:	f200 80a1 	bhi.w	80063a0 <HAL_RCC_GetSysClockFreq+0x248>
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x114>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d056      	beq.n	8006318 <HAL_RCC_GetSysClockFreq+0x1c0>
 800626a:	e099      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800626c:	4b6f      	ldr	r3, [pc, #444]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d02d      	beq.n	80062d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006278:	4b6c      	ldr	r3, [pc, #432]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	08db      	lsrs	r3, r3, #3
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	4a6b      	ldr	r2, [pc, #428]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
 8006288:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a2:	4b62      	ldr	r3, [pc, #392]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800643c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80062d2:	e087      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006440 <HAL_RCC_GetSysClockFreq+0x2e8>
 80062e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e6:	4b51      	ldr	r3, [pc, #324]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800643c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800630a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006316:	e065      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006444 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632a:	4b40      	ldr	r3, [pc, #256]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633a:	ed97 6a02 	vldr	s12, [r7, #8]
 800633e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800643c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800634e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800635a:	e043      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006366:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006448 <HAL_RCC_GetSysClockFreq+0x2f0>
 800636a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636e:	4b2f      	ldr	r3, [pc, #188]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006382:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800643c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800639e:	e021      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006444 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b2:	4b1e      	ldr	r3, [pc, #120]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800643c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80063e4:	4b11      	ldr	r3, [pc, #68]	; (800642c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	0a5b      	lsrs	r3, r3, #9
 80063ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ee:	3301      	adds	r3, #1
 80063f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006408:	ee17 3a90 	vmov	r3, s15
 800640c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800640e:	e005      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	61bb      	str	r3, [r7, #24]
      break;
 8006414:	e002      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006416:	4b07      	ldr	r3, [pc, #28]	; (8006434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006418:	61bb      	str	r3, [r7, #24]
      break;
 800641a:	bf00      	nop
  }

  return sysclockfreq;
 800641c:	69bb      	ldr	r3, [r7, #24]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3724      	adds	r7, #36	; 0x24
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	58024400 	.word	0x58024400
 8006430:	03d09000 	.word	0x03d09000
 8006434:	003d0900 	.word	0x003d0900
 8006438:	00f42400 	.word	0x00f42400
 800643c:	46000000 	.word	0x46000000
 8006440:	4c742400 	.word	0x4c742400
 8006444:	4a742400 	.word	0x4a742400
 8006448:	4b742400 	.word	0x4b742400

0800644c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006452:	f7ff fe81 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8006456:	4602      	mov	r2, r0
 8006458:	4b10      	ldr	r3, [pc, #64]	; (800649c <HAL_RCC_GetHCLKFreq+0x50>)
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	490f      	ldr	r1, [pc, #60]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006464:	5ccb      	ldrb	r3, [r1, r3]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <HAL_RCC_GetHCLKFreq+0x50>)
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800647a:	5cd3      	ldrb	r3, [r2, r3]
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	fa22 f303 	lsr.w	r3, r2, r3
 8006486:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006488:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	58024400 	.word	0x58024400
 80064a0:	0800e690 	.word	0x0800e690
 80064a4:	24000004 	.word	0x24000004
 80064a8:	24000000 	.word	0x24000000

080064ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064b0:	f7ff ffcc 	bl	800644c <HAL_RCC_GetHCLKFreq>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4904      	ldr	r1, [pc, #16]	; (80064d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	58024400 	.word	0x58024400
 80064d4:	0800e690 	.word	0x0800e690

080064d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064dc:	f7ff ffb6 	bl	800644c <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4904      	ldr	r1, [pc, #16]	; (8006500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	58024400 	.word	0x58024400
 8006500:	0800e690 	.word	0x0800e690

08006504 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006508:	b0c6      	sub	sp, #280	; 0x118
 800650a:	af00      	add	r7, sp, #0
 800650c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006516:	2300      	movs	r3, #0
 8006518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006528:	2500      	movs	r5, #0
 800652a:	ea54 0305 	orrs.w	r3, r4, r5
 800652e:	d049      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800653a:	d02f      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800653c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006540:	d828      	bhi.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006546:	d01a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800654c:	d822      	bhi.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006556:	d007      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006558:	e01c      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655a:	4bab      	ldr	r3, [pc, #684]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	4aaa      	ldr	r2, [pc, #680]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006566:	e01a      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	3308      	adds	r3, #8
 800656e:	2102      	movs	r1, #2
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fc25 	bl	8007dc0 <RCCEx_PLL2_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800657c:	e00f      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	3328      	adds	r3, #40	; 0x28
 8006584:	2102      	movs	r1, #2
 8006586:	4618      	mov	r0, r3
 8006588:	f001 fccc 	bl	8007f24 <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006592:	e004      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800659a:	e000      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800659c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065a6:	4b98      	ldr	r3, [pc, #608]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065b4:	4a94      	ldr	r2, [pc, #592]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065b6:	430b      	orrs	r3, r1
 80065b8:	6513      	str	r3, [r2, #80]	; 0x50
 80065ba:	e003      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80065d0:	f04f 0900 	mov.w	r9, #0
 80065d4:	ea58 0309 	orrs.w	r3, r8, r9
 80065d8:	d047      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d82a      	bhi.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80065e4:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	08006601 	.word	0x08006601
 80065f0:	0800660f 	.word	0x0800660f
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006643 	.word	0x08006643
 80065fc:	08006643 	.word	0x08006643
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006600:	4b81      	ldr	r3, [pc, #516]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a80      	ldr	r2, [pc, #512]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800660c:	e01a      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006612:	3308      	adds	r3, #8
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f001 fbd2 	bl	8007dc0 <RCCEx_PLL2_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006622:	e00f      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	3328      	adds	r3, #40	; 0x28
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f001 fc79 	bl	8007f24 <RCCEx_PLL3_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006638:	e004      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006640:	e000      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006644:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800664c:	4b6e      	ldr	r3, [pc, #440]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800664e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006650:	f023 0107 	bic.w	r1, r3, #7
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665a:	4a6b      	ldr	r2, [pc, #428]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800665c:	430b      	orrs	r3, r1
 800665e:	6513      	str	r3, [r2, #80]	; 0x50
 8006660:	e003      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006662:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006666:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006676:	f04f 0b00 	mov.w	fp, #0
 800667a:	ea5a 030b 	orrs.w	r3, sl, fp
 800667e:	d05b      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006688:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800668c:	d03b      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800668e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006692:	d834      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006694:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006698:	d037      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800669a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800669e:	d82e      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066a4:	d033      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80066a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066aa:	d828      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066b0:	d01a      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80066b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066b6:	d822      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80066bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066c0:	d007      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80066c2:	e01c      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c4:	4b50      	ldr	r3, [pc, #320]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4a4f      	ldr	r2, [pc, #316]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066d0:	e01e      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d6:	3308      	adds	r3, #8
 80066d8:	2100      	movs	r1, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 fb70 	bl	8007dc0 <RCCEx_PLL2_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066e6:	e013      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ec:	3328      	adds	r3, #40	; 0x28
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fc17 	bl	8007f24 <RCCEx_PLL3_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066fc:	e008      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006704:	e004      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006706:	bf00      	nop
 8006708:	e002      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800670a:	bf00      	nop
 800670c:	e000      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800670e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006718:	4b3b      	ldr	r3, [pc, #236]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800671a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006728:	4a37      	ldr	r2, [pc, #220]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800672a:	430b      	orrs	r3, r1
 800672c:	6593      	str	r3, [r2, #88]	; 0x58
 800672e:	e003      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006734:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800674e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	d05d      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006760:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006764:	d03b      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006766:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800676a:	d834      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800676c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006770:	d037      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006776:	d82e      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800677c:	d033      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800677e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006782:	d828      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006788:	d01a      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800678a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800678e:	d822      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006798:	d007      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800679a:	e01c      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800679c:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4a19      	ldr	r2, [pc, #100]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067a8:	e01e      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ae:	3308      	adds	r3, #8
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fb04 	bl	8007dc0 <RCCEx_PLL2_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067be:	e013      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c4:	3328      	adds	r3, #40	; 0x28
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 fbab 	bl	8007f24 <RCCEx_PLL3_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067dc:	e004      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067de:	bf00      	nop
 80067e0:	e002      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067e2:	bf00      	nop
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10d      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006800:	4a01      	ldr	r2, [pc, #4]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006802:	430b      	orrs	r3, r1
 8006804:	6593      	str	r3, [r2, #88]	; 0x58
 8006806:	e005      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006810:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006820:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006824:	2300      	movs	r3, #0
 8006826:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800682a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d03a      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	2b30      	cmp	r3, #48	; 0x30
 800683c:	d01f      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800683e:	2b30      	cmp	r3, #48	; 0x30
 8006840:	d819      	bhi.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006842:	2b20      	cmp	r3, #32
 8006844:	d00c      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006846:	2b20      	cmp	r3, #32
 8006848:	d815      	bhi.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d019      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800684e:	2b10      	cmp	r3, #16
 8006850:	d111      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006852:	4baa      	ldr	r3, [pc, #680]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	4aa9      	ldr	r2, [pc, #676]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800685e:	e011      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006864:	3308      	adds	r3, #8
 8006866:	2102      	movs	r1, #2
 8006868:	4618      	mov	r0, r3
 800686a:	f001 faa9 	bl	8007dc0 <RCCEx_PLL2_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006874:	e006      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800687c:	e002      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800687e:	bf00      	nop
 8006880:	e000      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800688c:	4b9b      	ldr	r3, [pc, #620]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800688e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006890:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689a:	4a98      	ldr	r2, [pc, #608]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800689c:	430b      	orrs	r3, r1
 800689e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068a0:	e003      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80068b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068ba:	2300      	movs	r3, #0
 80068bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d051      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d4:	d035      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80068d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068da:	d82e      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80068dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068e0:	d031      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80068e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068e6:	d828      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80068e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ec:	d01a      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80068ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f2:	d822      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80068f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fc:	d007      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80068fe:	e01c      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006900:	4b7e      	ldr	r3, [pc, #504]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	4a7d      	ldr	r2, [pc, #500]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800690c:	e01c      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006912:	3308      	adds	r3, #8
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fa52 	bl	8007dc0 <RCCEx_PLL2_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006922:	e011      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006928:	3328      	adds	r3, #40	; 0x28
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f001 faf9 	bl	8007f24 <RCCEx_PLL3_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006938:	e006      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006940:	e002      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006950:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006954:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695e:	4a67      	ldr	r2, [pc, #412]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6513      	str	r3, [r2, #80]	; 0x50
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800696a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800696e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800697a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800697e:	2300      	movs	r3, #0
 8006980:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006984:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006988:	460b      	mov	r3, r1
 800698a:	4313      	orrs	r3, r2
 800698c:	d053      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006998:	d033      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800699a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800699e:	d82c      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069a4:	d02f      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80069a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069aa:	d826      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069b0:	d02b      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80069b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069b6:	d820      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069bc:	d012      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80069be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069c2:	d81a      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d022      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80069c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069cc:	d115      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d2:	3308      	adds	r3, #8
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 f9f2 	bl	8007dc0 <RCCEx_PLL2_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069e2:	e015      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e8:	3328      	adds	r3, #40	; 0x28
 80069ea:	2101      	movs	r1, #1
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fa99 	bl	8007f24 <RCCEx_PLL3_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069f8:	e00a      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a00:	e006      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a02:	bf00      	nop
 8006a04:	e004      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a06:	bf00      	nop
 8006a08:	e002      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a18:	4b38      	ldr	r3, [pc, #224]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a26:	4a35      	ldr	r2, [pc, #212]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6513      	str	r3, [r2, #80]	; 0x50
 8006a2c:	e003      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a46:	2300      	movs	r3, #0
 8006a48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a50:	460b      	mov	r3, r1
 8006a52:	4313      	orrs	r3, r2
 8006a54:	d058      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a62:	d033      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a68:	d82c      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6e:	d02f      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a74:	d826      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a7a:	d02b      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006a7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a80:	d820      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a86:	d012      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8c:	d81a      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d022      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a96:	d115      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 f98d 	bl	8007dc0 <RCCEx_PLL2_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006aac:	e015      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab2:	3328      	adds	r3, #40	; 0x28
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fa34 	bl	8007f24 <RCCEx_PLL3_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e00a      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006aca:	e006      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006acc:	bf00      	nop
 8006ace:	e004      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ad0:	bf00      	nop
 8006ad2:	e002      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ad4:	bf00      	nop
 8006ad6:	e000      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ada:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10e      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006af2:	4a02      	ldr	r2, [pc, #8]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6593      	str	r3, [r2, #88]	; 0x58
 8006af8:	e006      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006afa:	bf00      	nop
 8006afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	d037      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b32:	d00e      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b38:	d816      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d018      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b42:	d111      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b44:	4bc4      	ldr	r3, [pc, #784]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	4ac3      	ldr	r2, [pc, #780]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b50:	e00f      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b56:	3308      	adds	r3, #8
 8006b58:	2101      	movs	r1, #1
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 f930 	bl	8007dc0 <RCCEx_PLL2_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b66:	e004      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b6e:	e000      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b7a:	4bb7      	ldr	r3, [pc, #732]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b88:	4ab3      	ldr	r2, [pc, #716]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	6513      	str	r3, [r2, #80]	; 0x50
 8006b8e:	e003      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d039      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d81c      	bhi.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006c05 	.word	0x08006c05
 8006bcc:	08006bd9 	.word	0x08006bd9
 8006bd0:	08006be7 	.word	0x08006be7
 8006bd4:	08006c05 	.word	0x08006c05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd8:	4b9f      	ldr	r3, [pc, #636]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	4a9e      	ldr	r2, [pc, #632]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006be4:	e00f      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bea:	3308      	adds	r3, #8
 8006bec:	2102      	movs	r1, #2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 f8e6 	bl	8007dc0 <RCCEx_PLL2_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006bfa:	e004      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c02:	e000      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c0e:	4b92      	ldr	r3, [pc, #584]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c12:	f023 0103 	bic.w	r1, r3, #3
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1c:	4a8e      	ldr	r2, [pc, #568]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c22:	e003      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f000 8099 	beq.w	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c4e:	4b83      	ldr	r3, [pc, #524]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a82      	ldr	r2, [pc, #520]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c5a:	f7fa f895 	bl	8000d88 <HAL_GetTick>
 8006c5e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c62:	e00b      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c64:	f7fa f890 	bl	8000d88 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b64      	cmp	r3, #100	; 0x64
 8006c72:	d903      	bls.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c7a:	e005      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c7c:	4b77      	ldr	r3, [pc, #476]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0ed      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006c88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d173      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c90:	4b71      	ldr	r3, [pc, #452]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c9c:	4053      	eors	r3, r2
 8006c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d015      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ca6:	4b6c      	ldr	r3, [pc, #432]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cb2:	4b69      	ldr	r3, [pc, #420]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb6:	4a68      	ldr	r2, [pc, #416]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cbc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cbe:	4b66      	ldr	r3, [pc, #408]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	4a65      	ldr	r2, [pc, #404]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006cca:	4a63      	ldr	r2, [pc, #396]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cde:	d118      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fa f852 	bl	8000d88 <HAL_GetTick>
 8006ce4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ce8:	e00d      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fa f84d 	bl	8000d88 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cf4:	1ad2      	subs	r2, r2, r3
 8006cf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d903      	bls.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006d04:	e005      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d06:	4b54      	ldr	r3, [pc, #336]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0eb      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006d12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d129      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d2a:	d10e      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006d2c:	4b4a      	ldr	r3, [pc, #296]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3c:	091a      	lsrs	r2, r3, #4
 8006d3e:	4b48      	ldr	r3, [pc, #288]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	4a45      	ldr	r2, [pc, #276]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6113      	str	r3, [r2, #16]
 8006d48:	e005      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006d4a:	4b43      	ldr	r3, [pc, #268]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	4a42      	ldr	r2, [pc, #264]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d54:	6113      	str	r3, [r2, #16]
 8006d56:	4b40      	ldr	r3, [pc, #256]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d66:	4a3c      	ldr	r2, [pc, #240]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6c:	e008      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f002 0301 	and.w	r3, r2, #1
 8006d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d90:	2300      	movs	r3, #0
 8006d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f000 808f 	beq.w	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006da8:	2b28      	cmp	r3, #40	; 0x28
 8006daa:	d871      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006e99 	.word	0x08006e99
 8006db8:	08006e91 	.word	0x08006e91
 8006dbc:	08006e91 	.word	0x08006e91
 8006dc0:	08006e91 	.word	0x08006e91
 8006dc4:	08006e91 	.word	0x08006e91
 8006dc8:	08006e91 	.word	0x08006e91
 8006dcc:	08006e91 	.word	0x08006e91
 8006dd0:	08006e91 	.word	0x08006e91
 8006dd4:	08006e65 	.word	0x08006e65
 8006dd8:	08006e91 	.word	0x08006e91
 8006ddc:	08006e91 	.word	0x08006e91
 8006de0:	08006e91 	.word	0x08006e91
 8006de4:	08006e91 	.word	0x08006e91
 8006de8:	08006e91 	.word	0x08006e91
 8006dec:	08006e91 	.word	0x08006e91
 8006df0:	08006e91 	.word	0x08006e91
 8006df4:	08006e7b 	.word	0x08006e7b
 8006df8:	08006e91 	.word	0x08006e91
 8006dfc:	08006e91 	.word	0x08006e91
 8006e00:	08006e91 	.word	0x08006e91
 8006e04:	08006e91 	.word	0x08006e91
 8006e08:	08006e91 	.word	0x08006e91
 8006e0c:	08006e91 	.word	0x08006e91
 8006e10:	08006e91 	.word	0x08006e91
 8006e14:	08006e99 	.word	0x08006e99
 8006e18:	08006e91 	.word	0x08006e91
 8006e1c:	08006e91 	.word	0x08006e91
 8006e20:	08006e91 	.word	0x08006e91
 8006e24:	08006e91 	.word	0x08006e91
 8006e28:	08006e91 	.word	0x08006e91
 8006e2c:	08006e91 	.word	0x08006e91
 8006e30:	08006e91 	.word	0x08006e91
 8006e34:	08006e99 	.word	0x08006e99
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006e91 	.word	0x08006e91
 8006e44:	08006e91 	.word	0x08006e91
 8006e48:	08006e91 	.word	0x08006e91
 8006e4c:	08006e91 	.word	0x08006e91
 8006e50:	08006e91 	.word	0x08006e91
 8006e54:	08006e99 	.word	0x08006e99
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	58024800 	.word	0x58024800
 8006e60:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	3308      	adds	r3, #8
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 ffa7 	bl	8007dc0 <RCCEx_PLL2_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e78:	e00f      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	3328      	adds	r3, #40	; 0x28
 8006e80:	2101      	movs	r1, #1
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 f84e 	bl	8007f24 <RCCEx_PLL3_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e8e:	e004      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e96:	e000      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ea2:	4bbf      	ldr	r3, [pc, #764]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb0:	4abb      	ldr	r2, [pc, #748]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	6553      	str	r3, [r2, #84]	; 0x54
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ebc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f002 0302 	and.w	r3, r2, #2
 8006ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ed6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d041      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d824      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f3d 	.word	0x08006f3d
 8006ef4:	08006f09 	.word	0x08006f09
 8006ef8:	08006f1f 	.word	0x08006f1f
 8006efc:	08006f3d 	.word	0x08006f3d
 8006f00:	08006f3d 	.word	0x08006f3d
 8006f04:	08006f3d 	.word	0x08006f3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 ff55 	bl	8007dc0 <RCCEx_PLL2_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f1c:	e00f      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f22:	3328      	adds	r3, #40	; 0x28
 8006f24:	2101      	movs	r1, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fffc 	bl	8007f24 <RCCEx_PLL3_Config>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f32:	e004      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f3a:	e000      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f46:	4b96      	ldr	r3, [pc, #600]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4a:	f023 0107 	bic.w	r1, r3, #7
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f54:	4a92      	ldr	r2, [pc, #584]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f56:	430b      	orrs	r3, r1
 8006f58:	6553      	str	r3, [r2, #84]	; 0x54
 8006f5a:	e003      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f002 0304 	and.w	r3, r2, #4
 8006f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f74:	2300      	movs	r3, #0
 8006f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f7a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4313      	orrs	r3, r2
 8006f82:	d044      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8c:	2b05      	cmp	r3, #5
 8006f8e:	d825      	bhi.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006fe5 	.word	0x08006fe5
 8006f9c:	08006fb1 	.word	0x08006fb1
 8006fa0:	08006fc7 	.word	0x08006fc7
 8006fa4:	08006fe5 	.word	0x08006fe5
 8006fa8:	08006fe5 	.word	0x08006fe5
 8006fac:	08006fe5 	.word	0x08006fe5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 ff01 	bl	8007dc0 <RCCEx_PLL2_Config>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fc4:	e00f      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fca:	3328      	adds	r3, #40	; 0x28
 8006fcc:	2101      	movs	r1, #1
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 ffa8 	bl	8007f24 <RCCEx_PLL3_Config>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fda:	e004      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10b      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fee:	4b6c      	ldr	r3, [pc, #432]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff2:	f023 0107 	bic.w	r1, r3, #7
 8006ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	4a68      	ldr	r2, [pc, #416]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007000:	430b      	orrs	r3, r1
 8007002:	6593      	str	r3, [r2, #88]	; 0x58
 8007004:	e003      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007006:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800700a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f002 0320 	and.w	r3, r2, #32
 800701a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800701e:	2300      	movs	r3, #0
 8007020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007024:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007028:	460b      	mov	r3, r1
 800702a:	4313      	orrs	r3, r2
 800702c:	d055      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800703a:	d033      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800703c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007040:	d82c      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d02f      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704c:	d826      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800704e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007052:	d02b      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007054:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007058:	d820      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d012      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007064:	d81a      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d022      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800706a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800706e:	d115      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	3308      	adds	r3, #8
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fea1 	bl	8007dc0 <RCCEx_PLL2_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007084:	e015      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	3328      	adds	r3, #40	; 0x28
 800708c:	2102      	movs	r1, #2
 800708e:	4618      	mov	r0, r3
 8007090:	f000 ff48 	bl	8007f24 <RCCEx_PLL3_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800709a:	e00a      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070a2:	e006      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070a4:	bf00      	nop
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070a8:	bf00      	nop
 80070aa:	e002      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070ba:	4b39      	ldr	r3, [pc, #228]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80070c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	4a35      	ldr	r2, [pc, #212]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6553      	str	r3, [r2, #84]	; 0x54
 80070d0:	e003      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80070e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070f0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80070f4:	460b      	mov	r3, r1
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d058      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007102:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007106:	d033      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007108:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800710c:	d82c      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800710e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007112:	d02f      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007118:	d826      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800711a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800711e:	d02b      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007124:	d820      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712a:	d012      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800712c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007130:	d81a      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d022      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713a:	d115      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007140:	3308      	adds	r3, #8
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fe3b 	bl	8007dc0 <RCCEx_PLL2_Config>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007150:	e015      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	3328      	adds	r3, #40	; 0x28
 8007158:	2102      	movs	r1, #2
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fee2 	bl	8007f24 <RCCEx_PLL3_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007166:	e00a      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800716e:	e006      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007170:	bf00      	nop
 8007172:	e004      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800717c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10e      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007196:	4a02      	ldr	r2, [pc, #8]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007198:	430b      	orrs	r3, r1
 800719a:	6593      	str	r3, [r2, #88]	; 0x58
 800719c:	e006      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800719e:	bf00      	nop
 80071a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80071b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	d055      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80071d8:	d033      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80071da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80071de:	d82c      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80071e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e4:	d02f      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80071e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ea:	d826      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80071ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80071f0:	d02b      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80071f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80071f6:	d820      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80071f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071fc:	d012      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80071fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007202:	d81a      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d022      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720c:	d115      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007212:	3308      	adds	r3, #8
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fdd2 	bl	8007dc0 <RCCEx_PLL2_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007222:	e015      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007228:	3328      	adds	r3, #40	; 0x28
 800722a:	2102      	movs	r1, #2
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fe79 	bl	8007f24 <RCCEx_PLL3_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007238:	e00a      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007240:	e006      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007242:	bf00      	nop
 8007244:	e004      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007246:	bf00      	nop
 8007248:	e002      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800724e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007250:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10b      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007258:	4ba0      	ldr	r3, [pc, #640]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007264:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007268:	4a9c      	ldr	r2, [pc, #624]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800726a:	430b      	orrs	r3, r1
 800726c:	6593      	str	r3, [r2, #88]	; 0x58
 800726e:	e003      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f002 0308 	and.w	r3, r2, #8
 8007284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007288:	2300      	movs	r3, #0
 800728a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800728e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007292:	460b      	mov	r3, r1
 8007294:	4313      	orrs	r3, r2
 8007296:	d01e      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a4:	d10c      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072aa:	3328      	adds	r3, #40	; 0x28
 80072ac:	2102      	movs	r1, #2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fe38 	bl	8007f24 <RCCEx_PLL3_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80072c0:	4b86      	ldr	r3, [pc, #536]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d0:	4a82      	ldr	r2, [pc, #520]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072d2:	430b      	orrs	r3, r1
 80072d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f002 0310 	and.w	r3, r2, #16
 80072e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072e6:	2300      	movs	r3, #0
 80072e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072ec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80072f0:	460b      	mov	r3, r1
 80072f2:	4313      	orrs	r3, r2
 80072f4:	d01e      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007302:	d10c      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007308:	3328      	adds	r3, #40	; 0x28
 800730a:	2102      	movs	r1, #2
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fe09 	bl	8007f24 <RCCEx_PLL3_Config>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800731e:	4b6f      	ldr	r3, [pc, #444]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800732e:	4a6b      	ldr	r2, [pc, #428]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007330:	430b      	orrs	r3, r1
 8007332:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007340:	67bb      	str	r3, [r7, #120]	; 0x78
 8007342:	2300      	movs	r3, #0
 8007344:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007346:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800734a:	460b      	mov	r3, r1
 800734c:	4313      	orrs	r3, r2
 800734e:	d03e      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800735c:	d022      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800735e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007362:	d81b      	bhi.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736c:	d00b      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800736e:	e015      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007374:	3308      	adds	r3, #8
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fd21 	bl	8007dc0 <RCCEx_PLL2_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007384:	e00f      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738a:	3328      	adds	r3, #40	; 0x28
 800738c:	2102      	movs	r1, #2
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fdc8 	bl	8007f24 <RCCEx_PLL3_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800739a:	e004      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073a2:	e000      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80073a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073ae:	4b4b      	ldr	r3, [pc, #300]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073be:	4a47      	ldr	r2, [pc, #284]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073c0:	430b      	orrs	r3, r1
 80073c2:	6593      	str	r3, [r2, #88]	; 0x58
 80073c4:	e003      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80073da:	673b      	str	r3, [r7, #112]	; 0x70
 80073dc:	2300      	movs	r3, #0
 80073de:	677b      	str	r3, [r7, #116]	; 0x74
 80073e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80073e4:	460b      	mov	r3, r1
 80073e6:	4313      	orrs	r3, r2
 80073e8:	d03b      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073f6:	d01f      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80073f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073fc:	d818      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80073fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007402:	d003      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007408:	d007      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800740a:	e011      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4b33      	ldr	r3, [pc, #204]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4a32      	ldr	r2, [pc, #200]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007418:	e00f      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741e:	3328      	adds	r3, #40	; 0x28
 8007420:	2101      	movs	r1, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fd7e 	bl	8007f24 <RCCEx_PLL3_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800742e:	e004      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007436:	e000      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007442:	4b26      	ldr	r3, [pc, #152]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007452:	4a22      	ldr	r2, [pc, #136]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007454:	430b      	orrs	r3, r1
 8007456:	6553      	str	r3, [r2, #84]	; 0x54
 8007458:	e003      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800745e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800746e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007470:	2300      	movs	r3, #0
 8007472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007474:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007478:	460b      	mov	r3, r1
 800747a:	4313      	orrs	r3, r2
 800747c:	d034      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748c:	d007      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800748e:	e011      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007490:	4b12      	ldr	r3, [pc, #72]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	4a11      	ldr	r2, [pc, #68]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800749c:	e00e      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a2:	3308      	adds	r3, #8
 80074a4:	2102      	movs	r1, #2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fc8a 	bl	8007dc0 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074b2:	e003      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80074ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10d      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d2:	4a02      	ldr	r2, [pc, #8]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074d4:	430b      	orrs	r3, r1
 80074d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074d8:	e006      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80074f4:	663b      	str	r3, [r7, #96]	; 0x60
 80074f6:	2300      	movs	r3, #0
 80074f8:	667b      	str	r3, [r7, #100]	; 0x64
 80074fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80074fe:	460b      	mov	r3, r1
 8007500:	4313      	orrs	r3, r2
 8007502:	d00c      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	3328      	adds	r3, #40	; 0x28
 800750a:	2102      	movs	r1, #2
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fd09 	bl	8007f24 <RCCEx_PLL3_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800752a:	65bb      	str	r3, [r7, #88]	; 0x58
 800752c:	2300      	movs	r3, #0
 800752e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007530:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007534:	460b      	mov	r3, r1
 8007536:	4313      	orrs	r3, r2
 8007538:	d036      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007544:	d018      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800754a:	d811      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d014      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007556:	d80b      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d011      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800755c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007560:	d106      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007562:	4bb7      	ldr	r3, [pc, #732]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	4ab6      	ldr	r2, [pc, #728]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800756c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800756e:	e008      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007576:	e004      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007578:	bf00      	nop
 800757a:	e002      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800757c:	bf00      	nop
 800757e:	e000      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007582:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800758a:	4bad      	ldr	r3, [pc, #692]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800758c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007598:	4aa9      	ldr	r2, [pc, #676]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800759a:	430b      	orrs	r3, r1
 800759c:	6553      	str	r3, [r2, #84]	; 0x54
 800759e:	e003      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80075b4:	653b      	str	r3, [r7, #80]	; 0x50
 80075b6:	2300      	movs	r3, #0
 80075b8:	657b      	str	r3, [r7, #84]	; 0x54
 80075ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80075be:	460b      	mov	r3, r1
 80075c0:	4313      	orrs	r3, r2
 80075c2:	d009      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075c4:	4b9e      	ldr	r3, [pc, #632]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	4a9b      	ldr	r2, [pc, #620]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075d4:	430b      	orrs	r3, r1
 80075d6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80075e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075e6:	2300      	movs	r3, #0
 80075e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80075ee:	460b      	mov	r3, r1
 80075f0:	4313      	orrs	r3, r2
 80075f2:	d009      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075f4:	4b92      	ldr	r3, [pc, #584]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007602:	4a8f      	ldr	r2, [pc, #572]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007604:	430b      	orrs	r3, r1
 8007606:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007614:	643b      	str	r3, [r7, #64]	; 0x40
 8007616:	2300      	movs	r3, #0
 8007618:	647b      	str	r3, [r7, #68]	; 0x44
 800761a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800761e:	460b      	mov	r3, r1
 8007620:	4313      	orrs	r3, r2
 8007622:	d00e      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007624:	4b86      	ldr	r3, [pc, #536]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	4a85      	ldr	r2, [pc, #532]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800762a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800762e:	6113      	str	r3, [r2, #16]
 8007630:	4b83      	ldr	r3, [pc, #524]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007632:	6919      	ldr	r1, [r3, #16]
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800763c:	4a80      	ldr	r2, [pc, #512]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800763e:	430b      	orrs	r3, r1
 8007640:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800764e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007650:	2300      	movs	r3, #0
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007654:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007658:	460b      	mov	r3, r1
 800765a:	4313      	orrs	r3, r2
 800765c:	d009      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800765e:	4b78      	ldr	r3, [pc, #480]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007662:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766c:	4a74      	ldr	r2, [pc, #464]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800766e:	430b      	orrs	r3, r1
 8007670:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
 8007680:	2300      	movs	r3, #0
 8007682:	637b      	str	r3, [r7, #52]	; 0x34
 8007684:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007688:	460b      	mov	r3, r1
 800768a:	4313      	orrs	r3, r2
 800768c:	d00a      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800768e:	4b6c      	ldr	r3, [pc, #432]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007692:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769e:	4a68      	ldr	r2, [pc, #416]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80076a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	2100      	movs	r1, #0
 80076ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d011      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c4:	3308      	adds	r3, #8
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fb79 	bl	8007dc0 <RCCEx_PLL2_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80076d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	2100      	movs	r1, #0
 80076ee:	6239      	str	r1, [r7, #32]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
 80076f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80076fa:	460b      	mov	r3, r1
 80076fc:	4313      	orrs	r3, r2
 80076fe:	d011      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007704:	3308      	adds	r3, #8
 8007706:	2101      	movs	r1, #1
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fb59 	bl	8007dc0 <RCCEx_PLL2_Config>
 800770e:	4603      	mov	r3, r0
 8007710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007714:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007720:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	2100      	movs	r1, #0
 800772e:	61b9      	str	r1, [r7, #24]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800773a:	460b      	mov	r3, r1
 800773c:	4313      	orrs	r3, r2
 800773e:	d011      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	3308      	adds	r3, #8
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fb39 	bl	8007dc0 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007754:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007760:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	2100      	movs	r1, #0
 800776e:	6139      	str	r1, [r7, #16]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800777a:	460b      	mov	r3, r1
 800777c:	4313      	orrs	r3, r2
 800777e:	d011      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	3328      	adds	r3, #40	; 0x28
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fbcb 	bl	8007f24 <RCCEx_PLL3_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007794:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	2100      	movs	r1, #0
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077ba:	460b      	mov	r3, r1
 80077bc:	4313      	orrs	r3, r2
 80077be:	d011      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c4:	3328      	adds	r3, #40	; 0x28
 80077c6:	2101      	movs	r1, #1
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fbab 	bl	8007f24 <RCCEx_PLL3_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80077d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	2100      	movs	r1, #0
 80077ee:	6039      	str	r1, [r7, #0]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	607b      	str	r3, [r7, #4]
 80077f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	d011      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007804:	3328      	adds	r3, #40	; 0x28
 8007806:	2102      	movs	r1, #2
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fb8b 	bl	8007f24 <RCCEx_PLL3_Config>
 800780e:	4603      	mov	r3, r0
 8007810:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007814:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007820:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007824:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	e000      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
}
 8007832:	4618      	mov	r0, r3
 8007834:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007838:	46bd      	mov	sp, r7
 800783a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800783e:	bf00      	nop
 8007840:	58024400 	.word	0x58024400

08007844 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007848:	f7fe fe00 	bl	800644c <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b06      	ldr	r3, [pc, #24]	; (8007868 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	091b      	lsrs	r3, r3, #4
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4904      	ldr	r1, [pc, #16]	; (800786c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	58024400 	.word	0x58024400
 800786c:	0800e690 	.word	0x0800e690

08007870 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007870:	b480      	push	{r7}
 8007872:	b089      	sub	sp, #36	; 0x24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007878:	4ba1      	ldr	r3, [pc, #644]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007882:	4b9f      	ldr	r3, [pc, #636]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	0b1b      	lsrs	r3, r3, #12
 8007888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800788c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800788e:	4b9c      	ldr	r3, [pc, #624]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	091b      	lsrs	r3, r3, #4
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800789a:	4b99      	ldr	r3, [pc, #612]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	08db      	lsrs	r3, r3, #3
 80078a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	fb02 f303 	mul.w	r3, r2, r3
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8111 	beq.w	8007ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	f000 8083 	beq.w	80079cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	f200 80a1 	bhi.w	8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d056      	beq.n	8007988 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80078da:	e099      	b.n	8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078dc:	4b88      	ldr	r3, [pc, #544]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d02d      	beq.n	8007944 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078e8:	4b85      	ldr	r3, [pc, #532]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	08db      	lsrs	r3, r3, #3
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	4a84      	ldr	r2, [pc, #528]	; (8007b04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80078f4:	fa22 f303 	lsr.w	r3, r2, r3
 80078f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007912:	4b7b      	ldr	r3, [pc, #492]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007922:	ed97 6a03 	vldr	s12, [r7, #12]
 8007926:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800792a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007942:	e087      	b.n	8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007956:	4b6a      	ldr	r3, [pc, #424]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007966:	ed97 6a03 	vldr	s12, [r7, #12]
 800796a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800796e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007986:	e065      	b.n	8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007992:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799a:	4b59      	ldr	r3, [pc, #356]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ca:	e043      	b.n	8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80079da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079de:	4b48      	ldr	r3, [pc, #288]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a0e:	e021      	b.n	8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a22:	4b37      	ldr	r3, [pc, #220]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a54:	4b2a      	ldr	r3, [pc, #168]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	0a5b      	lsrs	r3, r3, #9
 8007a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a7a:	ee17 2a90 	vmov	r2, s15
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007a82:	4b1f      	ldr	r3, [pc, #124]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	0c1b      	lsrs	r3, r3, #16
 8007a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a8c:	ee07 3a90 	vmov	s15, r3
 8007a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa8:	ee17 2a90 	vmov	r2, s15
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007ab0:	4b13      	ldr	r3, [pc, #76]	; (8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	0e1b      	lsrs	r3, r3, #24
 8007ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad6:	ee17 2a90 	vmov	r2, s15
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ade:	e008      	b.n	8007af2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	609a      	str	r2, [r3, #8]
}
 8007af2:	bf00      	nop
 8007af4:	3724      	adds	r7, #36	; 0x24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	58024400 	.word	0x58024400
 8007b04:	03d09000 	.word	0x03d09000
 8007b08:	46000000 	.word	0x46000000
 8007b0c:	4c742400 	.word	0x4c742400
 8007b10:	4a742400 	.word	0x4a742400
 8007b14:	4b742400 	.word	0x4b742400

08007b18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b089      	sub	sp, #36	; 0x24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b20:	4ba1      	ldr	r3, [pc, #644]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b2a:	4b9f      	ldr	r3, [pc, #636]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	0d1b      	lsrs	r3, r3, #20
 8007b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b36:	4b9c      	ldr	r3, [pc, #624]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b42:	4b99      	ldr	r3, [pc, #612]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b46:	08db      	lsrs	r3, r3, #3
 8007b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8111 	beq.w	8007d88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	f000 8083 	beq.w	8007c74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	f200 80a1 	bhi.w	8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d056      	beq.n	8007c30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b82:	e099      	b.n	8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b84:	4b88      	ldr	r3, [pc, #544]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d02d      	beq.n	8007bec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b90:	4b85      	ldr	r3, [pc, #532]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	08db      	lsrs	r3, r3, #3
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	4a84      	ldr	r2, [pc, #528]	; (8007dac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bba:	4b7b      	ldr	r3, [pc, #492]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bea:	e087      	b.n	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfe:	4b6a      	ldr	r3, [pc, #424]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c2e:	e065      	b.n	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c42:	4b59      	ldr	r3, [pc, #356]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c72:	e043      	b.n	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c86:	4b48      	ldr	r3, [pc, #288]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb6:	e021      	b.n	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cca:	4b37      	ldr	r3, [pc, #220]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cde:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007cfc:	4b2a      	ldr	r3, [pc, #168]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	0a5b      	lsrs	r3, r3, #9
 8007d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d22:	ee17 2a90 	vmov	r2, s15
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d2a:	4b1f      	ldr	r3, [pc, #124]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	0c1b      	lsrs	r3, r3, #16
 8007d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d50:	ee17 2a90 	vmov	r2, s15
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d58:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d7e:	ee17 2a90 	vmov	r2, s15
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d86:	e008      	b.n	8007d9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	609a      	str	r2, [r3, #8]
}
 8007d9a:	bf00      	nop
 8007d9c:	3724      	adds	r7, #36	; 0x24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	58024400 	.word	0x58024400
 8007dac:	03d09000 	.word	0x03d09000
 8007db0:	46000000 	.word	0x46000000
 8007db4:	4c742400 	.word	0x4c742400
 8007db8:	4a742400 	.word	0x4a742400
 8007dbc:	4b742400 	.word	0x4b742400

08007dc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007dce:	4b53      	ldr	r3, [pc, #332]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d101      	bne.n	8007dde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e099      	b.n	8007f12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007dde:	4b4f      	ldr	r3, [pc, #316]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a4e      	ldr	r2, [pc, #312]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007de4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dea:	f7f8 ffcd 	bl	8000d88 <HAL_GetTick>
 8007dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007df0:	e008      	b.n	8007e04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007df2:	f7f8 ffc9 	bl	8000d88 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e086      	b.n	8007f12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e04:	4b45      	ldr	r3, [pc, #276]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1f0      	bne.n	8007df2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e10:	4b42      	ldr	r3, [pc, #264]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	031b      	lsls	r3, r3, #12
 8007e1e:	493f      	ldr	r1, [pc, #252]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	628b      	str	r3, [r1, #40]	; 0x28
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	025b      	lsls	r3, r3, #9
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	061b      	lsls	r3, r3, #24
 8007e50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e54:	4931      	ldr	r1, [pc, #196]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e5a:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	492d      	ldr	r1, [pc, #180]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e6c:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	f023 0220 	bic.w	r2, r3, #32
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	4928      	ldr	r1, [pc, #160]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e7e:	4b27      	ldr	r3, [pc, #156]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e84:	f023 0310 	bic.w	r3, r3, #16
 8007e88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e8a:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e8e:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <RCCEx_PLL2_Config+0x160>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	69d2      	ldr	r2, [r2, #28]
 8007e96:	00d2      	lsls	r2, r2, #3
 8007e98:	4920      	ldr	r1, [pc, #128]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e9e:	4b1f      	ldr	r3, [pc, #124]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	4a1e      	ldr	r2, [pc, #120]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007ea4:	f043 0310 	orr.w	r3, r3, #16
 8007ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	4a19      	ldr	r2, [pc, #100]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007eb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ebc:	e00f      	b.n	8007ede <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d106      	bne.n	8007ed2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ec4:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	4a14      	ldr	r2, [pc, #80]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ed0:	e005      	b.n	8007ede <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007edc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a0e      	ldr	r2, [pc, #56]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007ee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eea:	f7f8 ff4d 	bl	8000d88 <HAL_GetTick>
 8007eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ef0:	e008      	b.n	8007f04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ef2:	f7f8 ff49 	bl	8000d88 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e006      	b.n	8007f12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <RCCEx_PLL2_Config+0x15c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0f0      	beq.n	8007ef2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	ffff0007 	.word	0xffff0007

08007f24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f32:	4b53      	ldr	r3, [pc, #332]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d101      	bne.n	8007f42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e099      	b.n	8008076 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f42:	4b4f      	ldr	r3, [pc, #316]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a4e      	ldr	r2, [pc, #312]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f4e:	f7f8 ff1b 	bl	8000d88 <HAL_GetTick>
 8007f52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f54:	e008      	b.n	8007f68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f56:	f7f8 ff17 	bl	8000d88 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e086      	b.n	8008076 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f68:	4b45      	ldr	r3, [pc, #276]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f0      	bne.n	8007f56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f74:	4b42      	ldr	r3, [pc, #264]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	051b      	lsls	r3, r3, #20
 8007f82:	493f      	ldr	r1, [pc, #252]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	628b      	str	r3, [r1, #40]	; 0x28
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	025b      	lsls	r3, r3, #9
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	061b      	lsls	r3, r3, #24
 8007fb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fb8:	4931      	ldr	r1, [pc, #196]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007fbe:	4b30      	ldr	r3, [pc, #192]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	492d      	ldr	r1, [pc, #180]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007fd0:	4b2b      	ldr	r3, [pc, #172]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	4928      	ldr	r1, [pc, #160]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fe2:	4b27      	ldr	r3, [pc, #156]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a26      	ldr	r2, [pc, #152]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fee:	4b24      	ldr	r3, [pc, #144]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <RCCEx_PLL3_Config+0x160>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	69d2      	ldr	r2, [r2, #28]
 8007ffa:	00d2      	lsls	r2, r2, #3
 8007ffc:	4920      	ldr	r1, [pc, #128]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008002:	4b1f      	ldr	r3, [pc, #124]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8008008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800800c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008014:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a19      	ldr	r2, [pc, #100]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 800801a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800801e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008020:	e00f      	b.n	8008042 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d106      	bne.n	8008036 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	4a14      	ldr	r2, [pc, #80]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 800802e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008034:	e005      	b.n	8008042 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008036:	4b12      	ldr	r3, [pc, #72]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	4a11      	ldr	r2, [pc, #68]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 800803c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a0e      	ldr	r2, [pc, #56]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 8008048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800804c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800804e:	f7f8 fe9b 	bl	8000d88 <HAL_GetTick>
 8008052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008054:	e008      	b.n	8008068 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008056:	f7f8 fe97 	bl	8000d88 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e006      	b.n	8008076 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <RCCEx_PLL3_Config+0x15c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0f0      	beq.n	8008056 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008074:	7bfb      	ldrb	r3, [r7, #15]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
 8008084:	ffff0007 	.word	0xffff0007

08008088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e042      	b.n	8008120 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d106      	bne.n	80080b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7f8 fc57 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2224      	movs	r2, #36	; 0x24
 80080b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0201 	bic.w	r2, r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fce6 	bl	8008a9c <UART_SetConfig>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e022      	b.n	8008120 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 fb46 	bl	8009774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 fbcd 	bl	80098b8 <UART_CheckIdleState>
 800811e:	4603      	mov	r3, r0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008128:	b480      	push	{r7}
 800812a:	b091      	sub	sp, #68	; 0x44
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813c:	2b20      	cmp	r3, #32
 800813e:	d178      	bne.n	8008232 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <HAL_UART_Transmit_IT+0x24>
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e071      	b.n	8008234 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	88fa      	ldrh	r2, [r7, #6]
 8008162:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2221      	movs	r2, #33	; 0x21
 8008178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008184:	d12a      	bne.n	80081dc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818e:	d107      	bne.n	80081a0 <HAL_UART_Transmit_IT+0x78>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d103      	bne.n	80081a0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a29      	ldr	r2, [pc, #164]	; (8008240 <HAL_UART_Transmit_IT+0x118>)
 800819c:	679a      	str	r2, [r3, #120]	; 0x78
 800819e:	e002      	b.n	80081a6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a28      	ldr	r2, [pc, #160]	; (8008244 <HAL_UART_Transmit_IT+0x11c>)
 80081a4:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081c6:	637a      	str	r2, [r7, #52]	; 0x34
 80081c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <HAL_UART_Transmit_IT+0x7e>
 80081da:	e028      	b.n	800822e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e4:	d107      	bne.n	80081f6 <HAL_UART_Transmit_IT+0xce>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d103      	bne.n	80081f6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <HAL_UART_Transmit_IT+0x120>)
 80081f2:	679a      	str	r2, [r3, #120]	; 0x78
 80081f4:	e002      	b.n	80081fc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a14      	ldr	r2, [pc, #80]	; (800824c <HAL_UART_Transmit_IT+0x124>)
 80081fa:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	613b      	str	r3, [r7, #16]
   return(result);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821a:	623b      	str	r3, [r7, #32]
 800821c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	69f9      	ldr	r1, [r7, #28]
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	61bb      	str	r3, [r7, #24]
   return(result);
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e6      	bne.n	80081fc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e000      	b.n	8008234 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008232:	2302      	movs	r3, #2
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3744      	adds	r7, #68	; 0x44
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	0800a1e5 	.word	0x0800a1e5
 8008244:	0800a105 	.word	0x0800a105
 8008248:	0800a043 	.word	0x0800a043
 800824c:	08009f8b 	.word	0x08009f8b

08008250 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	; 0x28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008264:	2b20      	cmp	r3, #32
 8008266:	d137      	bne.n	80082d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_UART_Receive_DMA+0x24>
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e030      	b.n	80082da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a18      	ldr	r2, [pc, #96]	; (80082e4 <HAL_UART_Receive_DMA+0x94>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d01f      	beq.n	80082c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d018      	beq.n	80082c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	613b      	str	r3, [r7, #16]
   return(result);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	623b      	str	r3, [r7, #32]
 80082b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	69f9      	ldr	r1, [r7, #28]
 80082ba:	6a3a      	ldr	r2, [r7, #32]
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	461a      	mov	r2, r3
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f001 fc04 	bl	8009adc <UART_Start_Receive_DMA>
 80082d4:	4603      	mov	r3, r0
 80082d6:	e000      	b.n	80082da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082d8:	2302      	movs	r3, #2
  }
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3728      	adds	r7, #40	; 0x28
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	58000c00 	.word	0x58000c00

080082e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b0ba      	sub	sp, #232	; 0xe8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800830e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008312:	f640 030f 	movw	r3, #2063	; 0x80f
 8008316:	4013      	ands	r3, r2
 8008318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800831c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11b      	bne.n	800835c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d015      	beq.n	800835c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800833c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d009      	beq.n	800835c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8377 	beq.w	8008a40 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
      }
      return;
 800835a:	e371      	b.n	8008a40 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800835c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 8123 	beq.w	80085ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008366:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800836a:	4b8d      	ldr	r3, [pc, #564]	; (80085a0 <HAL_UART_IRQHandler+0x2b8>)
 800836c:	4013      	ands	r3, r2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008372:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008376:	4b8b      	ldr	r3, [pc, #556]	; (80085a4 <HAL_UART_IRQHandler+0x2bc>)
 8008378:	4013      	ands	r3, r2
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 8116 	beq.w	80085ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d011      	beq.n	80083b0 <HAL_UART_IRQHandler+0xc8>
 800838c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2201      	movs	r2, #1
 800839e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a6:	f043 0201 	orr.w	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_UART_IRQHandler+0xf8>
 80083bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2202      	movs	r2, #2
 80083ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d6:	f043 0204 	orr.w	r2, r3, #4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d011      	beq.n	8008410 <HAL_UART_IRQHandler+0x128>
 80083ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2204      	movs	r2, #4
 80083fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008406:	f043 0202 	orr.w	r2, r3, #2
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008414:	f003 0308 	and.w	r3, r3, #8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d017      	beq.n	800844c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800841c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d105      	bne.n	8008434 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008428:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800842c:	4b5c      	ldr	r3, [pc, #368]	; (80085a0 <HAL_UART_IRQHandler+0x2b8>)
 800842e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2208      	movs	r2, #8
 800843a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008442:	f043 0208 	orr.w	r2, r3, #8
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800844c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008454:	2b00      	cmp	r3, #0
 8008456:	d012      	beq.n	800847e <HAL_UART_IRQHandler+0x196>
 8008458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00c      	beq.n	800847e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800846c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008474:	f043 0220 	orr.w	r2, r3, #32
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 82dd 	beq.w	8008a44 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800848a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d013      	beq.n	80084be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d105      	bne.n	80084ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d007      	beq.n	80084be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d005      	beq.n	80084e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d054      	beq.n	800858c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 fbe2 	bl	8009cac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d146      	bne.n	8008584 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3308      	adds	r3, #8
 80084fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800850c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3308      	adds	r3, #8
 800851e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800852e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800853a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1d9      	bne.n	80084f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008548:	2b00      	cmp	r3, #0
 800854a:	d017      	beq.n	800857c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008552:	4a15      	ldr	r2, [pc, #84]	; (80085a8 <HAL_UART_IRQHandler+0x2c0>)
 8008554:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800855c:	4618      	mov	r0, r3
 800855e:	f7f9 fe35 	bl	80021cc <HAL_DMA_Abort_IT>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d019      	beq.n	800859c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008576:	4610      	mov	r0, r2
 8008578:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857a:	e00f      	b.n	800859c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fa77 	bl	8008a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008582:	e00b      	b.n	800859c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fa73 	bl	8008a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858a:	e007      	b.n	800859c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fa6f 	bl	8008a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800859a:	e253      	b.n	8008a44 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	bf00      	nop
    return;
 800859e:	e251      	b.n	8008a44 <HAL_UART_IRQHandler+0x75c>
 80085a0:	10000001 	.word	0x10000001
 80085a4:	04000120 	.word	0x04000120
 80085a8:	08009f5f 	.word	0x08009f5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	f040 81e7 	bne.w	8008984 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ba:	f003 0310 	and.w	r3, r3, #16
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 81e0 	beq.w	8008984 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 81d9 	beq.w	8008984 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2210      	movs	r2, #16
 80085d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b40      	cmp	r3, #64	; 0x40
 80085e6:	f040 8151 	bne.w	800888c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a96      	ldr	r2, [pc, #600]	; (800884c <HAL_UART_IRQHandler+0x564>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d068      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a93      	ldr	r2, [pc, #588]	; (8008850 <HAL_UART_IRQHandler+0x568>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d061      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a91      	ldr	r2, [pc, #580]	; (8008854 <HAL_UART_IRQHandler+0x56c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d05a      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a8e      	ldr	r2, [pc, #568]	; (8008858 <HAL_UART_IRQHandler+0x570>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d053      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a8c      	ldr	r2, [pc, #560]	; (800885c <HAL_UART_IRQHandler+0x574>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d04c      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a89      	ldr	r2, [pc, #548]	; (8008860 <HAL_UART_IRQHandler+0x578>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d045      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a87      	ldr	r2, [pc, #540]	; (8008864 <HAL_UART_IRQHandler+0x57c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d03e      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a84      	ldr	r2, [pc, #528]	; (8008868 <HAL_UART_IRQHandler+0x580>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d037      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a82      	ldr	r2, [pc, #520]	; (800886c <HAL_UART_IRQHandler+0x584>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d030      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a7f      	ldr	r2, [pc, #508]	; (8008870 <HAL_UART_IRQHandler+0x588>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d029      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a7d      	ldr	r2, [pc, #500]	; (8008874 <HAL_UART_IRQHandler+0x58c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d022      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a7a      	ldr	r2, [pc, #488]	; (8008878 <HAL_UART_IRQHandler+0x590>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01b      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a78      	ldr	r2, [pc, #480]	; (800887c <HAL_UART_IRQHandler+0x594>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d014      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a75      	ldr	r2, [pc, #468]	; (8008880 <HAL_UART_IRQHandler+0x598>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00d      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a73      	ldr	r2, [pc, #460]	; (8008884 <HAL_UART_IRQHandler+0x59c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d006      	beq.n	80086ca <HAL_UART_IRQHandler+0x3e2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a70      	ldr	r2, [pc, #448]	; (8008888 <HAL_UART_IRQHandler+0x5a0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d106      	bne.n	80086d8 <HAL_UART_IRQHandler+0x3f0>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	e005      	b.n	80086e4 <HAL_UART_IRQHandler+0x3fc>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 81ab 	beq.w	8008a48 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086fc:	429a      	cmp	r2, r3
 80086fe:	f080 81a3 	bcs.w	8008a48 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008718:	f000 8087 	beq.w	800882a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800874a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008752:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800875e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1da      	bne.n	800871c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800878a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800878e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008792:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800879c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e1      	bne.n	8008766 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e3      	bne.n	80087a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f8:	f023 0310 	bic.w	r3, r3, #16
 80087fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	461a      	mov	r2, r3
 8008806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800880a:	65bb      	str	r3, [r7, #88]	; 0x58
 800880c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e4      	bne.n	80087e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008824:	4618      	mov	r0, r3
 8008826:	f7f9 f9b3 	bl	8001b90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800883c:	b29b      	uxth	r3, r3
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	b29b      	uxth	r3, r3
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f91d 	bl	8008a84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800884a:	e0fd      	b.n	8008a48 <HAL_UART_IRQHandler+0x760>
 800884c:	40020010 	.word	0x40020010
 8008850:	40020028 	.word	0x40020028
 8008854:	40020040 	.word	0x40020040
 8008858:	40020058 	.word	0x40020058
 800885c:	40020070 	.word	0x40020070
 8008860:	40020088 	.word	0x40020088
 8008864:	400200a0 	.word	0x400200a0
 8008868:	400200b8 	.word	0x400200b8
 800886c:	40020410 	.word	0x40020410
 8008870:	40020428 	.word	0x40020428
 8008874:	40020440 	.word	0x40020440
 8008878:	40020458 	.word	0x40020458
 800887c:	40020470 	.word	0x40020470
 8008880:	40020488 	.word	0x40020488
 8008884:	400204a0 	.word	0x400204a0
 8008888:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008898:	b29b      	uxth	r3, r3
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80cf 	beq.w	8008a4c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80088ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 80ca 	beq.w	8008a4c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088da:	647b      	str	r3, [r7, #68]	; 0x44
 80088dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e4      	bne.n	80088b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3308      	adds	r3, #8
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	623b      	str	r3, [r7, #32]
   return(result);
 80088fe:	6a3a      	ldr	r2, [r7, #32]
 8008900:	4b55      	ldr	r3, [pc, #340]	; (8008a58 <HAL_UART_IRQHandler+0x770>)
 8008902:	4013      	ands	r3, r2
 8008904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008912:	633a      	str	r2, [r7, #48]	; 0x30
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e3      	bne.n	80088ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	60fb      	str	r3, [r7, #12]
   return(result);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0310 	bic.w	r3, r3, #16
 800894e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800895c:	61fb      	str	r3, [r7, #28]
 800895e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	69b9      	ldr	r1, [r7, #24]
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	617b      	str	r3, [r7, #20]
   return(result);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e4      	bne.n	800893a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f881 	bl	8008a84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008982:	e063      	b.n	8008a4c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00e      	beq.n	80089ae <HAL_UART_IRQHandler+0x6c6>
 8008990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fcbc 	bl	800a324 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ac:	e051      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d014      	beq.n	80089e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d105      	bne.n	80089d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d03a      	beq.n	8008a50 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
    }
    return;
 80089e2:	e035      	b.n	8008a50 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d009      	beq.n	8008a04 <HAL_UART_IRQHandler+0x71c>
 80089f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 fc66 	bl	800a2ce <UART_EndTransmit_IT>
    return;
 8008a02:	e026      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d009      	beq.n	8008a24 <HAL_UART_IRQHandler+0x73c>
 8008a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f001 fc95 	bl	800a34c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a22:	e016      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d010      	beq.n	8008a52 <HAL_UART_IRQHandler+0x76a>
 8008a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da0c      	bge.n	8008a52 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 fc7d 	bl	800a338 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a3e:	e008      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
      return;
 8008a40:	bf00      	nop
 8008a42:	e006      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
    return;
 8008a44:	bf00      	nop
 8008a46:	e004      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
      return;
 8008a48:	bf00      	nop
 8008a4a:	e002      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
      return;
 8008a4c:	bf00      	nop
 8008a4e:	e000      	b.n	8008a52 <HAL_UART_IRQHandler+0x76a>
    return;
 8008a50:	bf00      	nop
  }
}
 8008a52:	37e8      	adds	r7, #232	; 0xe8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	effffffe 	.word	0xeffffffe

08008a5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa0:	b092      	sub	sp, #72	; 0x48
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4bbe      	ldr	r3, [pc, #760]	; (8008dc4 <UART_SetConfig+0x328>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4ab3      	ldr	r2, [pc, #716]	; (8008dc8 <UART_SetConfig+0x32c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b04:	4313      	orrs	r3, r2
 8008b06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	4baf      	ldr	r3, [pc, #700]	; (8008dcc <UART_SetConfig+0x330>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	f023 010f 	bic.w	r1, r3, #15
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4aa6      	ldr	r2, [pc, #664]	; (8008dd0 <UART_SetConfig+0x334>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d177      	bne.n	8008c2c <UART_SetConfig+0x190>
 8008b3c:	4ba5      	ldr	r3, [pc, #660]	; (8008dd4 <UART_SetConfig+0x338>)
 8008b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b44:	2b28      	cmp	r3, #40	; 0x28
 8008b46:	d86d      	bhi.n	8008c24 <UART_SetConfig+0x188>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0xb4>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008bf5 	.word	0x08008bf5
 8008b54:	08008c25 	.word	0x08008c25
 8008b58:	08008c25 	.word	0x08008c25
 8008b5c:	08008c25 	.word	0x08008c25
 8008b60:	08008c25 	.word	0x08008c25
 8008b64:	08008c25 	.word	0x08008c25
 8008b68:	08008c25 	.word	0x08008c25
 8008b6c:	08008c25 	.word	0x08008c25
 8008b70:	08008bfd 	.word	0x08008bfd
 8008b74:	08008c25 	.word	0x08008c25
 8008b78:	08008c25 	.word	0x08008c25
 8008b7c:	08008c25 	.word	0x08008c25
 8008b80:	08008c25 	.word	0x08008c25
 8008b84:	08008c25 	.word	0x08008c25
 8008b88:	08008c25 	.word	0x08008c25
 8008b8c:	08008c25 	.word	0x08008c25
 8008b90:	08008c05 	.word	0x08008c05
 8008b94:	08008c25 	.word	0x08008c25
 8008b98:	08008c25 	.word	0x08008c25
 8008b9c:	08008c25 	.word	0x08008c25
 8008ba0:	08008c25 	.word	0x08008c25
 8008ba4:	08008c25 	.word	0x08008c25
 8008ba8:	08008c25 	.word	0x08008c25
 8008bac:	08008c25 	.word	0x08008c25
 8008bb0:	08008c0d 	.word	0x08008c0d
 8008bb4:	08008c25 	.word	0x08008c25
 8008bb8:	08008c25 	.word	0x08008c25
 8008bbc:	08008c25 	.word	0x08008c25
 8008bc0:	08008c25 	.word	0x08008c25
 8008bc4:	08008c25 	.word	0x08008c25
 8008bc8:	08008c25 	.word	0x08008c25
 8008bcc:	08008c25 	.word	0x08008c25
 8008bd0:	08008c15 	.word	0x08008c15
 8008bd4:	08008c25 	.word	0x08008c25
 8008bd8:	08008c25 	.word	0x08008c25
 8008bdc:	08008c25 	.word	0x08008c25
 8008be0:	08008c25 	.word	0x08008c25
 8008be4:	08008c25 	.word	0x08008c25
 8008be8:	08008c25 	.word	0x08008c25
 8008bec:	08008c25 	.word	0x08008c25
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e326      	b.n	800924a <UART_SetConfig+0x7ae>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e322      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e31e      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c12:	e31a      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c14:	2320      	movs	r3, #32
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e316      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c1c:	2340      	movs	r3, #64	; 0x40
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e312      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c24:	2380      	movs	r3, #128	; 0x80
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2a:	e30e      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a69      	ldr	r2, [pc, #420]	; (8008dd8 <UART_SetConfig+0x33c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d130      	bne.n	8008c98 <UART_SetConfig+0x1fc>
 8008c36:	4b67      	ldr	r3, [pc, #412]	; (8008dd4 <UART_SetConfig+0x338>)
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	2b05      	cmp	r3, #5
 8008c40:	d826      	bhi.n	8008c90 <UART_SetConfig+0x1f4>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <UART_SetConfig+0x1ac>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c61 	.word	0x08008c61
 8008c4c:	08008c69 	.word	0x08008c69
 8008c50:	08008c71 	.word	0x08008c71
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c81 	.word	0x08008c81
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c66:	e2f0      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6e:	e2ec      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c70:	2308      	movs	r3, #8
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c76:	e2e8      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7e:	e2e4      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c80:	2320      	movs	r3, #32
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c86:	e2e0      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8e:	e2dc      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c90:	2380      	movs	r3, #128	; 0x80
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c96:	e2d8      	b.n	800924a <UART_SetConfig+0x7ae>
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a4f      	ldr	r2, [pc, #316]	; (8008ddc <UART_SetConfig+0x340>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d130      	bne.n	8008d04 <UART_SetConfig+0x268>
 8008ca2:	4b4c      	ldr	r3, [pc, #304]	; (8008dd4 <UART_SetConfig+0x338>)
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d826      	bhi.n	8008cfc <UART_SetConfig+0x260>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <UART_SetConfig+0x218>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008ccd 	.word	0x08008ccd
 8008cb8:	08008cd5 	.word	0x08008cd5
 8008cbc:	08008cdd 	.word	0x08008cdd
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008ced 	.word	0x08008ced
 8008cc8:	08008cf5 	.word	0x08008cf5
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e2ba      	b.n	800924a <UART_SetConfig+0x7ae>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e2b6      	b.n	800924a <UART_SetConfig+0x7ae>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce2:	e2b2      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cea:	e2ae      	b.n	800924a <UART_SetConfig+0x7ae>
 8008cec:	2320      	movs	r3, #32
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf2:	e2aa      	b.n	800924a <UART_SetConfig+0x7ae>
 8008cf4:	2340      	movs	r3, #64	; 0x40
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfa:	e2a6      	b.n	800924a <UART_SetConfig+0x7ae>
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d02:	e2a2      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a35      	ldr	r2, [pc, #212]	; (8008de0 <UART_SetConfig+0x344>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d130      	bne.n	8008d70 <UART_SetConfig+0x2d4>
 8008d0e:	4b31      	ldr	r3, [pc, #196]	; (8008dd4 <UART_SetConfig+0x338>)
 8008d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b05      	cmp	r3, #5
 8008d18:	d826      	bhi.n	8008d68 <UART_SetConfig+0x2cc>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <UART_SetConfig+0x284>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d39 	.word	0x08008d39
 8008d24:	08008d41 	.word	0x08008d41
 8008d28:	08008d49 	.word	0x08008d49
 8008d2c:	08008d51 	.word	0x08008d51
 8008d30:	08008d59 	.word	0x08008d59
 8008d34:	08008d61 	.word	0x08008d61
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3e:	e284      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d40:	2304      	movs	r3, #4
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d46:	e280      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d48:	2308      	movs	r3, #8
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4e:	e27c      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d50:	2310      	movs	r3, #16
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d56:	e278      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d58:	2320      	movs	r3, #32
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5e:	e274      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d60:	2340      	movs	r3, #64	; 0x40
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d66:	e270      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d68:	2380      	movs	r3, #128	; 0x80
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6e:	e26c      	b.n	800924a <UART_SetConfig+0x7ae>
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a1b      	ldr	r2, [pc, #108]	; (8008de4 <UART_SetConfig+0x348>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d142      	bne.n	8008e00 <UART_SetConfig+0x364>
 8008d7a:	4b16      	ldr	r3, [pc, #88]	; (8008dd4 <UART_SetConfig+0x338>)
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	2b05      	cmp	r3, #5
 8008d84:	d838      	bhi.n	8008df8 <UART_SetConfig+0x35c>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <UART_SetConfig+0x2f0>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008da5 	.word	0x08008da5
 8008d90:	08008dad 	.word	0x08008dad
 8008d94:	08008db5 	.word	0x08008db5
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008de9 	.word	0x08008de9
 8008da0:	08008df1 	.word	0x08008df1
 8008da4:	2300      	movs	r3, #0
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e24e      	b.n	800924a <UART_SetConfig+0x7ae>
 8008dac:	2304      	movs	r3, #4
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e24a      	b.n	800924a <UART_SetConfig+0x7ae>
 8008db4:	2308      	movs	r3, #8
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dba:	e246      	b.n	800924a <UART_SetConfig+0x7ae>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e242      	b.n	800924a <UART_SetConfig+0x7ae>
 8008dc4:	cfff69f3 	.word	0xcfff69f3
 8008dc8:	58000c00 	.word	0x58000c00
 8008dcc:	11fff4ff 	.word	0x11fff4ff
 8008dd0:	40011000 	.word	0x40011000
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	40004400 	.word	0x40004400
 8008ddc:	40004800 	.word	0x40004800
 8008de0:	40004c00 	.word	0x40004c00
 8008de4:	40005000 	.word	0x40005000
 8008de8:	2320      	movs	r3, #32
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e22c      	b.n	800924a <UART_SetConfig+0x7ae>
 8008df0:	2340      	movs	r3, #64	; 0x40
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e228      	b.n	800924a <UART_SetConfig+0x7ae>
 8008df8:	2380      	movs	r3, #128	; 0x80
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e224      	b.n	800924a <UART_SetConfig+0x7ae>
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4ab1      	ldr	r2, [pc, #708]	; (80090cc <UART_SetConfig+0x630>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d176      	bne.n	8008ef8 <UART_SetConfig+0x45c>
 8008e0a:	4bb1      	ldr	r3, [pc, #708]	; (80090d0 <UART_SetConfig+0x634>)
 8008e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e12:	2b28      	cmp	r3, #40	; 0x28
 8008e14:	d86c      	bhi.n	8008ef0 <UART_SetConfig+0x454>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <UART_SetConfig+0x380>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008ec1 	.word	0x08008ec1
 8008e20:	08008ef1 	.word	0x08008ef1
 8008e24:	08008ef1 	.word	0x08008ef1
 8008e28:	08008ef1 	.word	0x08008ef1
 8008e2c:	08008ef1 	.word	0x08008ef1
 8008e30:	08008ef1 	.word	0x08008ef1
 8008e34:	08008ef1 	.word	0x08008ef1
 8008e38:	08008ef1 	.word	0x08008ef1
 8008e3c:	08008ec9 	.word	0x08008ec9
 8008e40:	08008ef1 	.word	0x08008ef1
 8008e44:	08008ef1 	.word	0x08008ef1
 8008e48:	08008ef1 	.word	0x08008ef1
 8008e4c:	08008ef1 	.word	0x08008ef1
 8008e50:	08008ef1 	.word	0x08008ef1
 8008e54:	08008ef1 	.word	0x08008ef1
 8008e58:	08008ef1 	.word	0x08008ef1
 8008e5c:	08008ed1 	.word	0x08008ed1
 8008e60:	08008ef1 	.word	0x08008ef1
 8008e64:	08008ef1 	.word	0x08008ef1
 8008e68:	08008ef1 	.word	0x08008ef1
 8008e6c:	08008ef1 	.word	0x08008ef1
 8008e70:	08008ef1 	.word	0x08008ef1
 8008e74:	08008ef1 	.word	0x08008ef1
 8008e78:	08008ef1 	.word	0x08008ef1
 8008e7c:	08008ed9 	.word	0x08008ed9
 8008e80:	08008ef1 	.word	0x08008ef1
 8008e84:	08008ef1 	.word	0x08008ef1
 8008e88:	08008ef1 	.word	0x08008ef1
 8008e8c:	08008ef1 	.word	0x08008ef1
 8008e90:	08008ef1 	.word	0x08008ef1
 8008e94:	08008ef1 	.word	0x08008ef1
 8008e98:	08008ef1 	.word	0x08008ef1
 8008e9c:	08008ee1 	.word	0x08008ee1
 8008ea0:	08008ef1 	.word	0x08008ef1
 8008ea4:	08008ef1 	.word	0x08008ef1
 8008ea8:	08008ef1 	.word	0x08008ef1
 8008eac:	08008ef1 	.word	0x08008ef1
 8008eb0:	08008ef1 	.word	0x08008ef1
 8008eb4:	08008ef1 	.word	0x08008ef1
 8008eb8:	08008ef1 	.word	0x08008ef1
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec6:	e1c0      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ece:	e1bc      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed6:	e1b8      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ede:	e1b4      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e1b0      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e1ac      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ef0:	2380      	movs	r3, #128	; 0x80
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef6:	e1a8      	b.n	800924a <UART_SetConfig+0x7ae>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a75      	ldr	r2, [pc, #468]	; (80090d4 <UART_SetConfig+0x638>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d130      	bne.n	8008f64 <UART_SetConfig+0x4c8>
 8008f02:	4b73      	ldr	r3, [pc, #460]	; (80090d0 <UART_SetConfig+0x634>)
 8008f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d826      	bhi.n	8008f5c <UART_SetConfig+0x4c0>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <UART_SetConfig+0x478>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f2d 	.word	0x08008f2d
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f3d 	.word	0x08008f3d
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f32:	e18a      	b.n	800924a <UART_SetConfig+0x7ae>
 8008f34:	2304      	movs	r3, #4
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3a:	e186      	b.n	800924a <UART_SetConfig+0x7ae>
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f42:	e182      	b.n	800924a <UART_SetConfig+0x7ae>
 8008f44:	2310      	movs	r3, #16
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4a:	e17e      	b.n	800924a <UART_SetConfig+0x7ae>
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f52:	e17a      	b.n	800924a <UART_SetConfig+0x7ae>
 8008f54:	2340      	movs	r3, #64	; 0x40
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5a:	e176      	b.n	800924a <UART_SetConfig+0x7ae>
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f62:	e172      	b.n	800924a <UART_SetConfig+0x7ae>
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a5b      	ldr	r2, [pc, #364]	; (80090d8 <UART_SetConfig+0x63c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d130      	bne.n	8008fd0 <UART_SetConfig+0x534>
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <UART_SetConfig+0x634>)
 8008f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d826      	bhi.n	8008fc8 <UART_SetConfig+0x52c>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <UART_SetConfig+0x4e4>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008f99 	.word	0x08008f99
 8008f84:	08008fa1 	.word	0x08008fa1
 8008f88:	08008fa9 	.word	0x08008fa9
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb9 	.word	0x08008fb9
 8008f94:	08008fc1 	.word	0x08008fc1
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9e:	e154      	b.n	800924a <UART_SetConfig+0x7ae>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa6:	e150      	b.n	800924a <UART_SetConfig+0x7ae>
 8008fa8:	2308      	movs	r3, #8
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fae:	e14c      	b.n	800924a <UART_SetConfig+0x7ae>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb6:	e148      	b.n	800924a <UART_SetConfig+0x7ae>
 8008fb8:	2320      	movs	r3, #32
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fbe:	e144      	b.n	800924a <UART_SetConfig+0x7ae>
 8008fc0:	2340      	movs	r3, #64	; 0x40
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc6:	e140      	b.n	800924a <UART_SetConfig+0x7ae>
 8008fc8:	2380      	movs	r3, #128	; 0x80
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fce:	e13c      	b.n	800924a <UART_SetConfig+0x7ae>
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a41      	ldr	r2, [pc, #260]	; (80090dc <UART_SetConfig+0x640>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	f040 8082 	bne.w	80090e0 <UART_SetConfig+0x644>
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	; (80090d0 <UART_SetConfig+0x634>)
 8008fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fe4:	2b28      	cmp	r3, #40	; 0x28
 8008fe6:	d86d      	bhi.n	80090c4 <UART_SetConfig+0x628>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x554>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009095 	.word	0x08009095
 8008ff4:	080090c5 	.word	0x080090c5
 8008ff8:	080090c5 	.word	0x080090c5
 8008ffc:	080090c5 	.word	0x080090c5
 8009000:	080090c5 	.word	0x080090c5
 8009004:	080090c5 	.word	0x080090c5
 8009008:	080090c5 	.word	0x080090c5
 800900c:	080090c5 	.word	0x080090c5
 8009010:	0800909d 	.word	0x0800909d
 8009014:	080090c5 	.word	0x080090c5
 8009018:	080090c5 	.word	0x080090c5
 800901c:	080090c5 	.word	0x080090c5
 8009020:	080090c5 	.word	0x080090c5
 8009024:	080090c5 	.word	0x080090c5
 8009028:	080090c5 	.word	0x080090c5
 800902c:	080090c5 	.word	0x080090c5
 8009030:	080090a5 	.word	0x080090a5
 8009034:	080090c5 	.word	0x080090c5
 8009038:	080090c5 	.word	0x080090c5
 800903c:	080090c5 	.word	0x080090c5
 8009040:	080090c5 	.word	0x080090c5
 8009044:	080090c5 	.word	0x080090c5
 8009048:	080090c5 	.word	0x080090c5
 800904c:	080090c5 	.word	0x080090c5
 8009050:	080090ad 	.word	0x080090ad
 8009054:	080090c5 	.word	0x080090c5
 8009058:	080090c5 	.word	0x080090c5
 800905c:	080090c5 	.word	0x080090c5
 8009060:	080090c5 	.word	0x080090c5
 8009064:	080090c5 	.word	0x080090c5
 8009068:	080090c5 	.word	0x080090c5
 800906c:	080090c5 	.word	0x080090c5
 8009070:	080090b5 	.word	0x080090b5
 8009074:	080090c5 	.word	0x080090c5
 8009078:	080090c5 	.word	0x080090c5
 800907c:	080090c5 	.word	0x080090c5
 8009080:	080090c5 	.word	0x080090c5
 8009084:	080090c5 	.word	0x080090c5
 8009088:	080090c5 	.word	0x080090c5
 800908c:	080090c5 	.word	0x080090c5
 8009090:	080090bd 	.word	0x080090bd
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909a:	e0d6      	b.n	800924a <UART_SetConfig+0x7ae>
 800909c:	2304      	movs	r3, #4
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a2:	e0d2      	b.n	800924a <UART_SetConfig+0x7ae>
 80090a4:	2308      	movs	r3, #8
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090aa:	e0ce      	b.n	800924a <UART_SetConfig+0x7ae>
 80090ac:	2310      	movs	r3, #16
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b2:	e0ca      	b.n	800924a <UART_SetConfig+0x7ae>
 80090b4:	2320      	movs	r3, #32
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ba:	e0c6      	b.n	800924a <UART_SetConfig+0x7ae>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c2:	e0c2      	b.n	800924a <UART_SetConfig+0x7ae>
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ca:	e0be      	b.n	800924a <UART_SetConfig+0x7ae>
 80090cc:	40011400 	.word	0x40011400
 80090d0:	58024400 	.word	0x58024400
 80090d4:	40007800 	.word	0x40007800
 80090d8:	40007c00 	.word	0x40007c00
 80090dc:	40011800 	.word	0x40011800
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4aad      	ldr	r2, [pc, #692]	; (800939c <UART_SetConfig+0x900>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d176      	bne.n	80091d8 <UART_SetConfig+0x73c>
 80090ea:	4bad      	ldr	r3, [pc, #692]	; (80093a0 <UART_SetConfig+0x904>)
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090f2:	2b28      	cmp	r3, #40	; 0x28
 80090f4:	d86c      	bhi.n	80091d0 <UART_SetConfig+0x734>
 80090f6:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <UART_SetConfig+0x660>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	080091a1 	.word	0x080091a1
 8009100:	080091d1 	.word	0x080091d1
 8009104:	080091d1 	.word	0x080091d1
 8009108:	080091d1 	.word	0x080091d1
 800910c:	080091d1 	.word	0x080091d1
 8009110:	080091d1 	.word	0x080091d1
 8009114:	080091d1 	.word	0x080091d1
 8009118:	080091d1 	.word	0x080091d1
 800911c:	080091a9 	.word	0x080091a9
 8009120:	080091d1 	.word	0x080091d1
 8009124:	080091d1 	.word	0x080091d1
 8009128:	080091d1 	.word	0x080091d1
 800912c:	080091d1 	.word	0x080091d1
 8009130:	080091d1 	.word	0x080091d1
 8009134:	080091d1 	.word	0x080091d1
 8009138:	080091d1 	.word	0x080091d1
 800913c:	080091b1 	.word	0x080091b1
 8009140:	080091d1 	.word	0x080091d1
 8009144:	080091d1 	.word	0x080091d1
 8009148:	080091d1 	.word	0x080091d1
 800914c:	080091d1 	.word	0x080091d1
 8009150:	080091d1 	.word	0x080091d1
 8009154:	080091d1 	.word	0x080091d1
 8009158:	080091d1 	.word	0x080091d1
 800915c:	080091b9 	.word	0x080091b9
 8009160:	080091d1 	.word	0x080091d1
 8009164:	080091d1 	.word	0x080091d1
 8009168:	080091d1 	.word	0x080091d1
 800916c:	080091d1 	.word	0x080091d1
 8009170:	080091d1 	.word	0x080091d1
 8009174:	080091d1 	.word	0x080091d1
 8009178:	080091d1 	.word	0x080091d1
 800917c:	080091c1 	.word	0x080091c1
 8009180:	080091d1 	.word	0x080091d1
 8009184:	080091d1 	.word	0x080091d1
 8009188:	080091d1 	.word	0x080091d1
 800918c:	080091d1 	.word	0x080091d1
 8009190:	080091d1 	.word	0x080091d1
 8009194:	080091d1 	.word	0x080091d1
 8009198:	080091d1 	.word	0x080091d1
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	2301      	movs	r3, #1
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a6:	e050      	b.n	800924a <UART_SetConfig+0x7ae>
 80091a8:	2304      	movs	r3, #4
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ae:	e04c      	b.n	800924a <UART_SetConfig+0x7ae>
 80091b0:	2308      	movs	r3, #8
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b6:	e048      	b.n	800924a <UART_SetConfig+0x7ae>
 80091b8:	2310      	movs	r3, #16
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091be:	e044      	b.n	800924a <UART_SetConfig+0x7ae>
 80091c0:	2320      	movs	r3, #32
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c6:	e040      	b.n	800924a <UART_SetConfig+0x7ae>
 80091c8:	2340      	movs	r3, #64	; 0x40
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ce:	e03c      	b.n	800924a <UART_SetConfig+0x7ae>
 80091d0:	2380      	movs	r3, #128	; 0x80
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d6:	e038      	b.n	800924a <UART_SetConfig+0x7ae>
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a71      	ldr	r2, [pc, #452]	; (80093a4 <UART_SetConfig+0x908>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d130      	bne.n	8009244 <UART_SetConfig+0x7a8>
 80091e2:	4b6f      	ldr	r3, [pc, #444]	; (80093a0 <UART_SetConfig+0x904>)
 80091e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d826      	bhi.n	800923c <UART_SetConfig+0x7a0>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <UART_SetConfig+0x758>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	08009215 	.word	0x08009215
 80091fc:	0800921d 	.word	0x0800921d
 8009200:	08009225 	.word	0x08009225
 8009204:	0800922d 	.word	0x0800922d
 8009208:	08009235 	.word	0x08009235
 800920c:	2302      	movs	r3, #2
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009212:	e01a      	b.n	800924a <UART_SetConfig+0x7ae>
 8009214:	2304      	movs	r3, #4
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921a:	e016      	b.n	800924a <UART_SetConfig+0x7ae>
 800921c:	2308      	movs	r3, #8
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009222:	e012      	b.n	800924a <UART_SetConfig+0x7ae>
 8009224:	2310      	movs	r3, #16
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922a:	e00e      	b.n	800924a <UART_SetConfig+0x7ae>
 800922c:	2320      	movs	r3, #32
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009232:	e00a      	b.n	800924a <UART_SetConfig+0x7ae>
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923a:	e006      	b.n	800924a <UART_SetConfig+0x7ae>
 800923c:	2380      	movs	r3, #128	; 0x80
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009242:	e002      	b.n	800924a <UART_SetConfig+0x7ae>
 8009244:	2380      	movs	r3, #128	; 0x80
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a55      	ldr	r2, [pc, #340]	; (80093a4 <UART_SetConfig+0x908>)
 8009250:	4293      	cmp	r3, r2
 8009252:	f040 80f8 	bne.w	8009446 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009256:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800925a:	2b20      	cmp	r3, #32
 800925c:	dc46      	bgt.n	80092ec <UART_SetConfig+0x850>
 800925e:	2b02      	cmp	r3, #2
 8009260:	db75      	blt.n	800934e <UART_SetConfig+0x8b2>
 8009262:	3b02      	subs	r3, #2
 8009264:	2b1e      	cmp	r3, #30
 8009266:	d872      	bhi.n	800934e <UART_SetConfig+0x8b2>
 8009268:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <UART_SetConfig+0x7d4>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	080092f3 	.word	0x080092f3
 8009274:	0800934f 	.word	0x0800934f
 8009278:	080092fb 	.word	0x080092fb
 800927c:	0800934f 	.word	0x0800934f
 8009280:	0800934f 	.word	0x0800934f
 8009284:	0800934f 	.word	0x0800934f
 8009288:	0800930b 	.word	0x0800930b
 800928c:	0800934f 	.word	0x0800934f
 8009290:	0800934f 	.word	0x0800934f
 8009294:	0800934f 	.word	0x0800934f
 8009298:	0800934f 	.word	0x0800934f
 800929c:	0800934f 	.word	0x0800934f
 80092a0:	0800934f 	.word	0x0800934f
 80092a4:	0800934f 	.word	0x0800934f
 80092a8:	0800931b 	.word	0x0800931b
 80092ac:	0800934f 	.word	0x0800934f
 80092b0:	0800934f 	.word	0x0800934f
 80092b4:	0800934f 	.word	0x0800934f
 80092b8:	0800934f 	.word	0x0800934f
 80092bc:	0800934f 	.word	0x0800934f
 80092c0:	0800934f 	.word	0x0800934f
 80092c4:	0800934f 	.word	0x0800934f
 80092c8:	0800934f 	.word	0x0800934f
 80092cc:	0800934f 	.word	0x0800934f
 80092d0:	0800934f 	.word	0x0800934f
 80092d4:	0800934f 	.word	0x0800934f
 80092d8:	0800934f 	.word	0x0800934f
 80092dc:	0800934f 	.word	0x0800934f
 80092e0:	0800934f 	.word	0x0800934f
 80092e4:	0800934f 	.word	0x0800934f
 80092e8:	08009341 	.word	0x08009341
 80092ec:	2b40      	cmp	r3, #64	; 0x40
 80092ee:	d02a      	beq.n	8009346 <UART_SetConfig+0x8aa>
 80092f0:	e02d      	b.n	800934e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80092f2:	f7fe faa7 	bl	8007844 <HAL_RCCEx_GetD3PCLK1Freq>
 80092f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092f8:	e02f      	b.n	800935a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fab6 	bl	8007870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009308:	e027      	b.n	800935a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800930a:	f107 0318 	add.w	r3, r7, #24
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fc02 	bl	8007b18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009318:	e01f      	b.n	800935a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800931a:	4b21      	ldr	r3, [pc, #132]	; (80093a0 <UART_SetConfig+0x904>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d009      	beq.n	800933a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009326:	4b1e      	ldr	r3, [pc, #120]	; (80093a0 <UART_SetConfig+0x904>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	08db      	lsrs	r3, r3, #3
 800932c:	f003 0303 	and.w	r3, r3, #3
 8009330:	4a1d      	ldr	r2, [pc, #116]	; (80093a8 <UART_SetConfig+0x90c>)
 8009332:	fa22 f303 	lsr.w	r3, r2, r3
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009338:	e00f      	b.n	800935a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <UART_SetConfig+0x90c>)
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800933e:	e00c      	b.n	800935a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009340:	4b1a      	ldr	r3, [pc, #104]	; (80093ac <UART_SetConfig+0x910>)
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009344:	e009      	b.n	800935a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800934c:	e005      	b.n	800935a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800935a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 81ee 	beq.w	800973e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	4a12      	ldr	r2, [pc, #72]	; (80093b0 <UART_SetConfig+0x914>)
 8009368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800936c:	461a      	mov	r2, r3
 800936e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009370:	fbb3 f3f2 	udiv	r3, r3, r2
 8009374:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	4413      	add	r3, r2
 8009380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009382:	429a      	cmp	r2, r3
 8009384:	d305      	bcc.n	8009392 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800938c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938e:	429a      	cmp	r2, r3
 8009390:	d910      	bls.n	80093b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009398:	e1d1      	b.n	800973e <UART_SetConfig+0xca2>
 800939a:	bf00      	nop
 800939c:	40011c00 	.word	0x40011c00
 80093a0:	58024400 	.word	0x58024400
 80093a4:	58000c00 	.word	0x58000c00
 80093a8:	03d09000 	.word	0x03d09000
 80093ac:	003d0900 	.word	0x003d0900
 80093b0:	0800e6a8 	.word	0x0800e6a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b6:	2200      	movs	r2, #0
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	60fa      	str	r2, [r7, #12]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	4ac0      	ldr	r2, [pc, #768]	; (80096c4 <UART_SetConfig+0xc28>)
 80093c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	2200      	movs	r2, #0
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093d6:	f7f6 ff99 	bl	800030c <__aeabi_uldivmod>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4610      	mov	r0, r2
 80093e0:	4619      	mov	r1, r3
 80093e2:	f04f 0200 	mov.w	r2, #0
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	020b      	lsls	r3, r1, #8
 80093ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093f0:	0202      	lsls	r2, r0, #8
 80093f2:	6979      	ldr	r1, [r7, #20]
 80093f4:	6849      	ldr	r1, [r1, #4]
 80093f6:	0849      	lsrs	r1, r1, #1
 80093f8:	2000      	movs	r0, #0
 80093fa:	460c      	mov	r4, r1
 80093fc:	4605      	mov	r5, r0
 80093fe:	eb12 0804 	adds.w	r8, r2, r4
 8009402:	eb43 0905 	adc.w	r9, r3, r5
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	469a      	mov	sl, r3
 800940e:	4693      	mov	fp, r2
 8009410:	4652      	mov	r2, sl
 8009412:	465b      	mov	r3, fp
 8009414:	4640      	mov	r0, r8
 8009416:	4649      	mov	r1, r9
 8009418:	f7f6 ff78 	bl	800030c <__aeabi_uldivmod>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4613      	mov	r3, r2
 8009422:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800942a:	d308      	bcc.n	800943e <UART_SetConfig+0x9a2>
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009432:	d204      	bcs.n	800943e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800943a:	60da      	str	r2, [r3, #12]
 800943c:	e17f      	b.n	800973e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009444:	e17b      	b.n	800973e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800944e:	f040 80bd 	bne.w	80095cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009452:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009456:	2b20      	cmp	r3, #32
 8009458:	dc48      	bgt.n	80094ec <UART_SetConfig+0xa50>
 800945a:	2b00      	cmp	r3, #0
 800945c:	db7b      	blt.n	8009556 <UART_SetConfig+0xaba>
 800945e:	2b20      	cmp	r3, #32
 8009460:	d879      	bhi.n	8009556 <UART_SetConfig+0xaba>
 8009462:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <UART_SetConfig+0x9cc>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	080094f3 	.word	0x080094f3
 800946c:	080094fb 	.word	0x080094fb
 8009470:	08009557 	.word	0x08009557
 8009474:	08009557 	.word	0x08009557
 8009478:	08009503 	.word	0x08009503
 800947c:	08009557 	.word	0x08009557
 8009480:	08009557 	.word	0x08009557
 8009484:	08009557 	.word	0x08009557
 8009488:	08009513 	.word	0x08009513
 800948c:	08009557 	.word	0x08009557
 8009490:	08009557 	.word	0x08009557
 8009494:	08009557 	.word	0x08009557
 8009498:	08009557 	.word	0x08009557
 800949c:	08009557 	.word	0x08009557
 80094a0:	08009557 	.word	0x08009557
 80094a4:	08009557 	.word	0x08009557
 80094a8:	08009523 	.word	0x08009523
 80094ac:	08009557 	.word	0x08009557
 80094b0:	08009557 	.word	0x08009557
 80094b4:	08009557 	.word	0x08009557
 80094b8:	08009557 	.word	0x08009557
 80094bc:	08009557 	.word	0x08009557
 80094c0:	08009557 	.word	0x08009557
 80094c4:	08009557 	.word	0x08009557
 80094c8:	08009557 	.word	0x08009557
 80094cc:	08009557 	.word	0x08009557
 80094d0:	08009557 	.word	0x08009557
 80094d4:	08009557 	.word	0x08009557
 80094d8:	08009557 	.word	0x08009557
 80094dc:	08009557 	.word	0x08009557
 80094e0:	08009557 	.word	0x08009557
 80094e4:	08009557 	.word	0x08009557
 80094e8:	08009549 	.word	0x08009549
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d02e      	beq.n	800954e <UART_SetConfig+0xab2>
 80094f0:	e031      	b.n	8009556 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094f2:	f7fc ffdb 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 80094f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094f8:	e033      	b.n	8009562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094fa:	f7fc ffed 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 80094fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009500:	e02f      	b.n	8009562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe f9b2 	bl	8007870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009510:	e027      	b.n	8009562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009512:	f107 0318 	add.w	r3, r7, #24
 8009516:	4618      	mov	r0, r3
 8009518:	f7fe fafe 	bl	8007b18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009520:	e01f      	b.n	8009562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009522:	4b69      	ldr	r3, [pc, #420]	; (80096c8 <UART_SetConfig+0xc2c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800952e:	4b66      	ldr	r3, [pc, #408]	; (80096c8 <UART_SetConfig+0xc2c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	4a64      	ldr	r2, [pc, #400]	; (80096cc <UART_SetConfig+0xc30>)
 800953a:	fa22 f303 	lsr.w	r3, r2, r3
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009540:	e00f      	b.n	8009562 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009542:	4b62      	ldr	r3, [pc, #392]	; (80096cc <UART_SetConfig+0xc30>)
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009546:	e00c      	b.n	8009562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009548:	4b61      	ldr	r3, [pc, #388]	; (80096d0 <UART_SetConfig+0xc34>)
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800954c:	e009      	b.n	8009562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800954e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009554:	e005      	b.n	8009562 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 80ea 	beq.w	800973e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	4a55      	ldr	r2, [pc, #340]	; (80096c4 <UART_SetConfig+0xc28>)
 8009570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009574:	461a      	mov	r2, r3
 8009576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009578:	fbb3 f3f2 	udiv	r3, r3, r2
 800957c:	005a      	lsls	r2, r3, #1
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	441a      	add	r2, r3
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	2b0f      	cmp	r3, #15
 8009594:	d916      	bls.n	80095c4 <UART_SetConfig+0xb28>
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800959c:	d212      	bcs.n	80095c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	f023 030f 	bic.w	r3, r3, #15
 80095a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	085b      	lsrs	r3, r3, #1
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095b6:	4313      	orrs	r3, r2
 80095b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80095c0:	60da      	str	r2, [r3, #12]
 80095c2:	e0bc      	b.n	800973e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80095ca:	e0b8      	b.n	800973e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	dc4b      	bgt.n	800966c <UART_SetConfig+0xbd0>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f2c0 8087 	blt.w	80096e8 <UART_SetConfig+0xc4c>
 80095da:	2b20      	cmp	r3, #32
 80095dc:	f200 8084 	bhi.w	80096e8 <UART_SetConfig+0xc4c>
 80095e0:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <UART_SetConfig+0xb4c>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	08009673 	.word	0x08009673
 80095ec:	0800967b 	.word	0x0800967b
 80095f0:	080096e9 	.word	0x080096e9
 80095f4:	080096e9 	.word	0x080096e9
 80095f8:	08009683 	.word	0x08009683
 80095fc:	080096e9 	.word	0x080096e9
 8009600:	080096e9 	.word	0x080096e9
 8009604:	080096e9 	.word	0x080096e9
 8009608:	08009693 	.word	0x08009693
 800960c:	080096e9 	.word	0x080096e9
 8009610:	080096e9 	.word	0x080096e9
 8009614:	080096e9 	.word	0x080096e9
 8009618:	080096e9 	.word	0x080096e9
 800961c:	080096e9 	.word	0x080096e9
 8009620:	080096e9 	.word	0x080096e9
 8009624:	080096e9 	.word	0x080096e9
 8009628:	080096a3 	.word	0x080096a3
 800962c:	080096e9 	.word	0x080096e9
 8009630:	080096e9 	.word	0x080096e9
 8009634:	080096e9 	.word	0x080096e9
 8009638:	080096e9 	.word	0x080096e9
 800963c:	080096e9 	.word	0x080096e9
 8009640:	080096e9 	.word	0x080096e9
 8009644:	080096e9 	.word	0x080096e9
 8009648:	080096e9 	.word	0x080096e9
 800964c:	080096e9 	.word	0x080096e9
 8009650:	080096e9 	.word	0x080096e9
 8009654:	080096e9 	.word	0x080096e9
 8009658:	080096e9 	.word	0x080096e9
 800965c:	080096e9 	.word	0x080096e9
 8009660:	080096e9 	.word	0x080096e9
 8009664:	080096e9 	.word	0x080096e9
 8009668:	080096db 	.word	0x080096db
 800966c:	2b40      	cmp	r3, #64	; 0x40
 800966e:	d037      	beq.n	80096e0 <UART_SetConfig+0xc44>
 8009670:	e03a      	b.n	80096e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009672:	f7fc ff1b 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8009676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009678:	e03c      	b.n	80096f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800967a:	f7fc ff2d 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 800967e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009680:	e038      	b.n	80096f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe f8f2 	bl	8007870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009690:	e030      	b.n	80096f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009692:	f107 0318 	add.w	r3, r7, #24
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fa3e 	bl	8007b18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096a0:	e028      	b.n	80096f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096a2:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <UART_SetConfig+0xc2c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0320 	and.w	r3, r3, #32
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d012      	beq.n	80096d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <UART_SetConfig+0xc2c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	08db      	lsrs	r3, r3, #3
 80096b4:	f003 0303 	and.w	r3, r3, #3
 80096b8:	4a04      	ldr	r2, [pc, #16]	; (80096cc <UART_SetConfig+0xc30>)
 80096ba:	fa22 f303 	lsr.w	r3, r2, r3
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096c0:	e018      	b.n	80096f4 <UART_SetConfig+0xc58>
 80096c2:	bf00      	nop
 80096c4:	0800e6a8 	.word	0x0800e6a8
 80096c8:	58024400 	.word	0x58024400
 80096cc:	03d09000 	.word	0x03d09000
 80096d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80096d4:	4b24      	ldr	r3, [pc, #144]	; (8009768 <UART_SetConfig+0xccc>)
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096d8:	e00c      	b.n	80096f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096da:	4b24      	ldr	r3, [pc, #144]	; (800976c <UART_SetConfig+0xcd0>)
 80096dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096de:	e009      	b.n	80096f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096e6:	e005      	b.n	80096f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80096f2:	bf00      	nop
    }

    if (pclk != 0U)
 80096f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d021      	beq.n	800973e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	4a1c      	ldr	r2, [pc, #112]	; (8009770 <UART_SetConfig+0xcd4>)
 8009700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009704:	461a      	mov	r2, r3
 8009706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009708:	fbb3 f2f2 	udiv	r2, r3, r2
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	085b      	lsrs	r3, r3, #1
 8009712:	441a      	add	r2, r3
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	fbb2 f3f3 	udiv	r3, r2, r3
 800971c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	2b0f      	cmp	r3, #15
 8009722:	d909      	bls.n	8009738 <UART_SetConfig+0xc9c>
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800972a:	d205      	bcs.n	8009738 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	b29a      	uxth	r2, r3
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60da      	str	r2, [r3, #12]
 8009736:	e002      	b.n	800973e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2201      	movs	r2, #1
 8009742:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2201      	movs	r2, #1
 800974a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2200      	movs	r2, #0
 8009752:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2200      	movs	r2, #0
 8009758:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800975a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800975e:	4618      	mov	r0, r3
 8009760:	3748      	adds	r7, #72	; 0x48
 8009762:	46bd      	mov	sp, r7
 8009764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009768:	03d09000 	.word	0x03d09000
 800976c:	003d0900 	.word	0x003d0900
 8009770:	0800e6a8 	.word	0x0800e6a8

08009774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00a      	beq.n	800979e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	430a      	orrs	r2, r1
 80097be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009808:	f003 0310 	and.w	r3, r3, #16
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	430a      	orrs	r2, r1
 8009846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01a      	beq.n	800988a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009872:	d10a      	bne.n	800988a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	430a      	orrs	r2, r1
 80098aa:	605a      	str	r2, [r3, #4]
  }
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b098      	sub	sp, #96	; 0x60
 80098bc:	af02      	add	r7, sp, #8
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098c8:	f7f7 fa5e 	bl	8000d88 <HAL_GetTick>
 80098cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0308 	and.w	r3, r3, #8
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d12f      	bne.n	800993c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e4:	2200      	movs	r2, #0
 80098e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f88e 	bl	8009a0c <UART_WaitOnFlagUntilTimeout>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d022      	beq.n	800993c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	e853 3f00 	ldrex	r3, [r3]
 8009902:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800990a:	653b      	str	r3, [r7, #80]	; 0x50
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	461a      	mov	r2, r3
 8009912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009914:	647b      	str	r3, [r7, #68]	; 0x44
 8009916:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800991a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800991c:	e841 2300 	strex	r3, r2, [r1]
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e6      	bne.n	80098f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e063      	b.n	8009a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b04      	cmp	r3, #4
 8009948:	d149      	bne.n	80099de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800994a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009952:	2200      	movs	r2, #0
 8009954:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f857 	bl	8009a0c <UART_WaitOnFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d03c      	beq.n	80099de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	623b      	str	r3, [r7, #32]
   return(result);
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009982:	633b      	str	r3, [r7, #48]	; 0x30
 8009984:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e6      	bne.n	8009964 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3308      	adds	r3, #8
 800999c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f023 0301 	bic.w	r3, r3, #1
 80099ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099b6:	61fa      	str	r2, [r7, #28]
 80099b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	69b9      	ldr	r1, [r7, #24]
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	617b      	str	r3, [r7, #20]
   return(result);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e5      	bne.n	8009996 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e012      	b.n	8009a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3758      	adds	r7, #88	; 0x58
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	603b      	str	r3, [r7, #0]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a1c:	e049      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a24:	d045      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a26:	f7f7 f9af 	bl	8000d88 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d302      	bcc.n	8009a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e048      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0304 	and.w	r3, r3, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d031      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d110      	bne.n	8009a7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2208      	movs	r2, #8
 8009a62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f921 	bl	8009cac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e029      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a8c:	d111      	bne.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f907 	bl	8009cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e00f      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69da      	ldr	r2, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4013      	ands	r3, r2
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	bf0c      	ite	eq
 8009ac2:	2301      	moveq	r3, #1
 8009ac4:	2300      	movne	r3, #0
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	461a      	mov	r2, r3
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d0a6      	beq.n	8009a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b096      	sub	sp, #88	; 0x58
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	88fa      	ldrh	r2, [r7, #6]
 8009af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2222      	movs	r2, #34	; 0x22
 8009b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d02d      	beq.n	8009b6e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b18:	4a40      	ldr	r2, [pc, #256]	; (8009c1c <UART_Start_Receive_DMA+0x140>)
 8009b1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b22:	4a3f      	ldr	r2, [pc, #252]	; (8009c20 <UART_Start_Receive_DMA+0x144>)
 8009b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b2c:	4a3d      	ldr	r2, [pc, #244]	; (8009c24 <UART_Start_Receive_DMA+0x148>)
 8009b2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b36:	2200      	movs	r2, #0
 8009b38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3324      	adds	r3, #36	; 0x24
 8009b46:	4619      	mov	r1, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	f7f7 fdb4 	bl	80016bc <HAL_DMA_Start_IT>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d009      	beq.n	8009b6e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2210      	movs	r2, #16
 8009b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e051      	b.n	8009c12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d018      	beq.n	8009ba8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b96:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e6      	bne.n	8009b76 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3308      	adds	r3, #8
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bc8:	637a      	str	r2, [r7, #52]	; 0x34
 8009bca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e5      	bne.n	8009ba8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3308      	adds	r3, #8
 8009be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	e853 3f00 	ldrex	r3, [r3]
 8009bea:	613b      	str	r3, [r7, #16]
   return(result);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3308      	adds	r3, #8
 8009bfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bfc:	623a      	str	r2, [r7, #32]
 8009bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	69f9      	ldr	r1, [r7, #28]
 8009c02:	6a3a      	ldr	r2, [r7, #32]
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e5      	bne.n	8009bdc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3758      	adds	r7, #88	; 0x58
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	08009d79 	.word	0x08009d79
 8009c20:	08009ea1 	.word	0x08009ea1
 8009c24:	08009edf 	.word	0x08009edf

08009c28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b08f      	sub	sp, #60	; 0x3c
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c44:	637b      	str	r3, [r7, #52]	; 0x34
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c50:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c56:	e841 2300 	strex	r3, r2, [r1]
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e6      	bne.n	8009c30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3308      	adds	r3, #8
 8009c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009c78:	633b      	str	r3, [r7, #48]	; 0x30
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c82:	61ba      	str	r2, [r7, #24]
 8009c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e5      	bne.n	8009c62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009c9e:	bf00      	nop
 8009ca0:	373c      	adds	r7, #60	; 0x3c
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
	...

08009cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b095      	sub	sp, #84	; 0x54
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8009cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e6      	bne.n	8009cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3308      	adds	r3, #8
 8009cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	4b1e      	ldr	r3, [pc, #120]	; (8009d74 <UART_EndRxTransfer+0xc8>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3308      	adds	r3, #8
 8009d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d0e:	e841 2300 	strex	r3, r2, [r1]
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e5      	bne.n	8009ce6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d118      	bne.n	8009d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	e853 3f00 	ldrex	r3, [r3]
 8009d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f023 0310 	bic.w	r3, r3, #16
 8009d36:	647b      	str	r3, [r7, #68]	; 0x44
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d40:	61bb      	str	r3, [r7, #24]
 8009d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d44:	6979      	ldr	r1, [r7, #20]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e6      	bne.n	8009d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2220      	movs	r2, #32
 8009d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009d68:	bf00      	nop
 8009d6a:	3754      	adds	r7, #84	; 0x54
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	effffffe 	.word	0xeffffffe

08009d78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b09c      	sub	sp, #112	; 0x70
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d84:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d8e:	d071      	beq.n	8009e74 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da0:	e853 3f00 	ldrex	r3, [r3]
 8009da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009db8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e6      	bne.n	8009d98 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3308      	adds	r3, #8
 8009dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ddc:	f023 0301 	bic.w	r3, r3, #1
 8009de0:	667b      	str	r3, [r7, #100]	; 0x64
 8009de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3308      	adds	r3, #8
 8009de8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009dea:	647a      	str	r2, [r7, #68]	; 0x44
 8009dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df2:	e841 2300 	strex	r3, r2, [r1]
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1e5      	bne.n	8009dca <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3308      	adds	r3, #8
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e14:	663b      	str	r3, [r7, #96]	; 0x60
 8009e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e1e:	633a      	str	r2, [r7, #48]	; 0x30
 8009e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e5      	bne.n	8009dfe <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d118      	bne.n	8009e74 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0310 	bic.w	r3, r3, #16
 8009e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e60:	61fb      	str	r3, [r7, #28]
 8009e62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	69b9      	ldr	r1, [r7, #24]
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	e841 2300 	strex	r3, r2, [r1]
 8009e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1e6      	bne.n	8009e42 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e76:	2200      	movs	r2, #0
 8009e78:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d107      	bne.n	8009e92 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e8c:	f7fe fdfa 	bl	8008a84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e90:	e002      	b.n	8009e98 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009e92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e94:	f7f6 fbca 	bl	800062c <HAL_UART_RxCpltCallback>
}
 8009e98:	bf00      	nop
 8009e9a:	3770      	adds	r7, #112	; 0x70
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d109      	bne.n	8009ed0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ec2:	085b      	lsrs	r3, r3, #1
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f7fe fddb 	bl	8008a84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ece:	e002      	b.n	8009ed6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7fe fdc3 	bl	8008a5c <HAL_UART_RxHalfCpltCallback>
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b086      	sub	sp, #24
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f06:	2b80      	cmp	r3, #128	; 0x80
 8009f08:	d109      	bne.n	8009f1e <UART_DMAError+0x40>
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b21      	cmp	r3, #33	; 0x21
 8009f0e:	d106      	bne.n	8009f1e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009f18:	6978      	ldr	r0, [r7, #20]
 8009f1a:	f7ff fe85 	bl	8009c28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f28:	2b40      	cmp	r3, #64	; 0x40
 8009f2a:	d109      	bne.n	8009f40 <UART_DMAError+0x62>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b22      	cmp	r3, #34	; 0x22
 8009f30:	d106      	bne.n	8009f40 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009f3a:	6978      	ldr	r0, [r7, #20]
 8009f3c:	f7ff feb6 	bl	8009cac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f46:	f043 0210 	orr.w	r2, r3, #16
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f50:	6978      	ldr	r0, [r7, #20]
 8009f52:	f7fe fd8d 	bl	8008a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f56:	bf00      	nop
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7fe fd77 	bl	8008a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b08f      	sub	sp, #60	; 0x3c
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f98:	2b21      	cmp	r3, #33	; 0x21
 8009f9a:	d14c      	bne.n	800a036 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d132      	bne.n	800a00e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fc8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e6      	bne.n	8009fa8 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	e853 3f00 	ldrex	r3, [r3]
 8009fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fee:	633b      	str	r3, [r7, #48]	; 0x30
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	61bb      	str	r3, [r7, #24]
 8009ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	6979      	ldr	r1, [r7, #20]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	e841 2300 	strex	r3, r2, [r1]
 800a004:	613b      	str	r3, [r7, #16]
   return(result);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e6      	bne.n	8009fda <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a00c:	e013      	b.n	800a036 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	781a      	ldrb	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a036:	bf00      	nop
 800a038:	373c      	adds	r7, #60	; 0x3c
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a042:	b480      	push	{r7}
 800a044:	b091      	sub	sp, #68	; 0x44
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a050:	2b21      	cmp	r3, #33	; 0x21
 800a052:	d151      	bne.n	800a0f8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d132      	bne.n	800a0c6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	623b      	str	r3, [r7, #32]
   return(result);
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a074:	63bb      	str	r3, [r7, #56]	; 0x38
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	633b      	str	r3, [r7, #48]	; 0x30
 800a080:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e6      	bne.n	800a060 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b0:	61fb      	str	r3, [r7, #28]
 800a0b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	69b9      	ldr	r1, [r7, #24]
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e6      	bne.n	800a092 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a0c4:	e018      	b.n	800a0f8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e0:	1c9a      	adds	r2, r3, #2
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a0f8:	bf00      	nop
 800a0fa:	3744      	adds	r7, #68	; 0x44
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a104:	b480      	push	{r7}
 800a106:	b091      	sub	sp, #68	; 0x44
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a112:	2b21      	cmp	r3, #33	; 0x21
 800a114:	d160      	bne.n	800a1d8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a11c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a11e:	e057      	b.n	800a1d0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a126:	b29b      	uxth	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d133      	bne.n	800a194 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3308      	adds	r3, #8
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	623b      	str	r3, [r7, #32]
   return(result);
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a142:	63bb      	str	r3, [r7, #56]	; 0x38
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3308      	adds	r3, #8
 800a14a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a14c:	633a      	str	r2, [r7, #48]	; 0x30
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e5      	bne.n	800a12c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a174:	637b      	str	r3, [r7, #52]	; 0x34
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17e:	61fb      	str	r3, [r7, #28]
 800a180:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	69b9      	ldr	r1, [r7, #24]
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	617b      	str	r3, [r7, #20]
   return(result);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e6      	bne.n	800a160 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a192:	e021      	b.n	800a1d8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d013      	beq.n	800a1ca <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a1ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a1d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1a4      	bne.n	800a120 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a1d6:	e7ff      	b.n	800a1d8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a1d8:	bf00      	nop
 800a1da:	3744      	adds	r7, #68	; 0x44
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b091      	sub	sp, #68	; 0x44
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	2b21      	cmp	r3, #33	; 0x21
 800a1f4:	d165      	bne.n	800a2c2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a1fe:	e05c      	b.n	800a2ba <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a206:	b29b      	uxth	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d133      	bne.n	800a274 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3308      	adds	r3, #8
 800a212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	e853 3f00 	ldrex	r3, [r3]
 800a21a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a222:	637b      	str	r3, [r7, #52]	; 0x34
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3308      	adds	r3, #8
 800a22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a22c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a22e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a234:	e841 2300 	strex	r3, r2, [r1]
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e5      	bne.n	800a20c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a254:	633b      	str	r3, [r7, #48]	; 0x30
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25e:	61bb      	str	r3, [r7, #24]
 800a260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	6979      	ldr	r1, [r7, #20]
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	613b      	str	r3, [r7, #16]
   return(result);
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e6      	bne.n	800a240 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a272:	e026      	b.n	800a2c2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d018      	beq.n	800a2b4 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a286:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a296:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29c:	1c9a      	adds	r2, r3, #2
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a2b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a2ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d19f      	bne.n	800a200 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a2c0:	e7ff      	b.n	800a2c2 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a2c2:	bf00      	nop
 800a2c4:	3744      	adds	r7, #68	; 0x44
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b088      	sub	sp, #32
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ea:	61fb      	str	r3, [r7, #28]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	61bb      	str	r3, [r7, #24]
 800a2f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6979      	ldr	r1, [r7, #20]
 800a2fa:	69ba      	ldr	r2, [r7, #24]
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	613b      	str	r3, [r7, #16]
   return(result);
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e6      	bne.n	800a2d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7f6 f97a 	bl	8000610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a31c:	bf00      	nop
 800a31e:	3720      	adds	r7, #32
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d101      	bne.n	800a376 <HAL_UARTEx_DisableFifoMode+0x16>
 800a372:	2302      	movs	r3, #2
 800a374:	e027      	b.n	800a3c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2224      	movs	r2, #36	; 0x24
 800a382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0201 	bic.w	r2, r2, #1
 800a39c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b084      	sub	sp, #16
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d101      	bne.n	800a3ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e02d      	b.n	800a446 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2224      	movs	r2, #36	; 0x24
 800a3f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 0201 	bic.w	r2, r2, #1
 800a410:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	430a      	orrs	r2, r1
 800a424:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f850 	bl	800a4cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2220      	movs	r2, #32
 800a438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d101      	bne.n	800a466 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a462:	2302      	movs	r3, #2
 800a464:	e02d      	b.n	800a4c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2224      	movs	r2, #36	; 0x24
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f022 0201 	bic.w	r2, r2, #1
 800a48c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f812 	bl	800a4cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d108      	bne.n	800a4ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4ec:	e031      	b.n	800a552 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4ee:	2310      	movs	r3, #16
 800a4f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4f2:	2310      	movs	r3, #16
 800a4f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	0e5b      	lsrs	r3, r3, #25
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	f003 0307 	and.w	r3, r3, #7
 800a504:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	0f5b      	lsrs	r3, r3, #29
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	f003 0307 	and.w	r3, r3, #7
 800a514:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	7b3a      	ldrb	r2, [r7, #12]
 800a51a:	4911      	ldr	r1, [pc, #68]	; (800a560 <UARTEx_SetNbDataToProcess+0x94>)
 800a51c:	5c8a      	ldrb	r2, [r1, r2]
 800a51e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a522:	7b3a      	ldrb	r2, [r7, #12]
 800a524:	490f      	ldr	r1, [pc, #60]	; (800a564 <UARTEx_SetNbDataToProcess+0x98>)
 800a526:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a528:	fb93 f3f2 	sdiv	r3, r3, r2
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	7b7a      	ldrb	r2, [r7, #13]
 800a538:	4909      	ldr	r1, [pc, #36]	; (800a560 <UARTEx_SetNbDataToProcess+0x94>)
 800a53a:	5c8a      	ldrb	r2, [r1, r2]
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a540:	7b7a      	ldrb	r2, [r7, #13]
 800a542:	4908      	ldr	r1, [pc, #32]	; (800a564 <UARTEx_SetNbDataToProcess+0x98>)
 800a544:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a546:	fb93 f3f2 	sdiv	r3, r3, r2
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a552:	bf00      	nop
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	0800e6c0 	.word	0x0800e6c0
 800a564:	0800e6c8 	.word	0x0800e6c8

0800a568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a568:	b084      	sub	sp, #16
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	f107 001c 	add.w	r0, r7, #28
 800a576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d120      	bne.n	800a5c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a584:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	4b2a      	ldr	r3, [pc, #168]	; (800a63c <USB_CoreInit+0xd4>)
 800a592:	4013      	ands	r3, r2
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d105      	bne.n	800a5b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f001 faf8 	bl	800bbac <USB_CoreReset>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
 800a5c0:	e01a      	b.n	800a5f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 faec 	bl	800bbac <USB_CoreReset>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d106      	bne.n	800a5ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	639a      	str	r2, [r3, #56]	; 0x38
 800a5ea:	e005      	b.n	800a5f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d116      	bne.n	800a62c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a602:	b29a      	uxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a60c:	4b0c      	ldr	r3, [pc, #48]	; (800a640 <USB_CoreInit+0xd8>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f043 0206 	orr.w	r2, r3, #6
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f043 0220 	orr.w	r2, r3, #32
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a638:	b004      	add	sp, #16
 800a63a:	4770      	bx	lr
 800a63c:	ffbdffbf 	.word	0xffbdffbf
 800a640:	03ee0000 	.word	0x03ee0000

0800a644 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a644:	b480      	push	{r7}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a652:	79fb      	ldrb	r3, [r7, #7]
 800a654:	2b02      	cmp	r3, #2
 800a656:	d165      	bne.n	800a724 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4a41      	ldr	r2, [pc, #260]	; (800a760 <USB_SetTurnaroundTime+0x11c>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d906      	bls.n	800a66e <USB_SetTurnaroundTime+0x2a>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	4a40      	ldr	r2, [pc, #256]	; (800a764 <USB_SetTurnaroundTime+0x120>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d202      	bcs.n	800a66e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a668:	230f      	movs	r3, #15
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	e062      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	4a3c      	ldr	r2, [pc, #240]	; (800a764 <USB_SetTurnaroundTime+0x120>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d306      	bcc.n	800a684 <USB_SetTurnaroundTime+0x40>
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	4a3b      	ldr	r2, [pc, #236]	; (800a768 <USB_SetTurnaroundTime+0x124>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d202      	bcs.n	800a684 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a67e:	230e      	movs	r3, #14
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	e057      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	4a38      	ldr	r2, [pc, #224]	; (800a768 <USB_SetTurnaroundTime+0x124>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d306      	bcc.n	800a69a <USB_SetTurnaroundTime+0x56>
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	4a37      	ldr	r2, [pc, #220]	; (800a76c <USB_SetTurnaroundTime+0x128>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d202      	bcs.n	800a69a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a694:	230d      	movs	r3, #13
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	e04c      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	4a33      	ldr	r2, [pc, #204]	; (800a76c <USB_SetTurnaroundTime+0x128>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d306      	bcc.n	800a6b0 <USB_SetTurnaroundTime+0x6c>
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4a32      	ldr	r2, [pc, #200]	; (800a770 <USB_SetTurnaroundTime+0x12c>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d802      	bhi.n	800a6b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6aa:	230c      	movs	r3, #12
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e041      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	4a2f      	ldr	r2, [pc, #188]	; (800a770 <USB_SetTurnaroundTime+0x12c>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d906      	bls.n	800a6c6 <USB_SetTurnaroundTime+0x82>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	4a2e      	ldr	r2, [pc, #184]	; (800a774 <USB_SetTurnaroundTime+0x130>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d802      	bhi.n	800a6c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a6c0:	230b      	movs	r3, #11
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	e036      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	4a2a      	ldr	r2, [pc, #168]	; (800a774 <USB_SetTurnaroundTime+0x130>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d906      	bls.n	800a6dc <USB_SetTurnaroundTime+0x98>
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	4a29      	ldr	r2, [pc, #164]	; (800a778 <USB_SetTurnaroundTime+0x134>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d802      	bhi.n	800a6dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a6d6:	230a      	movs	r3, #10
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	e02b      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4a26      	ldr	r2, [pc, #152]	; (800a778 <USB_SetTurnaroundTime+0x134>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d906      	bls.n	800a6f2 <USB_SetTurnaroundTime+0xae>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	4a25      	ldr	r2, [pc, #148]	; (800a77c <USB_SetTurnaroundTime+0x138>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d202      	bcs.n	800a6f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a6ec:	2309      	movs	r3, #9
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e020      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4a21      	ldr	r2, [pc, #132]	; (800a77c <USB_SetTurnaroundTime+0x138>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d306      	bcc.n	800a708 <USB_SetTurnaroundTime+0xc4>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	4a20      	ldr	r2, [pc, #128]	; (800a780 <USB_SetTurnaroundTime+0x13c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d802      	bhi.n	800a708 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a702:	2308      	movs	r3, #8
 800a704:	617b      	str	r3, [r7, #20]
 800a706:	e015      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4a1d      	ldr	r2, [pc, #116]	; (800a780 <USB_SetTurnaroundTime+0x13c>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d906      	bls.n	800a71e <USB_SetTurnaroundTime+0xda>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4a1c      	ldr	r2, [pc, #112]	; (800a784 <USB_SetTurnaroundTime+0x140>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d202      	bcs.n	800a71e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a718:	2307      	movs	r3, #7
 800a71a:	617b      	str	r3, [r7, #20]
 800a71c:	e00a      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a71e:	2306      	movs	r3, #6
 800a720:	617b      	str	r3, [r7, #20]
 800a722:	e007      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a724:	79fb      	ldrb	r3, [r7, #7]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a72a:	2309      	movs	r3, #9
 800a72c:	617b      	str	r3, [r7, #20]
 800a72e:	e001      	b.n	800a734 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a730:	2309      	movs	r3, #9
 800a732:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	029b      	lsls	r3, r3, #10
 800a748:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a74c:	431a      	orrs	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	371c      	adds	r7, #28
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	00d8acbf 	.word	0x00d8acbf
 800a764:	00e4e1c0 	.word	0x00e4e1c0
 800a768:	00f42400 	.word	0x00f42400
 800a76c:	01067380 	.word	0x01067380
 800a770:	011a499f 	.word	0x011a499f
 800a774:	01312cff 	.word	0x01312cff
 800a778:	014ca43f 	.word	0x014ca43f
 800a77c:	016e3600 	.word	0x016e3600
 800a780:	01a6ab1f 	.word	0x01a6ab1f
 800a784:	01e84800 	.word	0x01e84800

0800a788 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f043 0201 	orr.w	r2, r3, #1
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f023 0201 	bic.w	r2, r3, #1
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d115      	bne.n	800a81a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7fa:	2001      	movs	r0, #1
 800a7fc:	f7f6 fad0 	bl	8000da0 <HAL_Delay>
      ms++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3301      	adds	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f001 f93f 	bl	800ba8a <USB_GetMode>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d01e      	beq.n	800a850 <USB_SetCurrentMode+0x84>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b31      	cmp	r3, #49	; 0x31
 800a816:	d9f0      	bls.n	800a7fa <USB_SetCurrentMode+0x2e>
 800a818:	e01a      	b.n	800a850 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d115      	bne.n	800a84c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a82c:	2001      	movs	r0, #1
 800a82e:	f7f6 fab7 	bl	8000da0 <HAL_Delay>
      ms++;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3301      	adds	r3, #1
 800a836:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f001 f926 	bl	800ba8a <USB_GetMode>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <USB_SetCurrentMode+0x84>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b31      	cmp	r3, #49	; 0x31
 800a848:	d9f0      	bls.n	800a82c <USB_SetCurrentMode+0x60>
 800a84a:	e001      	b.n	800a850 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e005      	b.n	800a85c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b32      	cmp	r3, #50	; 0x32
 800a854:	d101      	bne.n	800a85a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e000      	b.n	800a85c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a864:	b084      	sub	sp, #16
 800a866:	b580      	push	{r7, lr}
 800a868:	b086      	sub	sp, #24
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a87e:	2300      	movs	r3, #0
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	e009      	b.n	800a898 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	3340      	adds	r3, #64	; 0x40
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	2200      	movs	r2, #0
 800a890:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	3301      	adds	r3, #1
 800a896:	613b      	str	r3, [r7, #16]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	2b0e      	cmp	r3, #14
 800a89c:	d9f2      	bls.n	800a884 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11c      	bne.n	800a8de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8b2:	f043 0302 	orr.w	r3, r3, #2
 800a8b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	e005      	b.n	800a8ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a904:	461a      	mov	r2, r3
 800a906:	680b      	ldr	r3, [r1, #0]
 800a908:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d10c      	bne.n	800a92a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	2b00      	cmp	r3, #0
 800a914:	d104      	bne.n	800a920 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a916:	2100      	movs	r1, #0
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f965 	bl	800abe8 <USB_SetDevSpeed>
 800a91e:	e008      	b.n	800a932 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a920:	2101      	movs	r1, #1
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f960 	bl	800abe8 <USB_SetDevSpeed>
 800a928:	e003      	b.n	800a932 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a92a:	2103      	movs	r1, #3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f95b 	bl	800abe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a932:	2110      	movs	r1, #16
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f8f3 	bl	800ab20 <USB_FlushTxFifo>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f91f 	bl	800ab88 <USB_FlushRxFifo>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95a:	461a      	mov	r2, r3
 800a95c:	2300      	movs	r3, #0
 800a95e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	461a      	mov	r2, r3
 800a968:	2300      	movs	r3, #0
 800a96a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a972:	461a      	mov	r2, r3
 800a974:	2300      	movs	r3, #0
 800a976:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a978:	2300      	movs	r3, #0
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	e043      	b.n	800aa06 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a994:	d118      	bne.n	800a9c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	e013      	b.n	800a9da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	e008      	b.n	800a9da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3301      	adds	r3, #1
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d3b7      	bcc.n	800a97e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa0e:	2300      	movs	r3, #0
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	e043      	b.n	800aa9c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa2a:	d118      	bne.n	800aa5e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	e013      	b.n	800aa70 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa54:	461a      	mov	r2, r3
 800aa56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	e008      	b.n	800aa70 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	613b      	str	r3, [r7, #16]
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d3b7      	bcc.n	800aa14 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aac4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d105      	bne.n	800aad8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	f043 0210 	orr.w	r2, r3, #16
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	699a      	ldr	r2, [r3, #24]
 800aadc:	4b0e      	ldr	r3, [pc, #56]	; (800ab18 <USB_DevInit+0x2b4>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	f043 0208 	orr.w	r2, r3, #8
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aaf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d105      	bne.n	800ab08 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699a      	ldr	r2, [r3, #24]
 800ab00:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <USB_DevInit+0x2b8>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab14:	b004      	add	sp, #16
 800ab16:	4770      	bx	lr
 800ab18:	803c3800 	.word	0x803c3800
 800ab1c:	40000004 	.word	0x40000004

0800ab20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3301      	adds	r3, #1
 800ab32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4a13      	ldr	r2, [pc, #76]	; (800ab84 <USB_FlushTxFifo+0x64>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d901      	bls.n	800ab40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e01b      	b.n	800ab78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	daf2      	bge.n	800ab2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	019b      	lsls	r3, r3, #6
 800ab50:	f043 0220 	orr.w	r2, r3, #32
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4a08      	ldr	r2, [pc, #32]	; (800ab84 <USB_FlushTxFifo+0x64>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d901      	bls.n	800ab6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e006      	b.n	800ab78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d0f0      	beq.n	800ab58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	00030d40 	.word	0x00030d40

0800ab88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3301      	adds	r3, #1
 800ab98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	4a11      	ldr	r2, [pc, #68]	; (800abe4 <USB_FlushRxFifo+0x5c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d901      	bls.n	800aba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e018      	b.n	800abd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	daf2      	bge.n	800ab94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2210      	movs	r2, #16
 800abb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a08      	ldr	r2, [pc, #32]	; (800abe4 <USB_FlushRxFifo+0x5c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d901      	bls.n	800abca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e006      	b.n	800abd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f003 0310 	and.w	r3, r3, #16
 800abd2:	2b10      	cmp	r3, #16
 800abd4:	d0f0      	beq.n	800abb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	00030d40 	.word	0x00030d40

0800abe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	68f9      	ldr	r1, [r7, #12]
 800ac04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b087      	sub	sp, #28
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f003 0306 	and.w	r3, r3, #6
 800ac32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d102      	bne.n	800ac40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	75fb      	strb	r3, [r7, #23]
 800ac3e:	e00a      	b.n	800ac56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d002      	beq.n	800ac4c <USB_GetDevSpeed+0x32>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b06      	cmp	r3, #6
 800ac4a:	d102      	bne.n	800ac52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	75fb      	strb	r3, [r7, #23]
 800ac50:	e001      	b.n	800ac56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac52:	230f      	movs	r3, #15
 800ac54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	371c      	adds	r7, #28
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	785b      	ldrb	r3, [r3, #1]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d139      	bne.n	800acf4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac86:	69da      	ldr	r2, [r3, #28]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	2101      	movs	r1, #1
 800ac92:	fa01 f303 	lsl.w	r3, r1, r3
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	68f9      	ldr	r1, [r7, #12]
 800ac9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d153      	bne.n	800ad60 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	791b      	ldrb	r3, [r3, #4]
 800acd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	059b      	lsls	r3, r3, #22
 800acda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acdc:	431a      	orrs	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	0159      	lsls	r1, r3, #5
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	440b      	add	r3, r1
 800ace6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acea:	4619      	mov	r1, r3
 800acec:	4b20      	ldr	r3, [pc, #128]	; (800ad70 <USB_ActivateEndpoint+0x10c>)
 800acee:	4313      	orrs	r3, r2
 800acf0:	600b      	str	r3, [r1, #0]
 800acf2:	e035      	b.n	800ad60 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acfa:	69da      	ldr	r2, [r3, #28]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	f003 030f 	and.w	r3, r3, #15
 800ad04:	2101      	movs	r1, #1
 800ad06:	fa01 f303 	lsl.w	r3, r1, r3
 800ad0a:	041b      	lsls	r3, r3, #16
 800ad0c:	68f9      	ldr	r1, [r7, #12]
 800ad0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad12:	4313      	orrs	r3, r2
 800ad14:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	015a      	lsls	r2, r3, #5
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d119      	bne.n	800ad60 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	791b      	ldrb	r3, [r3, #4]
 800ad46:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	0159      	lsls	r1, r3, #5
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	440b      	add	r3, r1
 800ad54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <USB_ActivateEndpoint+0x10c>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	10008000 	.word	0x10008000

0800ad74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	785b      	ldrb	r3, [r3, #1]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d161      	bne.n	800ae54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ada2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ada6:	d11f      	bne.n	800ade8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	0151      	lsls	r1, r2, #5
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	440a      	add	r2, r1
 800adbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800adc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	0151      	lsls	r1, r2, #5
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	440a      	add	r2, r1
 800adde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ade6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f003 030f 	and.w	r3, r3, #15
 800adf8:	2101      	movs	r1, #1
 800adfa:	fa01 f303 	lsl.w	r3, r1, r3
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	43db      	mvns	r3, r3
 800ae02:	68f9      	ldr	r1, [r7, #12]
 800ae04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae08:	4013      	ands	r3, r2
 800ae0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae12:	69da      	ldr	r2, [r3, #28]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 030f 	and.w	r3, r3, #15
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	43db      	mvns	r3, r3
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	015a      	lsls	r2, r3, #5
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	0159      	lsls	r1, r3, #5
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	440b      	add	r3, r1
 800ae46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4b35      	ldr	r3, [pc, #212]	; (800af24 <USB_DeactivateEndpoint+0x1b0>)
 800ae4e:	4013      	ands	r3, r2
 800ae50:	600b      	str	r3, [r1, #0]
 800ae52:	e060      	b.n	800af16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae6a:	d11f      	bne.n	800aeac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	0151      	lsls	r1, r2, #5
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	440a      	add	r2, r1
 800ae82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aeaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	f003 030f 	and.w	r3, r3, #15
 800aebc:	2101      	movs	r1, #1
 800aebe:	fa01 f303 	lsl.w	r3, r1, r3
 800aec2:	041b      	lsls	r3, r3, #16
 800aec4:	43db      	mvns	r3, r3
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aecc:	4013      	ands	r3, r2
 800aece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed6:	69da      	ldr	r2, [r3, #28]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	f003 030f 	and.w	r3, r3, #15
 800aee0:	2101      	movs	r1, #1
 800aee2:	fa01 f303 	lsl.w	r3, r1, r3
 800aee6:	041b      	lsls	r3, r3, #16
 800aee8:	43db      	mvns	r3, r3
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aef0:	4013      	ands	r3, r2
 800aef2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	0159      	lsls	r1, r3, #5
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	440b      	add	r3, r1
 800af0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0e:	4619      	mov	r1, r3
 800af10:	4b05      	ldr	r3, [pc, #20]	; (800af28 <USB_DeactivateEndpoint+0x1b4>)
 800af12:	4013      	ands	r3, r2
 800af14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	ec337800 	.word	0xec337800
 800af28:	eff37800 	.word	0xeff37800

0800af2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08a      	sub	sp, #40	; 0x28
 800af30:	af02      	add	r7, sp, #8
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	4613      	mov	r3, r2
 800af38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	f040 8181 	bne.w	800b250 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d132      	bne.n	800afbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	0159      	lsls	r1, r3, #5
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	440b      	add	r3, r1
 800af6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af70:	4619      	mov	r1, r3
 800af72:	4ba5      	ldr	r3, [pc, #660]	; (800b208 <USB_EPStartXfer+0x2dc>)
 800af74:	4013      	ands	r3, r2
 800af76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	015a      	lsls	r2, r3, #5
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	4413      	add	r3, r2
 800af80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	0151      	lsls	r1, r2, #5
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	440a      	add	r2, r1
 800af8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	0159      	lsls	r1, r3, #5
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	440b      	add	r3, r1
 800afae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb2:	4619      	mov	r1, r3
 800afb4:	4b95      	ldr	r3, [pc, #596]	; (800b20c <USB_EPStartXfer+0x2e0>)
 800afb6:	4013      	ands	r3, r2
 800afb8:	610b      	str	r3, [r1, #16]
 800afba:	e092      	b.n	800b0e2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc8:	691a      	ldr	r2, [r3, #16]
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	0159      	lsls	r1, r3, #5
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	440b      	add	r3, r1
 800afd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd6:	4619      	mov	r1, r3
 800afd8:	4b8c      	ldr	r3, [pc, #560]	; (800b20c <USB_EPStartXfer+0x2e0>)
 800afda:	4013      	ands	r3, r2
 800afdc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	0159      	lsls	r1, r3, #5
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	440b      	add	r3, r1
 800aff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff8:	4619      	mov	r1, r3
 800affa:	4b83      	ldr	r3, [pc, #524]	; (800b208 <USB_EPStartXfer+0x2dc>)
 800affc:	4013      	ands	r3, r2
 800affe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d11a      	bne.n	800b03c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	691a      	ldr	r2, [r3, #16]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d903      	bls.n	800b01a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	689a      	ldr	r2, [r3, #8]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	69fa      	ldr	r2, [r7, #28]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b038:	6113      	str	r3, [r2, #16]
 800b03a:	e01b      	b.n	800b074 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6919      	ldr	r1, [r3, #16]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	440b      	add	r3, r1
 800b054:	1e59      	subs	r1, r3, #1
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b05e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b060:	4b6b      	ldr	r3, [pc, #428]	; (800b210 <USB_EPStartXfer+0x2e4>)
 800b062:	400b      	ands	r3, r1
 800b064:	69b9      	ldr	r1, [r7, #24]
 800b066:	0148      	lsls	r0, r1, #5
 800b068:	69f9      	ldr	r1, [r7, #28]
 800b06a:	4401      	add	r1, r0
 800b06c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b070:	4313      	orrs	r3, r2
 800b072:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	015a      	lsls	r2, r3, #5
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	4413      	add	r3, r2
 800b07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b080:	691a      	ldr	r2, [r3, #16]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b08a:	69b9      	ldr	r1, [r7, #24]
 800b08c:	0148      	lsls	r0, r1, #5
 800b08e:	69f9      	ldr	r1, [r7, #28]
 800b090:	4401      	add	r1, r0
 800b092:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b096:	4313      	orrs	r3, r2
 800b098:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	791b      	ldrb	r3, [r3, #4]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d11f      	bne.n	800b0e2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	015a      	lsls	r2, r3, #5
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	0151      	lsls	r1, r2, #5
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	440a      	add	r2, r1
 800b0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b0c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	0151      	lsls	r1, r2, #5
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d14b      	bne.n	800b180 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	69db      	ldr	r3, [r3, #28]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d009      	beq.n	800b104 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	791b      	ldrb	r3, [r3, #4]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d128      	bne.n	800b15e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d110      	bne.n	800b13e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	0151      	lsls	r1, r2, #5
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	440a      	add	r2, r1
 800b132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	e00f      	b.n	800b15e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	015a      	lsls	r2, r3, #5
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	4413      	add	r3, r2
 800b146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	0151      	lsls	r1, r2, #5
 800b150:	69fa      	ldr	r2, [r7, #28]
 800b152:	440a      	add	r2, r1
 800b154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b15c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	e16a      	b.n	800b456 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	0151      	lsls	r1, r2, #5
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	440a      	add	r2, r1
 800b196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b19a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b19e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	791b      	ldrb	r3, [r3, #4]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d015      	beq.n	800b1d4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 8152 	beq.w	800b456 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	f003 030f 	and.w	r3, r3, #15
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c8:	69f9      	ldr	r1, [r7, #28]
 800b1ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	634b      	str	r3, [r1, #52]	; 0x34
 800b1d2:	e140      	b.n	800b456 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d117      	bne.n	800b214 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69ba      	ldr	r2, [r7, #24]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	69fa      	ldr	r2, [r7, #28]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	e016      	b.n	800b234 <USB_EPStartXfer+0x308>
 800b206:	bf00      	nop
 800b208:	e007ffff 	.word	0xe007ffff
 800b20c:	fff80000 	.word	0xfff80000
 800b210:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	0151      	lsls	r1, r2, #5
 800b226:	69fa      	ldr	r2, [r7, #28]
 800b228:	440a      	add	r2, r1
 800b22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b22e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b232:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	68d9      	ldr	r1, [r3, #12]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	781a      	ldrb	r2, [r3, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	b298      	uxth	r0, r3
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	4603      	mov	r3, r0
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 f9b9 	bl	800b5c0 <USB_WritePacket>
 800b24e:	e102      	b.n	800b456 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25c:	691a      	ldr	r2, [r3, #16]
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	0159      	lsls	r1, r3, #5
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	440b      	add	r3, r1
 800b266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26a:	4619      	mov	r1, r3
 800b26c:	4b7c      	ldr	r3, [pc, #496]	; (800b460 <USB_EPStartXfer+0x534>)
 800b26e:	4013      	ands	r3, r2
 800b270:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	0159      	lsls	r1, r3, #5
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	440b      	add	r3, r1
 800b288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28c:	4619      	mov	r1, r3
 800b28e:	4b75      	ldr	r3, [pc, #468]	; (800b464 <USB_EPStartXfer+0x538>)
 800b290:	4013      	ands	r3, r2
 800b292:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d12f      	bne.n	800b2fa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	689a      	ldr	r2, [r3, #8]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	689a      	ldr	r2, [r3, #8]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2be:	691a      	ldr	r2, [r3, #16]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2c8:	69b9      	ldr	r1, [r7, #24]
 800b2ca:	0148      	lsls	r0, r1, #5
 800b2cc:	69f9      	ldr	r1, [r7, #28]
 800b2ce:	4401      	add	r1, r0
 800b2d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	0151      	lsls	r1, r2, #5
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	440a      	add	r2, r1
 800b2ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2f6:	6113      	str	r3, [r2, #16]
 800b2f8:	e05f      	b.n	800b3ba <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d123      	bne.n	800b34a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	015a      	lsls	r2, r3, #5
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	4413      	add	r3, r2
 800b30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30e:	691a      	ldr	r2, [r3, #16]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b318:	69b9      	ldr	r1, [r7, #24]
 800b31a:	0148      	lsls	r0, r1, #5
 800b31c:	69f9      	ldr	r1, [r7, #28]
 800b31e:	4401      	add	r1, r0
 800b320:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b324:	4313      	orrs	r3, r2
 800b326:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	0151      	lsls	r1, r2, #5
 800b33a:	69fa      	ldr	r2, [r7, #28]
 800b33c:	440a      	add	r2, r1
 800b33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b346:	6113      	str	r3, [r2, #16]
 800b348:	e037      	b.n	800b3ba <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	691a      	ldr	r2, [r3, #16]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	4413      	add	r3, r2
 800b354:	1e5a      	subs	r2, r3, #1
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	8afa      	ldrh	r2, [r7, #22]
 800b366:	fb03 f202 	mul.w	r2, r3, r2
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37a:	691a      	ldr	r2, [r3, #16]
 800b37c:	8afb      	ldrh	r3, [r7, #22]
 800b37e:	04d9      	lsls	r1, r3, #19
 800b380:	4b39      	ldr	r3, [pc, #228]	; (800b468 <USB_EPStartXfer+0x53c>)
 800b382:	400b      	ands	r3, r1
 800b384:	69b9      	ldr	r1, [r7, #24]
 800b386:	0148      	lsls	r0, r1, #5
 800b388:	69f9      	ldr	r1, [r7, #28]
 800b38a:	4401      	add	r1, r0
 800b38c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b390:	4313      	orrs	r3, r2
 800b392:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	015a      	lsls	r2, r3, #5
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a0:	691a      	ldr	r2, [r3, #16]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3aa:	69b9      	ldr	r1, [r7, #24]
 800b3ac:	0148      	lsls	r0, r1, #5
 800b3ae:	69f9      	ldr	r1, [r7, #28]
 800b3b0:	4401      	add	r1, r0
 800b3b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d10d      	bne.n	800b3dc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d009      	beq.n	800b3dc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	68d9      	ldr	r1, [r3, #12]
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d8:	460a      	mov	r2, r1
 800b3da:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	791b      	ldrb	r3, [r3, #4]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d128      	bne.n	800b436 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d110      	bne.n	800b416 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	0151      	lsls	r1, r2, #5
 800b406:	69fa      	ldr	r2, [r7, #28]
 800b408:	440a      	add	r2, r1
 800b40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b40e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	e00f      	b.n	800b436 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	015a      	lsls	r2, r3, #5
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	0151      	lsls	r1, r2, #5
 800b428:	69fa      	ldr	r2, [r7, #28]
 800b42a:	440a      	add	r2, r1
 800b42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b434:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	69ba      	ldr	r2, [r7, #24]
 800b446:	0151      	lsls	r1, r2, #5
 800b448:	69fa      	ldr	r2, [r7, #28]
 800b44a:	440a      	add	r2, r1
 800b44c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b454:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3720      	adds	r7, #32
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	fff80000 	.word	0xfff80000
 800b464:	e007ffff 	.word	0xe007ffff
 800b468:	1ff80000 	.word	0x1ff80000

0800b46c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d14a      	bne.n	800b520 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b49e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4a2:	f040 8086 	bne.w	800b5b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	7812      	ldrb	r2, [r2, #0]
 800b4ba:	0151      	lsls	r1, r2, #5
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	440a      	add	r2, r1
 800b4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	7812      	ldrb	r2, [r2, #0]
 800b4de:	0151      	lsls	r1, r2, #5
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	440a      	add	r2, r1
 800b4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d902      	bls.n	800b504 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	75fb      	strb	r3, [r7, #23]
          break;
 800b502:	e056      	b.n	800b5b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b51c:	d0e7      	beq.n	800b4ee <USB_EPStopXfer+0x82>
 800b51e:	e048      	b.n	800b5b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b538:	d13b      	bne.n	800b5b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	7812      	ldrb	r2, [r2, #0]
 800b54e:	0151      	lsls	r1, r2, #5
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	440a      	add	r2, r1
 800b554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b558:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b55c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	7812      	ldrb	r2, [r2, #0]
 800b572:	0151      	lsls	r1, r2, #5
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	440a      	add	r2, r1
 800b578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b57c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b580:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3301      	adds	r3, #1
 800b586:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b58e:	4293      	cmp	r3, r2
 800b590:	d902      	bls.n	800b598 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	75fb      	strb	r3, [r7, #23]
          break;
 800b596:	e00c      	b.n	800b5b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5b0:	d0e7      	beq.n	800b582 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	371c      	adds	r7, #28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b089      	sub	sp, #36	; 0x24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	71fb      	strb	r3, [r7, #7]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b5de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d123      	bne.n	800b62e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5e6:	88bb      	ldrh	r3, [r7, #4]
 800b5e8:	3303      	adds	r3, #3
 800b5ea:	089b      	lsrs	r3, r3, #2
 800b5ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	61bb      	str	r3, [r7, #24]
 800b5f2:	e018      	b.n	800b626 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	031a      	lsls	r2, r3, #12
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b600:	461a      	mov	r2, r3
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	3301      	adds	r3, #1
 800b60c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	3301      	adds	r3, #1
 800b612:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	3301      	adds	r3, #1
 800b618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	3301      	adds	r3, #1
 800b61e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	3301      	adds	r3, #1
 800b624:	61bb      	str	r3, [r7, #24]
 800b626:	69ba      	ldr	r2, [r7, #24]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d3e2      	bcc.n	800b5f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3724      	adds	r7, #36	; 0x24
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b08b      	sub	sp, #44	; 0x2c
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	4613      	mov	r3, r2
 800b648:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b652:	88fb      	ldrh	r3, [r7, #6]
 800b654:	089b      	lsrs	r3, r3, #2
 800b656:	b29b      	uxth	r3, r3
 800b658:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	f003 0303 	and.w	r3, r3, #3
 800b660:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b662:	2300      	movs	r3, #0
 800b664:	623b      	str	r3, [r7, #32]
 800b666:	e014      	b.n	800b692 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	601a      	str	r2, [r3, #0]
    pDest++;
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	3301      	adds	r3, #1
 800b678:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	3301      	adds	r3, #1
 800b67e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	3301      	adds	r3, #1
 800b684:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	3301      	adds	r3, #1
 800b68a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	3301      	adds	r3, #1
 800b690:	623b      	str	r3, [r7, #32]
 800b692:	6a3a      	ldr	r2, [r7, #32]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	429a      	cmp	r2, r3
 800b698:	d3e6      	bcc.n	800b668 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b69a:	8bfb      	ldrh	r3, [r7, #30]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d01e      	beq.n	800b6de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f107 0310 	add.w	r3, r7, #16
 800b6b0:	6812      	ldr	r2, [r2, #0]
 800b6b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	701a      	strb	r2, [r3, #0]
      i++;
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b6d2:	8bfb      	ldrh	r3, [r7, #30]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b6d8:	8bfb      	ldrh	r3, [r7, #30]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1ea      	bne.n	800b6b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	372c      	adds	r7, #44	; 0x2c
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	785b      	ldrb	r3, [r3, #1]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d12c      	bne.n	800b762 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	db12      	blt.n	800b740 <USB_EPSetStall+0x54>
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00f      	beq.n	800b740 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	015a      	lsls	r2, r3, #5
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	4413      	add	r3, r2
 800b728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	0151      	lsls	r1, r2, #5
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	440a      	add	r2, r1
 800b736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b73a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b73e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	0151      	lsls	r1, r2, #5
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	440a      	add	r2, r1
 800b756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b75a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	e02b      	b.n	800b7ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	db12      	blt.n	800b79a <USB_EPSetStall+0xae>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00f      	beq.n	800b79a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	015a      	lsls	r2, r3, #5
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4413      	add	r3, r2
 800b782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	0151      	lsls	r1, r2, #5
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	440a      	add	r2, r1
 800b790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b794:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b798:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	785b      	ldrb	r3, [r3, #1]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d128      	bne.n	800b836 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	0151      	lsls	r1, r2, #5
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	440a      	add	r2, r1
 800b7fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b802:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	791b      	ldrb	r3, [r3, #4]
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d003      	beq.n	800b814 <USB_EPClearStall+0x4c>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	791b      	ldrb	r3, [r3, #4]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d138      	bne.n	800b886 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	0151      	lsls	r1, r2, #5
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	440a      	add	r2, r1
 800b82a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b82e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	e027      	b.n	800b886 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	015a      	lsls	r2, r3, #5
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4413      	add	r3, r2
 800b83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	0151      	lsls	r1, r2, #5
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	440a      	add	r2, r1
 800b84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b850:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b854:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	791b      	ldrb	r3, [r3, #4]
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d003      	beq.n	800b866 <USB_EPClearStall+0x9e>
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	791b      	ldrb	r3, [r3, #4]
 800b862:	2b02      	cmp	r3, #2
 800b864:	d10f      	bne.n	800b886 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	0151      	lsls	r1, r2, #5
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	440a      	add	r2, r1
 800b87c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b884:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b8b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	011b      	lsls	r3, r3, #4
 800b8c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b8c8:	68f9      	ldr	r1, [r7, #12]
 800b8ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8fa:	f023 0303 	bic.w	r3, r3, #3
 800b8fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b90e:	f023 0302 	bic.w	r3, r3, #2
 800b912:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b93c:	f023 0303 	bic.w	r3, r3, #3
 800b940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b950:	f043 0302 	orr.w	r3, r3, #2
 800b954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	4013      	ands	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b97c:	68fb      	ldr	r3, [r7, #12]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b085      	sub	sp, #20
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a6:	69db      	ldr	r3, [r3, #28]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	0c1b      	lsrs	r3, r3, #16
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b085      	sub	sp, #20
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	4013      	ands	r3, r2
 800b9e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	b29b      	uxth	r3, r3
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b085      	sub	sp, #20
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba02:	78fb      	ldrb	r3, [r7, #3]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba20:	68bb      	ldr	r3, [r7, #8]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b087      	sub	sp, #28
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba52:	78fb      	ldrb	r3, [r7, #3]
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5e:	01db      	lsls	r3, r3, #7
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	4013      	ands	r3, r2
 800ba7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	371c      	adds	r7, #28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b083      	sub	sp, #12
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	f003 0301 	and.w	r3, r3, #1
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
	...

0800baa8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac2:	4619      	mov	r1, r3
 800bac4:	4b09      	ldr	r3, [pc, #36]	; (800baec <USB_ActivateSetup+0x44>)
 800bac6:	4013      	ands	r3, r2
 800bac8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800badc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	fffff800 	.word	0xfffff800

0800baf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	460b      	mov	r3, r1
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	333c      	adds	r3, #60	; 0x3c
 800bb06:	3304      	adds	r3, #4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	4a26      	ldr	r2, [pc, #152]	; (800bba8 <USB_EP0_OutStart+0xb8>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d90a      	bls.n	800bb2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb24:	d101      	bne.n	800bb2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	e037      	b.n	800bb9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb30:	461a      	mov	r2, r3
 800bb32:	2300      	movs	r3, #0
 800bb34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb58:	f043 0318 	orr.w	r3, r3, #24
 800bb5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bb70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb72:	7afb      	ldrb	r3, [r7, #11]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d10f      	bne.n	800bb98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7e:	461a      	mov	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bb96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	371c      	adds	r7, #28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	4f54300a 	.word	0x4f54300a

0800bbac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4a13      	ldr	r2, [pc, #76]	; (800bc10 <USB_CoreReset+0x64>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d901      	bls.n	800bbca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e01b      	b.n	800bc02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	daf2      	bge.n	800bbb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	f043 0201 	orr.w	r2, r3, #1
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <USB_CoreReset+0x64>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d901      	bls.n	800bbf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e006      	b.n	800bc02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d0f0      	beq.n	800bbe2 <USB_CoreReset+0x36>

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	00030d40 	.word	0x00030d40

0800bc14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc24:	f002 fc94 	bl	800e550 <USBD_static_malloc>
 800bc28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d109      	bne.n	800bc44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	32b0      	adds	r2, #176	; 0xb0
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bc40:	2302      	movs	r3, #2
 800bc42:	e0d4      	b.n	800bdee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bc44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bc48:	2100      	movs	r1, #0
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f002 fce8 	bl	800e620 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	32b0      	adds	r2, #176	; 0xb0
 800bc5a:	68f9      	ldr	r1, [r7, #12]
 800bc5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	32b0      	adds	r2, #176	; 0xb0
 800bc6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	7c1b      	ldrb	r3, [r3, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d138      	bne.n	800bcee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc7c:	4b5e      	ldr	r3, [pc, #376]	; (800bdf8 <USBD_CDC_Init+0x1e4>)
 800bc7e:	7819      	ldrb	r1, [r3, #0]
 800bc80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc84:	2202      	movs	r2, #2
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f002 fb3f 	bl	800e30a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc8c:	4b5a      	ldr	r3, [pc, #360]	; (800bdf8 <USBD_CDC_Init+0x1e4>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	f003 020f 	and.w	r2, r3, #15
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	3324      	adds	r3, #36	; 0x24
 800bca2:	2201      	movs	r2, #1
 800bca4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bca6:	4b55      	ldr	r3, [pc, #340]	; (800bdfc <USBD_CDC_Init+0x1e8>)
 800bca8:	7819      	ldrb	r1, [r3, #0]
 800bcaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcae:	2202      	movs	r2, #2
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f002 fb2a 	bl	800e30a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bcb6:	4b51      	ldr	r3, [pc, #324]	; (800bdfc <USBD_CDC_Init+0x1e8>)
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	f003 020f 	and.w	r2, r3, #15
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	440b      	add	r3, r1
 800bcca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bcce:	2201      	movs	r2, #1
 800bcd0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bcd2:	4b4b      	ldr	r3, [pc, #300]	; (800be00 <USBD_CDC_Init+0x1ec>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	f003 020f 	and.w	r2, r3, #15
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	440b      	add	r3, r1
 800bce6:	3326      	adds	r3, #38	; 0x26
 800bce8:	2210      	movs	r2, #16
 800bcea:	801a      	strh	r2, [r3, #0]
 800bcec:	e035      	b.n	800bd5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bcee:	4b42      	ldr	r3, [pc, #264]	; (800bdf8 <USBD_CDC_Init+0x1e4>)
 800bcf0:	7819      	ldrb	r1, [r3, #0]
 800bcf2:	2340      	movs	r3, #64	; 0x40
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f002 fb07 	bl	800e30a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bcfc:	4b3e      	ldr	r3, [pc, #248]	; (800bdf8 <USBD_CDC_Init+0x1e4>)
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	f003 020f 	and.w	r2, r3, #15
 800bd04:	6879      	ldr	r1, [r7, #4]
 800bd06:	4613      	mov	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	440b      	add	r3, r1
 800bd10:	3324      	adds	r3, #36	; 0x24
 800bd12:	2201      	movs	r2, #1
 800bd14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd16:	4b39      	ldr	r3, [pc, #228]	; (800bdfc <USBD_CDC_Init+0x1e8>)
 800bd18:	7819      	ldrb	r1, [r3, #0]
 800bd1a:	2340      	movs	r3, #64	; 0x40
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f002 faf3 	bl	800e30a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd24:	4b35      	ldr	r3, [pc, #212]	; (800bdfc <USBD_CDC_Init+0x1e8>)
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	f003 020f 	and.w	r2, r3, #15
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd40:	4b2f      	ldr	r3, [pc, #188]	; (800be00 <USBD_CDC_Init+0x1ec>)
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	f003 020f 	and.w	r2, r3, #15
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	440b      	add	r3, r1
 800bd54:	3326      	adds	r3, #38	; 0x26
 800bd56:	2210      	movs	r2, #16
 800bd58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd5a:	4b29      	ldr	r3, [pc, #164]	; (800be00 <USBD_CDC_Init+0x1ec>)
 800bd5c:	7819      	ldrb	r1, [r3, #0]
 800bd5e:	2308      	movs	r3, #8
 800bd60:	2203      	movs	r2, #3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f002 fad1 	bl	800e30a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bd68:	4b25      	ldr	r3, [pc, #148]	; (800be00 <USBD_CDC_Init+0x1ec>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	f003 020f 	and.w	r2, r3, #15
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3324      	adds	r3, #36	; 0x24
 800bd7e:	2201      	movs	r2, #1
 800bd80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	33b0      	adds	r3, #176	; 0xb0
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bdb8:	2302      	movs	r3, #2
 800bdba:	e018      	b.n	800bdee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	7c1b      	ldrb	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bdc4:	4b0d      	ldr	r3, [pc, #52]	; (800bdfc <USBD_CDC_Init+0x1e8>)
 800bdc6:	7819      	ldrb	r1, [r3, #0]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f002 fb88 	bl	800e4e8 <USBD_LL_PrepareReceive>
 800bdd8:	e008      	b.n	800bdec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bdda:	4b08      	ldr	r3, [pc, #32]	; (800bdfc <USBD_CDC_Init+0x1e8>)
 800bddc:	7819      	ldrb	r1, [r3, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bde4:	2340      	movs	r3, #64	; 0x40
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f002 fb7e 	bl	800e4e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	24000097 	.word	0x24000097
 800bdfc:	24000098 	.word	0x24000098
 800be00:	24000099 	.word	0x24000099

0800be04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800be10:	4b3a      	ldr	r3, [pc, #232]	; (800befc <USBD_CDC_DeInit+0xf8>)
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f002 fa9d 	bl	800e356 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be1c:	4b37      	ldr	r3, [pc, #220]	; (800befc <USBD_CDC_DeInit+0xf8>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 020f 	and.w	r2, r3, #15
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	4613      	mov	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	440b      	add	r3, r1
 800be30:	3324      	adds	r3, #36	; 0x24
 800be32:	2200      	movs	r2, #0
 800be34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800be36:	4b32      	ldr	r3, [pc, #200]	; (800bf00 <USBD_CDC_DeInit+0xfc>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f002 fa8a 	bl	800e356 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800be42:	4b2f      	ldr	r3, [pc, #188]	; (800bf00 <USBD_CDC_DeInit+0xfc>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	f003 020f 	and.w	r2, r3, #15
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4613      	mov	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be5a:	2200      	movs	r2, #0
 800be5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800be5e:	4b29      	ldr	r3, [pc, #164]	; (800bf04 <USBD_CDC_DeInit+0x100>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f002 fa76 	bl	800e356 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800be6a:	4b26      	ldr	r3, [pc, #152]	; (800bf04 <USBD_CDC_DeInit+0x100>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f003 020f 	and.w	r2, r3, #15
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	4613      	mov	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	440b      	add	r3, r1
 800be7e:	3324      	adds	r3, #36	; 0x24
 800be80:	2200      	movs	r2, #0
 800be82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800be84:	4b1f      	ldr	r3, [pc, #124]	; (800bf04 <USBD_CDC_DeInit+0x100>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	f003 020f 	and.w	r2, r3, #15
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	4613      	mov	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	3326      	adds	r3, #38	; 0x26
 800be9a:	2200      	movs	r2, #0
 800be9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	32b0      	adds	r2, #176	; 0xb0
 800bea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01f      	beq.n	800bef0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	33b0      	adds	r3, #176	; 0xb0
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	32b0      	adds	r2, #176	; 0xb0
 800bece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f002 fb4a 	bl	800e56c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	32b0      	adds	r2, #176	; 0xb0
 800bee2:	2100      	movs	r1, #0
 800bee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	24000097 	.word	0x24000097
 800bf00:	24000098 	.word	0x24000098
 800bf04:	24000099 	.word	0x24000099

0800bf08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	32b0      	adds	r2, #176	; 0xb0
 800bf1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bf34:	2303      	movs	r3, #3
 800bf36:	e0bf      	b.n	800c0b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d050      	beq.n	800bfe6 <USBD_CDC_Setup+0xde>
 800bf44:	2b20      	cmp	r3, #32
 800bf46:	f040 80af 	bne.w	800c0a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	88db      	ldrh	r3, [r3, #6]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d03a      	beq.n	800bfc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	b25b      	sxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da1b      	bge.n	800bf94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	33b0      	adds	r3, #176	; 0xb0
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bf72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	88d2      	ldrh	r2, [r2, #6]
 800bf78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	88db      	ldrh	r3, [r3, #6]
 800bf7e:	2b07      	cmp	r3, #7
 800bf80:	bf28      	it	cs
 800bf82:	2307      	movcs	r3, #7
 800bf84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	89fa      	ldrh	r2, [r7, #14]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f001 fd89 	bl	800daa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bf92:	e090      	b.n	800c0b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	785a      	ldrb	r2, [r3, #1]
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	88db      	ldrh	r3, [r3, #6]
 800bfa2:	2b3f      	cmp	r3, #63	; 0x3f
 800bfa4:	d803      	bhi.n	800bfae <USBD_CDC_Setup+0xa6>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	88db      	ldrh	r3, [r3, #6]
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	e000      	b.n	800bfb0 <USBD_CDC_Setup+0xa8>
 800bfae:	2240      	movs	r2, #64	; 0x40
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bfb6:	6939      	ldr	r1, [r7, #16]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f001 fd9b 	bl	800dafc <USBD_CtlPrepareRx>
      break;
 800bfc6:	e076      	b.n	800c0b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	33b0      	adds	r3, #176	; 0xb0
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	7850      	ldrb	r0, [r2, #1]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	4798      	blx	r3
      break;
 800bfe4:	e067      	b.n	800c0b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	2b0b      	cmp	r3, #11
 800bfec:	d851      	bhi.n	800c092 <USBD_CDC_Setup+0x18a>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <USBD_CDC_Setup+0xec>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c025 	.word	0x0800c025
 800bff8:	0800c0a1 	.word	0x0800c0a1
 800bffc:	0800c093 	.word	0x0800c093
 800c000:	0800c093 	.word	0x0800c093
 800c004:	0800c093 	.word	0x0800c093
 800c008:	0800c093 	.word	0x0800c093
 800c00c:	0800c093 	.word	0x0800c093
 800c010:	0800c093 	.word	0x0800c093
 800c014:	0800c093 	.word	0x0800c093
 800c018:	0800c093 	.word	0x0800c093
 800c01c:	0800c04f 	.word	0x0800c04f
 800c020:	0800c079 	.word	0x0800c079
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d107      	bne.n	800c040 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c030:	f107 030a 	add.w	r3, r7, #10
 800c034:	2202      	movs	r2, #2
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 fd33 	bl	800daa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c03e:	e032      	b.n	800c0a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f001 fcbd 	bl	800d9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c048:	2303      	movs	r3, #3
 800c04a:	75fb      	strb	r3, [r7, #23]
          break;
 800c04c:	e02b      	b.n	800c0a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b03      	cmp	r3, #3
 800c058:	d107      	bne.n	800c06a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c05a:	f107 030d 	add.w	r3, r7, #13
 800c05e:	2201      	movs	r2, #1
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f001 fd1e 	bl	800daa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c068:	e01d      	b.n	800c0a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f001 fca8 	bl	800d9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c072:	2303      	movs	r3, #3
 800c074:	75fb      	strb	r3, [r7, #23]
          break;
 800c076:	e016      	b.n	800c0a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b03      	cmp	r3, #3
 800c082:	d00f      	beq.n	800c0a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f001 fc9b 	bl	800d9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c08c:	2303      	movs	r3, #3
 800c08e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c090:	e008      	b.n	800c0a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 fc94 	bl	800d9c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c09a:	2303      	movs	r3, #3
 800c09c:	75fb      	strb	r3, [r7, #23]
          break;
 800c09e:	e002      	b.n	800c0a6 <USBD_CDC_Setup+0x19e>
          break;
 800c0a0:	bf00      	nop
 800c0a2:	e008      	b.n	800c0b6 <USBD_CDC_Setup+0x1ae>
          break;
 800c0a4:	bf00      	nop
      }
      break;
 800c0a6:	e006      	b.n	800c0b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 fc89 	bl	800d9c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	32b0      	adds	r2, #176	; 0xb0
 800c0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e065      	b.n	800c1b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	32b0      	adds	r2, #176	; 0xb0
 800c0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c0fa:	78fb      	ldrb	r3, [r7, #3]
 800c0fc:	f003 020f 	and.w	r2, r3, #15
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	440b      	add	r3, r1
 800c10c:	3318      	adds	r3, #24
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d02f      	beq.n	800c174 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	f003 020f 	and.w	r2, r3, #15
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	4613      	mov	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	440b      	add	r3, r1
 800c126:	3318      	adds	r3, #24
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	78fb      	ldrb	r3, [r7, #3]
 800c12c:	f003 010f 	and.w	r1, r3, #15
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	460b      	mov	r3, r1
 800c134:	00db      	lsls	r3, r3, #3
 800c136:	440b      	add	r3, r1
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4403      	add	r3, r0
 800c13c:	3344      	adds	r3, #68	; 0x44
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	fbb2 f1f3 	udiv	r1, r2, r3
 800c144:	fb01 f303 	mul.w	r3, r1, r3
 800c148:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d112      	bne.n	800c174 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c14e:	78fb      	ldrb	r3, [r7, #3]
 800c150:	f003 020f 	and.w	r2, r3, #15
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	4613      	mov	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	440b      	add	r3, r1
 800c160:	3318      	adds	r3, #24
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c166:	78f9      	ldrb	r1, [r7, #3]
 800c168:	2300      	movs	r3, #0
 800c16a:	2200      	movs	r2, #0
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f002 f99a 	bl	800e4a6 <USBD_LL_Transmit>
 800c172:	e01f      	b.n	800c1b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2200      	movs	r2, #0
 800c178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	33b0      	adds	r3, #176	; 0xb0
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d010      	beq.n	800c1b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	33b0      	adds	r3, #176	; 0xb0
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c1b0:	78fa      	ldrb	r2, [r7, #3]
 800c1b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b084      	sub	sp, #16
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	32b0      	adds	r2, #176	; 0xb0
 800c1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	32b0      	adds	r2, #176	; 0xb0
 800c1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e01a      	b.n	800c226 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f002 f998 	bl	800e52a <USBD_LL_GetRxDataSize>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	33b0      	adds	r3, #176	; 0xb0
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c220:	4611      	mov	r1, r2
 800c222:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b084      	sub	sp, #16
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	32b0      	adds	r2, #176	; 0xb0
 800c240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c244:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e025      	b.n	800c29c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	33b0      	adds	r3, #176	; 0xb0
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01a      	beq.n	800c29a <USBD_CDC_EP0_RxReady+0x6c>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c26a:	2bff      	cmp	r3, #255	; 0xff
 800c26c:	d015      	beq.n	800c29a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	33b0      	adds	r3, #176	; 0xb0
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c286:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c28e:	b292      	uxth	r2, r2
 800c290:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	22ff      	movs	r2, #255	; 0xff
 800c296:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2ac:	2182      	movs	r1, #130	; 0x82
 800c2ae:	4818      	ldr	r0, [pc, #96]	; (800c310 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2b0:	f000 fd4f 	bl	800cd52 <USBD_GetEpDesc>
 800c2b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	4815      	ldr	r0, [pc, #84]	; (800c310 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2ba:	f000 fd4a 	bl	800cd52 <USBD_GetEpDesc>
 800c2be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2c0:	2181      	movs	r1, #129	; 0x81
 800c2c2:	4813      	ldr	r0, [pc, #76]	; (800c310 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2c4:	f000 fd45 	bl	800cd52 <USBD_GetEpDesc>
 800c2c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	2210      	movs	r2, #16
 800c2d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d006      	beq.n	800c2ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2e4:	711a      	strb	r2, [r3, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d006      	beq.n	800c2fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2f8:	711a      	strb	r2, [r3, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2243      	movs	r2, #67	; 0x43
 800c302:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c304:	4b02      	ldr	r3, [pc, #8]	; (800c310 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c306:	4618      	mov	r0, r3
 800c308:	3718      	adds	r7, #24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	24000054 	.word	0x24000054

0800c314 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c31c:	2182      	movs	r1, #130	; 0x82
 800c31e:	4818      	ldr	r0, [pc, #96]	; (800c380 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c320:	f000 fd17 	bl	800cd52 <USBD_GetEpDesc>
 800c324:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c326:	2101      	movs	r1, #1
 800c328:	4815      	ldr	r0, [pc, #84]	; (800c380 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c32a:	f000 fd12 	bl	800cd52 <USBD_GetEpDesc>
 800c32e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c330:	2181      	movs	r1, #129	; 0x81
 800c332:	4813      	ldr	r0, [pc, #76]	; (800c380 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c334:	f000 fd0d 	bl	800cd52 <USBD_GetEpDesc>
 800c338:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2210      	movs	r2, #16
 800c344:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d006      	beq.n	800c35a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	2200      	movs	r2, #0
 800c350:	711a      	strb	r2, [r3, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	f042 0202 	orr.w	r2, r2, #2
 800c358:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d006      	beq.n	800c36e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	711a      	strb	r2, [r3, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f042 0202 	orr.w	r2, r2, #2
 800c36c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2243      	movs	r2, #67	; 0x43
 800c372:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c374:	4b02      	ldr	r3, [pc, #8]	; (800c380 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c376:	4618      	mov	r0, r3
 800c378:	3718      	adds	r7, #24
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	24000054 	.word	0x24000054

0800c384 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c38c:	2182      	movs	r1, #130	; 0x82
 800c38e:	4818      	ldr	r0, [pc, #96]	; (800c3f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c390:	f000 fcdf 	bl	800cd52 <USBD_GetEpDesc>
 800c394:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c396:	2101      	movs	r1, #1
 800c398:	4815      	ldr	r0, [pc, #84]	; (800c3f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c39a:	f000 fcda 	bl	800cd52 <USBD_GetEpDesc>
 800c39e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3a0:	2181      	movs	r1, #129	; 0x81
 800c3a2:	4813      	ldr	r0, [pc, #76]	; (800c3f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3a4:	f000 fcd5 	bl	800cd52 <USBD_GetEpDesc>
 800c3a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	2210      	movs	r2, #16
 800c3b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d006      	beq.n	800c3ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3c4:	711a      	strb	r2, [r3, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d006      	beq.n	800c3de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3d8:	711a      	strb	r2, [r3, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2243      	movs	r2, #67	; 0x43
 800c3e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3e4:	4b02      	ldr	r3, [pc, #8]	; (800c3f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	24000054 	.word	0x24000054

0800c3f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	220a      	movs	r2, #10
 800c400:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c402:	4b03      	ldr	r3, [pc, #12]	; (800c410 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	24000010 	.word	0x24000010

0800c414 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d101      	bne.n	800c428 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c424:	2303      	movs	r3, #3
 800c426:	e009      	b.n	800c43c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	33b0      	adds	r3, #176	; 0xb0
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4413      	add	r3, r2
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c448:	b480      	push	{r7}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	32b0      	adds	r2, #176	; 0xb0
 800c45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c462:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e008      	b.n	800c480 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	371c      	adds	r7, #28
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	32b0      	adds	r2, #176	; 0xb0
 800c4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	e004      	b.n	800c4ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3714      	adds	r7, #20
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
	...

0800c4c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	32b0      	adds	r2, #176	; 0xb0
 800c4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e025      	b.n	800c53a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d11f      	bne.n	800c538 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c500:	4b10      	ldr	r3, [pc, #64]	; (800c544 <USBD_CDC_TransmitPacket+0x7c>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	f003 020f 	and.w	r2, r3, #15
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	4613      	mov	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4403      	add	r3, r0
 800c51a:	3318      	adds	r3, #24
 800c51c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c51e:	4b09      	ldr	r3, [pc, #36]	; (800c544 <USBD_CDC_TransmitPacket+0x7c>)
 800c520:	7819      	ldrb	r1, [r3, #0]
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f001 ffb9 	bl	800e4a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c538:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	24000097 	.word	0x24000097

0800c548 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	32b0      	adds	r2, #176	; 0xb0
 800c55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c55e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	32b0      	adds	r2, #176	; 0xb0
 800c56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c572:	2303      	movs	r3, #3
 800c574:	e018      	b.n	800c5a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7c1b      	ldrb	r3, [r3, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c57e:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <USBD_CDC_ReceivePacket+0x68>)
 800c580:	7819      	ldrb	r1, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f001 ffab 	bl	800e4e8 <USBD_LL_PrepareReceive>
 800c592:	e008      	b.n	800c5a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <USBD_CDC_ReceivePacket+0x68>)
 800c596:	7819      	ldrb	r1, [r3, #0]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c59e:	2340      	movs	r3, #64	; 0x40
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f001 ffa1 	bl	800e4e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	24000098 	.word	0x24000098

0800c5b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d101      	bne.n	800c5cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e01f      	b.n	800c60c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	79fa      	ldrb	r2, [r7, #7]
 800c5fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f001 fe15 	bl	800e230 <USBD_LL_Init>
 800c606:	4603      	mov	r3, r0
 800c608:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c61e:	2300      	movs	r3, #0
 800c620:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d101      	bne.n	800c62c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c628:	2303      	movs	r3, #3
 800c62a:	e025      	b.n	800c678 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	32ae      	adds	r2, #174	; 0xae
 800c63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00f      	beq.n	800c668 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	32ae      	adds	r2, #174	; 0xae
 800c652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c658:	f107 020e 	add.w	r2, r7, #14
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
 800c660:	4602      	mov	r2, r0
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c66e:	1c5a      	adds	r2, r3, #1
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f001 fe23 	bl	800e2d4 <USBD_LL_Start>
 800c68e:	4603      	mov	r3, r0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d009      	beq.n	800c6dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	78fa      	ldrb	r2, [r7, #3]
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	4798      	blx	r3
 800c6d8:	4603      	mov	r3, r0
 800c6da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	78fa      	ldrb	r2, [r7, #3]
 800c700:	4611      	mov	r1, r2
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	4798      	blx	r3
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c70c:	2303      	movs	r3, #3
 800c70e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f001 f90e 	bl	800d94e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c740:	461a      	mov	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c74e:	f003 031f 	and.w	r3, r3, #31
 800c752:	2b02      	cmp	r3, #2
 800c754:	d01a      	beq.n	800c78c <USBD_LL_SetupStage+0x72>
 800c756:	2b02      	cmp	r3, #2
 800c758:	d822      	bhi.n	800c7a0 <USBD_LL_SetupStage+0x86>
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d002      	beq.n	800c764 <USBD_LL_SetupStage+0x4a>
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d00a      	beq.n	800c778 <USBD_LL_SetupStage+0x5e>
 800c762:	e01d      	b.n	800c7a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c76a:	4619      	mov	r1, r3
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fb65 	bl	800ce3c <USBD_StdDevReq>
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
      break;
 800c776:	e020      	b.n	800c7ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fbcd 	bl	800cf20 <USBD_StdItfReq>
 800c786:	4603      	mov	r3, r0
 800c788:	73fb      	strb	r3, [r7, #15]
      break;
 800c78a:	e016      	b.n	800c7ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c792:	4619      	mov	r1, r3
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fc2f 	bl	800cff8 <USBD_StdEPReq>
 800c79a:	4603      	mov	r3, r0
 800c79c:	73fb      	strb	r3, [r7, #15]
      break;
 800c79e:	e00c      	b.n	800c7ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f001 fdf0 	bl	800e394 <USBD_LL_StallEP>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b8:	bf00      	nop
  }

  return ret;
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c7d6:	7afb      	ldrb	r3, [r7, #11]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d16e      	bne.n	800c8ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c7e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	f040 8098 	bne.w	800c920 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d913      	bls.n	800c824 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	689a      	ldr	r2, [r3, #8]
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	1ad2      	subs	r2, r2, r3
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	68da      	ldr	r2, [r3, #12]
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	4293      	cmp	r3, r2
 800c814:	bf28      	it	cs
 800c816:	4613      	movcs	r3, r2
 800c818:	461a      	mov	r2, r3
 800c81a:	6879      	ldr	r1, [r7, #4]
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f001 f98a 	bl	800db36 <USBD_CtlContinueRx>
 800c822:	e07d      	b.n	800c920 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c82a:	f003 031f 	and.w	r3, r3, #31
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d014      	beq.n	800c85c <USBD_LL_DataOutStage+0x98>
 800c832:	2b02      	cmp	r3, #2
 800c834:	d81d      	bhi.n	800c872 <USBD_LL_DataOutStage+0xae>
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <USBD_LL_DataOutStage+0x7c>
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d003      	beq.n	800c846 <USBD_LL_DataOutStage+0x82>
 800c83e:	e018      	b.n	800c872 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c840:	2300      	movs	r3, #0
 800c842:	75bb      	strb	r3, [r7, #22]
            break;
 800c844:	e018      	b.n	800c878 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	4619      	mov	r1, r3
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f000 fa64 	bl	800cd1e <USBD_CoreFindIF>
 800c856:	4603      	mov	r3, r0
 800c858:	75bb      	strb	r3, [r7, #22]
            break;
 800c85a:	e00d      	b.n	800c878 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c862:	b2db      	uxtb	r3, r3
 800c864:	4619      	mov	r1, r3
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 fa66 	bl	800cd38 <USBD_CoreFindEP>
 800c86c:	4603      	mov	r3, r0
 800c86e:	75bb      	strb	r3, [r7, #22]
            break;
 800c870:	e002      	b.n	800c878 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	75bb      	strb	r3, [r7, #22]
            break;
 800c876:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c878:	7dbb      	ldrb	r3, [r7, #22]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d119      	bne.n	800c8b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b03      	cmp	r3, #3
 800c888:	d113      	bne.n	800c8b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c88a:	7dba      	ldrb	r2, [r7, #22]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	32ae      	adds	r2, #174	; 0xae
 800c890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00b      	beq.n	800c8b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c89a:	7dba      	ldrb	r2, [r7, #22]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c8a2:	7dba      	ldrb	r2, [r7, #22]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	32ae      	adds	r2, #174	; 0xae
 800c8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f001 f950 	bl	800db58 <USBD_CtlSendStatus>
 800c8b8:	e032      	b.n	800c920 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c8ba:	7afb      	ldrb	r3, [r7, #11]
 800c8bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 fa37 	bl	800cd38 <USBD_CoreFindEP>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8ce:	7dbb      	ldrb	r3, [r7, #22]
 800c8d0:	2bff      	cmp	r3, #255	; 0xff
 800c8d2:	d025      	beq.n	800c920 <USBD_LL_DataOutStage+0x15c>
 800c8d4:	7dbb      	ldrb	r3, [r7, #22]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d122      	bne.n	800c920 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d117      	bne.n	800c916 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c8e6:	7dba      	ldrb	r2, [r7, #22]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	32ae      	adds	r2, #174	; 0xae
 800c8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8f0:	699b      	ldr	r3, [r3, #24]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00f      	beq.n	800c916 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c8f6:	7dba      	ldrb	r2, [r7, #22]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c8fe:	7dba      	ldrb	r2, [r7, #22]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	32ae      	adds	r2, #174	; 0xae
 800c904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	7afa      	ldrb	r2, [r7, #11]
 800c90c:	4611      	mov	r1, r2
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	4798      	blx	r3
 800c912:	4603      	mov	r3, r0
 800c914:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c91c:	7dfb      	ldrb	r3, [r7, #23]
 800c91e:	e000      	b.n	800c922 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b086      	sub	sp, #24
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	460b      	mov	r3, r1
 800c934:	607a      	str	r2, [r7, #4]
 800c936:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c938:	7afb      	ldrb	r3, [r7, #11]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d16f      	bne.n	800ca1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3314      	adds	r3, #20
 800c942:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d15a      	bne.n	800ca04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	689a      	ldr	r2, [r3, #8]
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d914      	bls.n	800c984 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	689a      	ldr	r2, [r3, #8]
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	1ad2      	subs	r2, r2, r3
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	461a      	mov	r2, r3
 800c96e:	6879      	ldr	r1, [r7, #4]
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f001 f8b2 	bl	800dada <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c976:	2300      	movs	r3, #0
 800c978:	2200      	movs	r2, #0
 800c97a:	2100      	movs	r1, #0
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f001 fdb3 	bl	800e4e8 <USBD_LL_PrepareReceive>
 800c982:	e03f      	b.n	800ca04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d11c      	bne.n	800c9ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c998:	429a      	cmp	r2, r3
 800c99a:	d316      	bcc.n	800c9ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d20f      	bcs.n	800c9ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f001 f893 	bl	800dada <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9bc:	2300      	movs	r3, #0
 800c9be:	2200      	movs	r2, #0
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f001 fd90 	bl	800e4e8 <USBD_LL_PrepareReceive>
 800c9c8:	e01c      	b.n	800ca04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d10f      	bne.n	800c9f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d009      	beq.n	800c9f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9f6:	2180      	movs	r1, #128	; 0x80
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f001 fccb 	bl	800e394 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f001 f8bd 	bl	800db7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d03a      	beq.n	800ca84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f7ff fe42 	bl	800c698 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca1c:	e032      	b.n	800ca84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca1e:	7afb      	ldrb	r3, [r7, #11]
 800ca20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	4619      	mov	r1, r3
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f000 f985 	bl	800cd38 <USBD_CoreFindEP>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	2bff      	cmp	r3, #255	; 0xff
 800ca36:	d025      	beq.n	800ca84 <USBD_LL_DataInStage+0x15a>
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d122      	bne.n	800ca84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d11c      	bne.n	800ca84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ca4a:	7dfa      	ldrb	r2, [r7, #23]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	32ae      	adds	r2, #174	; 0xae
 800ca50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d014      	beq.n	800ca84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ca5a:	7dfa      	ldrb	r2, [r7, #23]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ca62:	7dfa      	ldrb	r2, [r7, #23]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	32ae      	adds	r2, #174	; 0xae
 800ca68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	7afa      	ldrb	r2, [r7, #11]
 800ca70:	4611      	mov	r1, r2
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	4798      	blx	r3
 800ca76:	4603      	mov	r3, r0
 800ca78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ca7a:	7dbb      	ldrb	r3, [r7, #22]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ca80:	7dbb      	ldrb	r3, [r7, #22]
 800ca82:	e000      	b.n	800ca86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b084      	sub	sp, #16
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d014      	beq.n	800caf4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00e      	beq.n	800caf4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	6852      	ldr	r2, [r2, #4]
 800cae2:	b2d2      	uxtb	r2, r2
 800cae4:	4611      	mov	r1, r2
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	4798      	blx	r3
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800caf0:	2303      	movs	r3, #3
 800caf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800caf4:	2340      	movs	r3, #64	; 0x40
 800caf6:	2200      	movs	r2, #0
 800caf8:	2100      	movs	r1, #0
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f001 fc05 	bl	800e30a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2240      	movs	r2, #64	; 0x40
 800cb0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb10:	2340      	movs	r3, #64	; 0x40
 800cb12:	2200      	movs	r2, #0
 800cb14:	2180      	movs	r1, #128	; 0x80
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 fbf7 	bl	800e30a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2240      	movs	r2, #64	; 0x40
 800cb26:	621a      	str	r2, [r3, #32]

  return ret;
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b083      	sub	sp, #12
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	78fa      	ldrb	r2, [r7, #3]
 800cb42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b083      	sub	sp, #12
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b04      	cmp	r3, #4
 800cb64:	d006      	beq.n	800cb74 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2204      	movs	r2, #4
 800cb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b083      	sub	sp, #12
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b04      	cmp	r3, #4
 800cb9c:	d106      	bne.n	800cbac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d110      	bne.n	800cbf0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00b      	beq.n	800cbf0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbde:	69db      	ldr	r3, [r3, #28]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d005      	beq.n	800cbf0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbea:	69db      	ldr	r3, [r3, #28]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	460b      	mov	r3, r1
 800cc04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	32ae      	adds	r2, #174	; 0xae
 800cc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e01c      	b.n	800cc56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d115      	bne.n	800cc54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	32ae      	adds	r2, #174	; 0xae
 800cc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc36:	6a1b      	ldr	r3, [r3, #32]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	32ae      	adds	r2, #174	; 0xae
 800cc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	78fa      	ldrb	r2, [r7, #3]
 800cc4e:	4611      	mov	r1, r2
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	460b      	mov	r3, r1
 800cc68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	32ae      	adds	r2, #174	; 0xae
 800cc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	e01c      	b.n	800ccba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d115      	bne.n	800ccb8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	32ae      	adds	r2, #174	; 0xae
 800cc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	32ae      	adds	r2, #174	; 0xae
 800ccaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb0:	78fa      	ldrb	r2, [r7, #3]
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b083      	sub	sp, #12
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00e      	beq.n	800cd14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	6852      	ldr	r2, [r2, #4]
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	4611      	mov	r1, r2
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cd10:	2303      	movs	r3, #3
 800cd12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	460b      	mov	r3, r1
 800cd28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b086      	sub	sp, #24
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	885b      	ldrh	r3, [r3, #2]
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d920      	bls.n	800cdbc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cd82:	e013      	b.n	800cdac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cd84:	f107 030a 	add.w	r3, r7, #10
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6978      	ldr	r0, [r7, #20]
 800cd8c:	f000 f81b 	bl	800cdc6 <USBD_GetNextDesc>
 800cd90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	785b      	ldrb	r3, [r3, #1]
 800cd96:	2b05      	cmp	r3, #5
 800cd98:	d108      	bne.n	800cdac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	789b      	ldrb	r3, [r3, #2]
 800cda2:	78fa      	ldrb	r2, [r7, #3]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d008      	beq.n	800cdba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	885b      	ldrh	r3, [r3, #2]
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	897b      	ldrh	r3, [r7, #10]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d8e5      	bhi.n	800cd84 <USBD_GetEpDesc+0x32>
 800cdb8:	e000      	b.n	800cdbc <USBD_GetEpDesc+0x6a>
          break;
 800cdba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cdbc:	693b      	ldr	r3, [r7, #16]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b085      	sub	sp, #20
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	881a      	ldrh	r2, [r3, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	4413      	add	r3, r2
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4413      	add	r3, r2
 800cdf0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b087      	sub	sp, #28
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	3301      	adds	r3, #1
 800ce16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce1e:	8a3b      	ldrh	r3, [r7, #16]
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	b21a      	sxth	r2, r3
 800ce24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	b21b      	sxth	r3, r3
 800ce2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ce2e:	89fb      	ldrh	r3, [r7, #14]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	371c      	adds	r7, #28
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce52:	2b40      	cmp	r3, #64	; 0x40
 800ce54:	d005      	beq.n	800ce62 <USBD_StdDevReq+0x26>
 800ce56:	2b40      	cmp	r3, #64	; 0x40
 800ce58:	d857      	bhi.n	800cf0a <USBD_StdDevReq+0xce>
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00f      	beq.n	800ce7e <USBD_StdDevReq+0x42>
 800ce5e:	2b20      	cmp	r3, #32
 800ce60:	d153      	bne.n	800cf0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	32ae      	adds	r2, #174	; 0xae
 800ce6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	4798      	blx	r3
 800ce78:	4603      	mov	r3, r0
 800ce7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce7c:	e04a      	b.n	800cf14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	785b      	ldrb	r3, [r3, #1]
 800ce82:	2b09      	cmp	r3, #9
 800ce84:	d83b      	bhi.n	800cefe <USBD_StdDevReq+0xc2>
 800ce86:	a201      	add	r2, pc, #4	; (adr r2, 800ce8c <USBD_StdDevReq+0x50>)
 800ce88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8c:	0800cee1 	.word	0x0800cee1
 800ce90:	0800cef5 	.word	0x0800cef5
 800ce94:	0800ceff 	.word	0x0800ceff
 800ce98:	0800ceeb 	.word	0x0800ceeb
 800ce9c:	0800ceff 	.word	0x0800ceff
 800cea0:	0800cebf 	.word	0x0800cebf
 800cea4:	0800ceb5 	.word	0x0800ceb5
 800cea8:	0800ceff 	.word	0x0800ceff
 800ceac:	0800ced7 	.word	0x0800ced7
 800ceb0:	0800cec9 	.word	0x0800cec9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ceb4:	6839      	ldr	r1, [r7, #0]
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 fa3c 	bl	800d334 <USBD_GetDescriptor>
          break;
 800cebc:	e024      	b.n	800cf08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fba1 	bl	800d608 <USBD_SetAddress>
          break;
 800cec6:	e01f      	b.n	800cf08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fbe0 	bl	800d690 <USBD_SetConfig>
 800ced0:	4603      	mov	r3, r0
 800ced2:	73fb      	strb	r3, [r7, #15]
          break;
 800ced4:	e018      	b.n	800cf08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 fc83 	bl	800d7e4 <USBD_GetConfig>
          break;
 800cede:	e013      	b.n	800cf08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fcb4 	bl	800d850 <USBD_GetStatus>
          break;
 800cee8:	e00e      	b.n	800cf08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fce3 	bl	800d8b8 <USBD_SetFeature>
          break;
 800cef2:	e009      	b.n	800cf08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fd07 	bl	800d90a <USBD_ClrFeature>
          break;
 800cefc:	e004      	b.n	800cf08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fd5e 	bl	800d9c2 <USBD_CtlError>
          break;
 800cf06:	bf00      	nop
      }
      break;
 800cf08:	e004      	b.n	800cf14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf0a:	6839      	ldr	r1, [r7, #0]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 fd58 	bl	800d9c2 <USBD_CtlError>
      break;
 800cf12:	bf00      	nop
  }

  return ret;
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop

0800cf20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf36:	2b40      	cmp	r3, #64	; 0x40
 800cf38:	d005      	beq.n	800cf46 <USBD_StdItfReq+0x26>
 800cf3a:	2b40      	cmp	r3, #64	; 0x40
 800cf3c:	d852      	bhi.n	800cfe4 <USBD_StdItfReq+0xc4>
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <USBD_StdItfReq+0x26>
 800cf42:	2b20      	cmp	r3, #32
 800cf44:	d14e      	bne.n	800cfe4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d840      	bhi.n	800cfd6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	889b      	ldrh	r3, [r3, #4]
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d836      	bhi.n	800cfcc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	889b      	ldrh	r3, [r3, #4]
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7ff fed9 	bl	800cd1e <USBD_CoreFindIF>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	2bff      	cmp	r3, #255	; 0xff
 800cf74:	d01d      	beq.n	800cfb2 <USBD_StdItfReq+0x92>
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d11a      	bne.n	800cfb2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cf7c:	7bba      	ldrb	r2, [r7, #14]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	32ae      	adds	r2, #174	; 0xae
 800cf82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00f      	beq.n	800cfac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cf8c:	7bba      	ldrb	r2, [r7, #14]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf94:	7bba      	ldrb	r2, [r7, #14]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	32ae      	adds	r2, #174	; 0xae
 800cf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	4798      	blx	r3
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfaa:	e004      	b.n	800cfb6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cfac:	2303      	movs	r3, #3
 800cfae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfb0:	e001      	b.n	800cfb6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	88db      	ldrh	r3, [r3, #6]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d110      	bne.n	800cfe0 <USBD_StdItfReq+0xc0>
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10d      	bne.n	800cfe0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fdc7 	bl	800db58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cfca:	e009      	b.n	800cfe0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fcf7 	bl	800d9c2 <USBD_CtlError>
          break;
 800cfd4:	e004      	b.n	800cfe0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fcf2 	bl	800d9c2 <USBD_CtlError>
          break;
 800cfde:	e000      	b.n	800cfe2 <USBD_StdItfReq+0xc2>
          break;
 800cfe0:	bf00      	nop
      }
      break;
 800cfe2:	e004      	b.n	800cfee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fceb 	bl	800d9c2 <USBD_CtlError>
      break;
 800cfec:	bf00      	nop
  }

  return ret;
 800cfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	889b      	ldrh	r3, [r3, #4]
 800d00a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d014:	2b40      	cmp	r3, #64	; 0x40
 800d016:	d007      	beq.n	800d028 <USBD_StdEPReq+0x30>
 800d018:	2b40      	cmp	r3, #64	; 0x40
 800d01a:	f200 817f 	bhi.w	800d31c <USBD_StdEPReq+0x324>
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d02a      	beq.n	800d078 <USBD_StdEPReq+0x80>
 800d022:	2b20      	cmp	r3, #32
 800d024:	f040 817a 	bne.w	800d31c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d028:	7bbb      	ldrb	r3, [r7, #14]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff fe83 	bl	800cd38 <USBD_CoreFindEP>
 800d032:	4603      	mov	r3, r0
 800d034:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d036:	7b7b      	ldrb	r3, [r7, #13]
 800d038:	2bff      	cmp	r3, #255	; 0xff
 800d03a:	f000 8174 	beq.w	800d326 <USBD_StdEPReq+0x32e>
 800d03e:	7b7b      	ldrb	r3, [r7, #13]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f040 8170 	bne.w	800d326 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d046:	7b7a      	ldrb	r2, [r7, #13]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d04e:	7b7a      	ldrb	r2, [r7, #13]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	32ae      	adds	r2, #174	; 0xae
 800d054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 8163 	beq.w	800d326 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d060:	7b7a      	ldrb	r2, [r7, #13]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	32ae      	adds	r2, #174	; 0xae
 800d066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	4798      	blx	r3
 800d072:	4603      	mov	r3, r0
 800d074:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d076:	e156      	b.n	800d326 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	785b      	ldrb	r3, [r3, #1]
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d008      	beq.n	800d092 <USBD_StdEPReq+0x9a>
 800d080:	2b03      	cmp	r3, #3
 800d082:	f300 8145 	bgt.w	800d310 <USBD_StdEPReq+0x318>
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 809b 	beq.w	800d1c2 <USBD_StdEPReq+0x1ca>
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d03c      	beq.n	800d10a <USBD_StdEPReq+0x112>
 800d090:	e13e      	b.n	800d310 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d002      	beq.n	800d0a4 <USBD_StdEPReq+0xac>
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d016      	beq.n	800d0d0 <USBD_StdEPReq+0xd8>
 800d0a2:	e02c      	b.n	800d0fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0a4:	7bbb      	ldrb	r3, [r7, #14]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00d      	beq.n	800d0c6 <USBD_StdEPReq+0xce>
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
 800d0ac:	2b80      	cmp	r3, #128	; 0x80
 800d0ae:	d00a      	beq.n	800d0c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0b0:	7bbb      	ldrb	r3, [r7, #14]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f001 f96d 	bl	800e394 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0ba:	2180      	movs	r1, #128	; 0x80
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f001 f969 	bl	800e394 <USBD_LL_StallEP>
 800d0c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0c4:	e020      	b.n	800d108 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fc7a 	bl	800d9c2 <USBD_CtlError>
              break;
 800d0ce:	e01b      	b.n	800d108 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	885b      	ldrh	r3, [r3, #2]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10e      	bne.n	800d0f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d0d8:	7bbb      	ldrb	r3, [r7, #14]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00b      	beq.n	800d0f6 <USBD_StdEPReq+0xfe>
 800d0de:	7bbb      	ldrb	r3, [r7, #14]
 800d0e0:	2b80      	cmp	r3, #128	; 0x80
 800d0e2:	d008      	beq.n	800d0f6 <USBD_StdEPReq+0xfe>
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	88db      	ldrh	r3, [r3, #6]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d104      	bne.n	800d0f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0ec:	7bbb      	ldrb	r3, [r7, #14]
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 f94f 	bl	800e394 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fd2e 	bl	800db58 <USBD_CtlSendStatus>

              break;
 800d0fc:	e004      	b.n	800d108 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fc5e 	bl	800d9c2 <USBD_CtlError>
              break;
 800d106:	bf00      	nop
          }
          break;
 800d108:	e107      	b.n	800d31a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d110:	b2db      	uxtb	r3, r3
 800d112:	2b02      	cmp	r3, #2
 800d114:	d002      	beq.n	800d11c <USBD_StdEPReq+0x124>
 800d116:	2b03      	cmp	r3, #3
 800d118:	d016      	beq.n	800d148 <USBD_StdEPReq+0x150>
 800d11a:	e04b      	b.n	800d1b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d11c:	7bbb      	ldrb	r3, [r7, #14]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00d      	beq.n	800d13e <USBD_StdEPReq+0x146>
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	2b80      	cmp	r3, #128	; 0x80
 800d126:	d00a      	beq.n	800d13e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d128:	7bbb      	ldrb	r3, [r7, #14]
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f001 f931 	bl	800e394 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d132:	2180      	movs	r1, #128	; 0x80
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f001 f92d 	bl	800e394 <USBD_LL_StallEP>
 800d13a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d13c:	e040      	b.n	800d1c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 fc3e 	bl	800d9c2 <USBD_CtlError>
              break;
 800d146:	e03b      	b.n	800d1c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	885b      	ldrh	r3, [r3, #2]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d136      	bne.n	800d1be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d150:	7bbb      	ldrb	r3, [r7, #14]
 800d152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d156:	2b00      	cmp	r3, #0
 800d158:	d004      	beq.n	800d164 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f001 f937 	bl	800e3d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fcf7 	bl	800db58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d16a:	7bbb      	ldrb	r3, [r7, #14]
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fde2 	bl	800cd38 <USBD_CoreFindEP>
 800d174:	4603      	mov	r3, r0
 800d176:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d178:	7b7b      	ldrb	r3, [r7, #13]
 800d17a:	2bff      	cmp	r3, #255	; 0xff
 800d17c:	d01f      	beq.n	800d1be <USBD_StdEPReq+0x1c6>
 800d17e:	7b7b      	ldrb	r3, [r7, #13]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d11c      	bne.n	800d1be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d184:	7b7a      	ldrb	r2, [r7, #13]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d18c:	7b7a      	ldrb	r2, [r7, #13]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	32ae      	adds	r2, #174	; 0xae
 800d192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d010      	beq.n	800d1be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d19c:	7b7a      	ldrb	r2, [r7, #13]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	32ae      	adds	r2, #174	; 0xae
 800d1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	4798      	blx	r3
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d1b2:	e004      	b.n	800d1be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fc03 	bl	800d9c2 <USBD_CtlError>
              break;
 800d1bc:	e000      	b.n	800d1c0 <USBD_StdEPReq+0x1c8>
              break;
 800d1be:	bf00      	nop
          }
          break;
 800d1c0:	e0ab      	b.n	800d31a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d002      	beq.n	800d1d4 <USBD_StdEPReq+0x1dc>
 800d1ce:	2b03      	cmp	r3, #3
 800d1d0:	d032      	beq.n	800d238 <USBD_StdEPReq+0x240>
 800d1d2:	e097      	b.n	800d304 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1d4:	7bbb      	ldrb	r3, [r7, #14]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d007      	beq.n	800d1ea <USBD_StdEPReq+0x1f2>
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	2b80      	cmp	r3, #128	; 0x80
 800d1de:	d004      	beq.n	800d1ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fbed 	bl	800d9c2 <USBD_CtlError>
                break;
 800d1e8:	e091      	b.n	800d30e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	da0b      	bge.n	800d20a <USBD_StdEPReq+0x212>
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4413      	add	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	3310      	adds	r3, #16
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	4413      	add	r3, r2
 800d206:	3304      	adds	r3, #4
 800d208:	e00b      	b.n	800d222 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
 800d20c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d210:	4613      	mov	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	4413      	add	r3, r2
 800d220:	3304      	adds	r3, #4
 800d222:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2200      	movs	r2, #0
 800d228:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2202      	movs	r2, #2
 800d22e:	4619      	mov	r1, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 fc37 	bl	800daa4 <USBD_CtlSendData>
              break;
 800d236:	e06a      	b.n	800d30e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	da11      	bge.n	800d264 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d240:	7bbb      	ldrb	r3, [r7, #14]
 800d242:	f003 020f 	and.w	r2, r3, #15
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	4613      	mov	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	440b      	add	r3, r1
 800d252:	3324      	adds	r3, #36	; 0x24
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d117      	bne.n	800d28a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d25a:	6839      	ldr	r1, [r7, #0]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 fbb0 	bl	800d9c2 <USBD_CtlError>
                  break;
 800d262:	e054      	b.n	800d30e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	f003 020f 	and.w	r2, r3, #15
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	440b      	add	r3, r1
 800d276:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d27a:	881b      	ldrh	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d104      	bne.n	800d28a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d280:	6839      	ldr	r1, [r7, #0]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fb9d 	bl	800d9c2 <USBD_CtlError>
                  break;
 800d288:	e041      	b.n	800d30e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d28a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	da0b      	bge.n	800d2aa <USBD_StdEPReq+0x2b2>
 800d292:	7bbb      	ldrb	r3, [r7, #14]
 800d294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d298:	4613      	mov	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	3310      	adds	r3, #16
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	e00b      	b.n	800d2c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2aa:	7bbb      	ldrb	r3, [r7, #14]
 800d2ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	4413      	add	r3, r2
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <USBD_StdEPReq+0x2d8>
 800d2ca:	7bbb      	ldrb	r3, [r7, #14]
 800d2cc:	2b80      	cmp	r3, #128	; 0x80
 800d2ce:	d103      	bne.n	800d2d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	e00e      	b.n	800d2f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f001 f897 	bl	800e410 <USBD_LL_IsStallEP>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	e002      	b.n	800d2f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fbd1 	bl	800daa4 <USBD_CtlSendData>
              break;
 800d302:	e004      	b.n	800d30e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d304:	6839      	ldr	r1, [r7, #0]
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fb5b 	bl	800d9c2 <USBD_CtlError>
              break;
 800d30c:	bf00      	nop
          }
          break;
 800d30e:	e004      	b.n	800d31a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d310:	6839      	ldr	r1, [r7, #0]
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 fb55 	bl	800d9c2 <USBD_CtlError>
          break;
 800d318:	bf00      	nop
      }
      break;
 800d31a:	e005      	b.n	800d328 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fb4f 	bl	800d9c2 <USBD_CtlError>
      break;
 800d324:	e000      	b.n	800d328 <USBD_StdEPReq+0x330>
      break;
 800d326:	bf00      	nop
  }

  return ret;
 800d328:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
	...

0800d334 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d33e:	2300      	movs	r3, #0
 800d340:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d342:	2300      	movs	r3, #0
 800d344:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d346:	2300      	movs	r3, #0
 800d348:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	885b      	ldrh	r3, [r3, #2]
 800d34e:	0a1b      	lsrs	r3, r3, #8
 800d350:	b29b      	uxth	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	2b06      	cmp	r3, #6
 800d356:	f200 8128 	bhi.w	800d5aa <USBD_GetDescriptor+0x276>
 800d35a:	a201      	add	r2, pc, #4	; (adr r2, 800d360 <USBD_GetDescriptor+0x2c>)
 800d35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d360:	0800d37d 	.word	0x0800d37d
 800d364:	0800d395 	.word	0x0800d395
 800d368:	0800d3d5 	.word	0x0800d3d5
 800d36c:	0800d5ab 	.word	0x0800d5ab
 800d370:	0800d5ab 	.word	0x0800d5ab
 800d374:	0800d54b 	.word	0x0800d54b
 800d378:	0800d577 	.word	0x0800d577
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	7c12      	ldrb	r2, [r2, #16]
 800d388:	f107 0108 	add.w	r1, r7, #8
 800d38c:	4610      	mov	r0, r2
 800d38e:	4798      	blx	r3
 800d390:	60f8      	str	r0, [r7, #12]
      break;
 800d392:	e112      	b.n	800d5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7c1b      	ldrb	r3, [r3, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10d      	bne.n	800d3b8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	f107 0208 	add.w	r2, r7, #8
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	4798      	blx	r3
 800d3ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d3b6:	e100      	b.n	800d5ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	f107 0208 	add.w	r2, r7, #8
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	4798      	blx	r3
 800d3c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	701a      	strb	r2, [r3, #0]
      break;
 800d3d2:	e0f2      	b.n	800d5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	885b      	ldrh	r3, [r3, #2]
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b05      	cmp	r3, #5
 800d3dc:	f200 80ac 	bhi.w	800d538 <USBD_GetDescriptor+0x204>
 800d3e0:	a201      	add	r2, pc, #4	; (adr r2, 800d3e8 <USBD_GetDescriptor+0xb4>)
 800d3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e6:	bf00      	nop
 800d3e8:	0800d401 	.word	0x0800d401
 800d3ec:	0800d435 	.word	0x0800d435
 800d3f0:	0800d469 	.word	0x0800d469
 800d3f4:	0800d49d 	.word	0x0800d49d
 800d3f8:	0800d4d1 	.word	0x0800d4d1
 800d3fc:	0800d505 	.word	0x0800d505
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	7c12      	ldrb	r2, [r2, #16]
 800d418:	f107 0108 	add.w	r1, r7, #8
 800d41c:	4610      	mov	r0, r2
 800d41e:	4798      	blx	r3
 800d420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d422:	e091      	b.n	800d548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 facb 	bl	800d9c2 <USBD_CtlError>
            err++;
 800d42c:	7afb      	ldrb	r3, [r7, #11]
 800d42e:	3301      	adds	r3, #1
 800d430:	72fb      	strb	r3, [r7, #11]
          break;
 800d432:	e089      	b.n	800d548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	7c12      	ldrb	r2, [r2, #16]
 800d44c:	f107 0108 	add.w	r1, r7, #8
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
 800d454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d456:	e077      	b.n	800d548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fab1 	bl	800d9c2 <USBD_CtlError>
            err++;
 800d460:	7afb      	ldrb	r3, [r7, #11]
 800d462:	3301      	adds	r3, #1
 800d464:	72fb      	strb	r3, [r7, #11]
          break;
 800d466:	e06f      	b.n	800d548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00b      	beq.n	800d48c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	7c12      	ldrb	r2, [r2, #16]
 800d480:	f107 0108 	add.w	r1, r7, #8
 800d484:	4610      	mov	r0, r2
 800d486:	4798      	blx	r3
 800d488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d48a:	e05d      	b.n	800d548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fa97 	bl	800d9c2 <USBD_CtlError>
            err++;
 800d494:	7afb      	ldrb	r3, [r7, #11]
 800d496:	3301      	adds	r3, #1
 800d498:	72fb      	strb	r3, [r7, #11]
          break;
 800d49a:	e055      	b.n	800d548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00b      	beq.n	800d4c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	7c12      	ldrb	r2, [r2, #16]
 800d4b4:	f107 0108 	add.w	r1, r7, #8
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	4798      	blx	r3
 800d4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4be:	e043      	b.n	800d548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fa7d 	bl	800d9c2 <USBD_CtlError>
            err++;
 800d4c8:	7afb      	ldrb	r3, [r7, #11]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d4ce:	e03b      	b.n	800d548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00b      	beq.n	800d4f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4e2:	695b      	ldr	r3, [r3, #20]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	7c12      	ldrb	r2, [r2, #16]
 800d4e8:	f107 0108 	add.w	r1, r7, #8
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
 800d4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4f2:	e029      	b.n	800d548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fa63 	bl	800d9c2 <USBD_CtlError>
            err++;
 800d4fc:	7afb      	ldrb	r3, [r7, #11]
 800d4fe:	3301      	adds	r3, #1
 800d500:	72fb      	strb	r3, [r7, #11]
          break;
 800d502:	e021      	b.n	800d548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d50a:	699b      	ldr	r3, [r3, #24]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00b      	beq.n	800d528 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	7c12      	ldrb	r2, [r2, #16]
 800d51c:	f107 0108 	add.w	r1, r7, #8
 800d520:	4610      	mov	r0, r2
 800d522:	4798      	blx	r3
 800d524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d526:	e00f      	b.n	800d548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fa49 	bl	800d9c2 <USBD_CtlError>
            err++;
 800d530:	7afb      	ldrb	r3, [r7, #11]
 800d532:	3301      	adds	r3, #1
 800d534:	72fb      	strb	r3, [r7, #11]
          break;
 800d536:	e007      	b.n	800d548 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fa41 	bl	800d9c2 <USBD_CtlError>
          err++;
 800d540:	7afb      	ldrb	r3, [r7, #11]
 800d542:	3301      	adds	r3, #1
 800d544:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d546:	bf00      	nop
      }
      break;
 800d548:	e037      	b.n	800d5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	7c1b      	ldrb	r3, [r3, #16]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d109      	bne.n	800d566 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55a:	f107 0208 	add.w	r2, r7, #8
 800d55e:	4610      	mov	r0, r2
 800d560:	4798      	blx	r3
 800d562:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d564:	e029      	b.n	800d5ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fa2a 	bl	800d9c2 <USBD_CtlError>
        err++;
 800d56e:	7afb      	ldrb	r3, [r7, #11]
 800d570:	3301      	adds	r3, #1
 800d572:	72fb      	strb	r3, [r7, #11]
      break;
 800d574:	e021      	b.n	800d5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	7c1b      	ldrb	r3, [r3, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10d      	bne.n	800d59a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d586:	f107 0208 	add.w	r2, r7, #8
 800d58a:	4610      	mov	r0, r2
 800d58c:	4798      	blx	r3
 800d58e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3301      	adds	r3, #1
 800d594:	2207      	movs	r2, #7
 800d596:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d598:	e00f      	b.n	800d5ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fa10 	bl	800d9c2 <USBD_CtlError>
        err++;
 800d5a2:	7afb      	ldrb	r3, [r7, #11]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d5a8:	e007      	b.n	800d5ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 fa08 	bl	800d9c2 <USBD_CtlError>
      err++;
 800d5b2:	7afb      	ldrb	r3, [r7, #11]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d5b8:	bf00      	nop
  }

  if (err != 0U)
 800d5ba:	7afb      	ldrb	r3, [r7, #11]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d11e      	bne.n	800d5fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	88db      	ldrh	r3, [r3, #6]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d016      	beq.n	800d5f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d5c8:	893b      	ldrh	r3, [r7, #8]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00e      	beq.n	800d5ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	88da      	ldrh	r2, [r3, #6]
 800d5d2:	893b      	ldrh	r3, [r7, #8]
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	bf28      	it	cs
 800d5d8:	4613      	movcs	r3, r2
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d5de:	893b      	ldrh	r3, [r7, #8]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fa5d 	bl	800daa4 <USBD_CtlSendData>
 800d5ea:	e009      	b.n	800d600 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f9e7 	bl	800d9c2 <USBD_CtlError>
 800d5f4:	e004      	b.n	800d600 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 faae 	bl	800db58 <USBD_CtlSendStatus>
 800d5fc:	e000      	b.n	800d600 <USBD_GetDescriptor+0x2cc>
    return;
 800d5fe:	bf00      	nop
  }
}
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop

0800d608 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	889b      	ldrh	r3, [r3, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d131      	bne.n	800d67e <USBD_SetAddress+0x76>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	88db      	ldrh	r3, [r3, #6]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d12d      	bne.n	800d67e <USBD_SetAddress+0x76>
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	885b      	ldrh	r3, [r3, #2]
 800d626:	2b7f      	cmp	r3, #127	; 0x7f
 800d628:	d829      	bhi.n	800d67e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	885b      	ldrh	r3, [r3, #2]
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b03      	cmp	r3, #3
 800d640:	d104      	bne.n	800d64c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d642:	6839      	ldr	r1, [r7, #0]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f9bc 	bl	800d9c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d64a:	e01d      	b.n	800d688 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7bfa      	ldrb	r2, [r7, #15]
 800d650:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 ff05 	bl	800e468 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fa7a 	bl	800db58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d004      	beq.n	800d674 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2202      	movs	r2, #2
 800d66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d672:	e009      	b.n	800d688 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d67c:	e004      	b.n	800d688 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f99e 	bl	800d9c2 <USBD_CtlError>
  }
}
 800d686:	bf00      	nop
 800d688:	bf00      	nop
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	885b      	ldrh	r3, [r3, #2]
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	4b4e      	ldr	r3, [pc, #312]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d6a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d6a8:	4b4d      	ldr	r3, [pc, #308]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d905      	bls.n	800d6bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f985 	bl	800d9c2 <USBD_CtlError>
    return USBD_FAIL;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	e08c      	b.n	800d7d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d002      	beq.n	800d6ce <USBD_SetConfig+0x3e>
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d029      	beq.n	800d720 <USBD_SetConfig+0x90>
 800d6cc:	e075      	b.n	800d7ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d6ce:	4b44      	ldr	r3, [pc, #272]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d020      	beq.n	800d718 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d6d6:	4b42      	ldr	r3, [pc, #264]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6e0:	4b3f      	ldr	r3, [pc, #252]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7fe ffe1 	bl	800c6ae <USBD_SetClassConfig>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d008      	beq.n	800d708 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f962 	bl	800d9c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2202      	movs	r2, #2
 800d702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d706:	e065      	b.n	800d7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fa25 	bl	800db58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2203      	movs	r2, #3
 800d712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d716:	e05d      	b.n	800d7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fa1d 	bl	800db58 <USBD_CtlSendStatus>
      break;
 800d71e:	e059      	b.n	800d7d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d720:	4b2f      	ldr	r3, [pc, #188]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d112      	bne.n	800d74e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2202      	movs	r2, #2
 800d72c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d730:	4b2b      	ldr	r3, [pc, #172]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	461a      	mov	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d73a:	4b29      	ldr	r3, [pc, #164]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7fe ffd0 	bl	800c6e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fa06 	bl	800db58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d74c:	e042      	b.n	800d7d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d74e:	4b24      	ldr	r3, [pc, #144]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d02a      	beq.n	800d7b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	b2db      	uxtb	r3, r3
 800d762:	4619      	mov	r1, r3
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7fe ffbe 	bl	800c6e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d76a:	4b1d      	ldr	r3, [pc, #116]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d774:	4b1a      	ldr	r3, [pc, #104]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7fe ff97 	bl	800c6ae <USBD_SetClassConfig>
 800d780:	4603      	mov	r3, r0
 800d782:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00f      	beq.n	800d7aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d78a:	6839      	ldr	r1, [r7, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f918 	bl	800d9c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	b2db      	uxtb	r3, r3
 800d798:	4619      	mov	r1, r3
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7fe ffa3 	bl	800c6e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d7a8:	e014      	b.n	800d7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f9d4 	bl	800db58 <USBD_CtlSendStatus>
      break;
 800d7b0:	e010      	b.n	800d7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 f9d0 	bl	800db58 <USBD_CtlSendStatus>
      break;
 800d7b8:	e00c      	b.n	800d7d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 f900 	bl	800d9c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7c2:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <USBD_SetConfig+0x150>)
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7fe ff8c 	bl	800c6e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800d7d2:	bf00      	nop
  }

  return ret;
 800d7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	24000238 	.word	0x24000238

0800d7e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	88db      	ldrh	r3, [r3, #6]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d004      	beq.n	800d800 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f8e2 	bl	800d9c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d7fe:	e023      	b.n	800d848 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d806:	b2db      	uxtb	r3, r3
 800d808:	2b02      	cmp	r3, #2
 800d80a:	dc02      	bgt.n	800d812 <USBD_GetConfig+0x2e>
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	dc03      	bgt.n	800d818 <USBD_GetConfig+0x34>
 800d810:	e015      	b.n	800d83e <USBD_GetConfig+0x5a>
 800d812:	2b03      	cmp	r3, #3
 800d814:	d00b      	beq.n	800d82e <USBD_GetConfig+0x4a>
 800d816:	e012      	b.n	800d83e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	3308      	adds	r3, #8
 800d822:	2201      	movs	r2, #1
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f93c 	bl	800daa4 <USBD_CtlSendData>
        break;
 800d82c:	e00c      	b.n	800d848 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	3304      	adds	r3, #4
 800d832:	2201      	movs	r2, #1
 800d834:	4619      	mov	r1, r3
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f934 	bl	800daa4 <USBD_CtlSendData>
        break;
 800d83c:	e004      	b.n	800d848 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d83e:	6839      	ldr	r1, [r7, #0]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f8be 	bl	800d9c2 <USBD_CtlError>
        break;
 800d846:	bf00      	nop
}
 800d848:	bf00      	nop
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d860:	b2db      	uxtb	r3, r3
 800d862:	3b01      	subs	r3, #1
 800d864:	2b02      	cmp	r3, #2
 800d866:	d81e      	bhi.n	800d8a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	88db      	ldrh	r3, [r3, #6]
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d004      	beq.n	800d87a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f8a5 	bl	800d9c2 <USBD_CtlError>
        break;
 800d878:	e01a      	b.n	800d8b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d886:	2b00      	cmp	r3, #0
 800d888:	d005      	beq.n	800d896 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f043 0202 	orr.w	r2, r3, #2
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	330c      	adds	r3, #12
 800d89a:	2202      	movs	r2, #2
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f900 	bl	800daa4 <USBD_CtlSendData>
      break;
 800d8a4:	e004      	b.n	800d8b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d8a6:	6839      	ldr	r1, [r7, #0]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f88a 	bl	800d9c2 <USBD_CtlError>
      break;
 800d8ae:	bf00      	nop
  }
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	885b      	ldrh	r3, [r3, #2]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d107      	bne.n	800d8da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f940 	bl	800db58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d8d8:	e013      	b.n	800d902 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	885b      	ldrh	r3, [r3, #2]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d10b      	bne.n	800d8fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	889b      	ldrh	r3, [r3, #4]
 800d8e6:	0a1b      	lsrs	r3, r3, #8
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f930 	bl	800db58 <USBD_CtlSendStatus>
}
 800d8f8:	e003      	b.n	800d902 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f860 	bl	800d9c2 <USBD_CtlError>
}
 800d902:	bf00      	nop
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	3b01      	subs	r3, #1
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d80b      	bhi.n	800d93a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	885b      	ldrh	r3, [r3, #2]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d10c      	bne.n	800d944 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f910 	bl	800db58 <USBD_CtlSendStatus>
      }
      break;
 800d938:	e004      	b.n	800d944 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f840 	bl	800d9c2 <USBD_CtlError>
      break;
 800d942:	e000      	b.n	800d946 <USBD_ClrFeature+0x3c>
      break;
 800d944:	bf00      	nop
  }
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b084      	sub	sp, #16
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	781a      	ldrb	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	3301      	adds	r3, #1
 800d968:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	781a      	ldrb	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3301      	adds	r3, #1
 800d976:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f7ff fa41 	bl	800ce00 <SWAPBYTE>
 800d97e:	4603      	mov	r3, r0
 800d980:	461a      	mov	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	3301      	adds	r3, #1
 800d98a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3301      	adds	r3, #1
 800d990:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f7ff fa34 	bl	800ce00 <SWAPBYTE>
 800d998:	4603      	mov	r3, r0
 800d99a:	461a      	mov	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f7ff fa27 	bl	800ce00 <SWAPBYTE>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	80da      	strh	r2, [r3, #6]
}
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b082      	sub	sp, #8
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9cc:	2180      	movs	r1, #128	; 0x80
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fce0 	bl	800e394 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 fcdc 	bl	800e394 <USBD_LL_StallEP>
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d036      	beq.n	800da68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d9fe:	6938      	ldr	r0, [r7, #16]
 800da00:	f000 f836 	bl	800da70 <USBD_GetLen>
 800da04:	4603      	mov	r3, r0
 800da06:	3301      	adds	r3, #1
 800da08:	b29b      	uxth	r3, r3
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	b29a      	uxth	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	4413      	add	r3, r2
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	7812      	ldrb	r2, [r2, #0]
 800da1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	3301      	adds	r3, #1
 800da22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	4413      	add	r3, r2
 800da2a:	2203      	movs	r2, #3
 800da2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800da2e:	7dfb      	ldrb	r3, [r7, #23]
 800da30:	3301      	adds	r3, #1
 800da32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da34:	e013      	b.n	800da5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800da36:	7dfb      	ldrb	r3, [r7, #23]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	4413      	add	r3, r2
 800da3c:	693a      	ldr	r2, [r7, #16]
 800da3e:	7812      	ldrb	r2, [r2, #0]
 800da40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	3301      	adds	r3, #1
 800da46:	613b      	str	r3, [r7, #16]
    idx++;
 800da48:	7dfb      	ldrb	r3, [r7, #23]
 800da4a:	3301      	adds	r3, #1
 800da4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	4413      	add	r3, r2
 800da54:	2200      	movs	r2, #0
 800da56:	701a      	strb	r2, [r3, #0]
    idx++;
 800da58:	7dfb      	ldrb	r3, [r7, #23]
 800da5a:	3301      	adds	r3, #1
 800da5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1e7      	bne.n	800da36 <USBD_GetString+0x52>
 800da66:	e000      	b.n	800da6a <USBD_GetString+0x86>
    return;
 800da68:	bf00      	nop
  }
}
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800da78:	2300      	movs	r3, #0
 800da7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800da80:	e005      	b.n	800da8e <USBD_GetLen+0x1e>
  {
    len++;
 800da82:	7bfb      	ldrb	r3, [r7, #15]
 800da84:	3301      	adds	r3, #1
 800da86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	3301      	adds	r3, #1
 800da8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1f5      	bne.n	800da82 <USBD_GetLen+0x12>
  }

  return len;
 800da96:	7bfb      	ldrb	r3, [r7, #15]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3714      	adds	r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2202      	movs	r2, #2
 800dab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	2100      	movs	r1, #0
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f000 fceb 	bl	800e4a6 <USBD_LL_Transmit>

  return USBD_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	2100      	movs	r1, #0
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 fcda 	bl	800e4a6 <USBD_LL_Transmit>

  return USBD_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2203      	movs	r2, #3
 800db0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	2100      	movs	r1, #0
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f000 fcde 	bl	800e4e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	60f8      	str	r0, [r7, #12]
 800db3e:	60b9      	str	r1, [r7, #8]
 800db40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	2100      	movs	r1, #0
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f000 fccd 	bl	800e4e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2204      	movs	r2, #4
 800db64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db68:	2300      	movs	r3, #0
 800db6a:	2200      	movs	r2, #0
 800db6c:	2100      	movs	r1, #0
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fc99 	bl	800e4a6 <USBD_LL_Transmit>

  return USBD_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b082      	sub	sp, #8
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2205      	movs	r2, #5
 800db8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db8e:	2300      	movs	r3, #0
 800db90:	2200      	movs	r2, #0
 800db92:	2100      	movs	r1, #0
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fca7 	bl	800e4e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800dba8:	2201      	movs	r2, #1
 800dbaa:	4913      	ldr	r1, [pc, #76]	; (800dbf8 <MX_USB_DEVICE_Init+0x54>)
 800dbac:	4813      	ldr	r0, [pc, #76]	; (800dbfc <MX_USB_DEVICE_Init+0x58>)
 800dbae:	f7fe fd01 	bl	800c5b4 <USBD_Init>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dbb8:	f7f2 feb2 	bl	8000920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800dbbc:	4910      	ldr	r1, [pc, #64]	; (800dc00 <MX_USB_DEVICE_Init+0x5c>)
 800dbbe:	480f      	ldr	r0, [pc, #60]	; (800dbfc <MX_USB_DEVICE_Init+0x58>)
 800dbc0:	f7fe fd28 	bl	800c614 <USBD_RegisterClass>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dbca:	f7f2 fea9 	bl	8000920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800dbce:	490d      	ldr	r1, [pc, #52]	; (800dc04 <MX_USB_DEVICE_Init+0x60>)
 800dbd0:	480a      	ldr	r0, [pc, #40]	; (800dbfc <MX_USB_DEVICE_Init+0x58>)
 800dbd2:	f7fe fc1f 	bl	800c414 <USBD_CDC_RegisterInterface>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dbdc:	f7f2 fea0 	bl	8000920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800dbe0:	4806      	ldr	r0, [pc, #24]	; (800dbfc <MX_USB_DEVICE_Init+0x58>)
 800dbe2:	f7fe fd4d 	bl	800c680 <USBD_Start>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d001      	beq.n	800dbf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dbec:	f7f2 fe98 	bl	8000920 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800dbf0:	f7f7 fd12 	bl	8005618 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dbf4:	bf00      	nop
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	240000b0 	.word	0x240000b0
 800dbfc:	2400023c 	.word	0x2400023c
 800dc00:	2400001c 	.word	0x2400001c
 800dc04:	2400009c 	.word	0x2400009c

0800dc08 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	4905      	ldr	r1, [pc, #20]	; (800dc24 <CDC_Init_HS+0x1c>)
 800dc10:	4805      	ldr	r0, [pc, #20]	; (800dc28 <CDC_Init_HS+0x20>)
 800dc12:	f7fe fc19 	bl	800c448 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800dc16:	4905      	ldr	r1, [pc, #20]	; (800dc2c <CDC_Init_HS+0x24>)
 800dc18:	4803      	ldr	r0, [pc, #12]	; (800dc28 <CDC_Init_HS+0x20>)
 800dc1a:	f7fe fc37 	bl	800c48c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc1e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	24000520 	.word	0x24000520
 800dc28:	2400023c 	.word	0x2400023c
 800dc2c:	24000518 	.word	0x24000518

0800dc30 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800dc30:	b480      	push	{r7}
 800dc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800dc34:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4603      	mov	r3, r0
 800dc48:	6039      	str	r1, [r7, #0]
 800dc4a:	71fb      	strb	r3, [r7, #7]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800dc50:	79fb      	ldrb	r3, [r7, #7]
 800dc52:	2b23      	cmp	r3, #35	; 0x23
 800dc54:	d84a      	bhi.n	800dcec <CDC_Control_HS+0xac>
 800dc56:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <CDC_Control_HS+0x1c>)
 800dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5c:	0800dced 	.word	0x0800dced
 800dc60:	0800dced 	.word	0x0800dced
 800dc64:	0800dced 	.word	0x0800dced
 800dc68:	0800dced 	.word	0x0800dced
 800dc6c:	0800dced 	.word	0x0800dced
 800dc70:	0800dced 	.word	0x0800dced
 800dc74:	0800dced 	.word	0x0800dced
 800dc78:	0800dced 	.word	0x0800dced
 800dc7c:	0800dced 	.word	0x0800dced
 800dc80:	0800dced 	.word	0x0800dced
 800dc84:	0800dced 	.word	0x0800dced
 800dc88:	0800dced 	.word	0x0800dced
 800dc8c:	0800dced 	.word	0x0800dced
 800dc90:	0800dced 	.word	0x0800dced
 800dc94:	0800dced 	.word	0x0800dced
 800dc98:	0800dced 	.word	0x0800dced
 800dc9c:	0800dced 	.word	0x0800dced
 800dca0:	0800dced 	.word	0x0800dced
 800dca4:	0800dced 	.word	0x0800dced
 800dca8:	0800dced 	.word	0x0800dced
 800dcac:	0800dced 	.word	0x0800dced
 800dcb0:	0800dced 	.word	0x0800dced
 800dcb4:	0800dced 	.word	0x0800dced
 800dcb8:	0800dced 	.word	0x0800dced
 800dcbc:	0800dced 	.word	0x0800dced
 800dcc0:	0800dced 	.word	0x0800dced
 800dcc4:	0800dced 	.word	0x0800dced
 800dcc8:	0800dced 	.word	0x0800dced
 800dccc:	0800dced 	.word	0x0800dced
 800dcd0:	0800dced 	.word	0x0800dced
 800dcd4:	0800dced 	.word	0x0800dced
 800dcd8:	0800dced 	.word	0x0800dced
 800dcdc:	0800dced 	.word	0x0800dced
 800dce0:	0800dced 	.word	0x0800dced
 800dce4:	0800dced 	.word	0x0800dced
 800dce8:	0800dced 	.word	0x0800dced
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dcec:	bf00      	nop
  }

  return (USBD_OK);
 800dcee:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	4807      	ldr	r0, [pc, #28]	; (800dd28 <CDC_Receive_HS+0x2c>)
 800dd0a:	f7fe fbbf 	bl	800c48c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800dd0e:	4806      	ldr	r0, [pc, #24]	; (800dd28 <CDC_Receive_HS+0x2c>)
 800dd10:	f7fe fc1a 	bl	800c548 <USBD_CDC_ReceivePacket>
//You may uncomment this for debug
//CDC_Transmit_HS(Buf, IMU_UART_FRAME_SIZE);
//uint8_t data[] = "H W\n";
//HAL_UART_Transmit_IT(&huart7, Buf, IMU_UART_FRAME_SIZE); */

  HAL_UART_Transmit_IT(&huart7, Buf, APP_RX_DATA_SIZE);   // Transmit the Buffer received via USB over UART (TX)  Note : Compatitiblity with WiTMotion Windows configuration software only works with a buf size of 5
 800dd14:	2205      	movs	r2, #5
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	4804      	ldr	r0, [pc, #16]	; (800dd2c <CDC_Receive_HS+0x30>)
 800dd1a:	f7fa fa05 	bl	8008128 <HAL_UART_Transmit_IT>
  return (USBD_OK);
 800dd1e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	2400023c 	.word	0x2400023c
 800dd2c:	2400011c 	.word	0x2400011c

0800dd30 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800dd40:	4b0d      	ldr	r3, [pc, #52]	; (800dd78 <CDC_Transmit_HS+0x48>)
 800dd42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e00b      	b.n	800dd6e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800dd56:	887b      	ldrh	r3, [r7, #2]
 800dd58:	461a      	mov	r2, r3
 800dd5a:	6879      	ldr	r1, [r7, #4]
 800dd5c:	4806      	ldr	r0, [pc, #24]	; (800dd78 <CDC_Transmit_HS+0x48>)
 800dd5e:	f7fe fb73 	bl	800c448 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800dd62:	4805      	ldr	r0, [pc, #20]	; (800dd78 <CDC_Transmit_HS+0x48>)
 800dd64:	f7fe fbb0 	bl	800c4c8 <USBD_CDC_TransmitPacket>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	2400023c 	.word	0x2400023c

0800dd7c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b087      	sub	sp, #28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	4613      	mov	r3, r2
 800dd88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800dd8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	371c      	adds	r7, #28
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
	...

0800dda0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	6039      	str	r1, [r7, #0]
 800ddaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	2212      	movs	r2, #18
 800ddb0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ddb2:	4b03      	ldr	r3, [pc, #12]	; (800ddc0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	240000cc 	.word	0x240000cc

0800ddc4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	4603      	mov	r3, r0
 800ddcc:	6039      	str	r1, [r7, #0]
 800ddce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	2204      	movs	r2, #4
 800ddd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ddd6:	4b03      	ldr	r3, [pc, #12]	; (800dde4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	240000e0 	.word	0x240000e0

0800dde8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	6039      	str	r1, [r7, #0]
 800ddf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddf4:	79fb      	ldrb	r3, [r7, #7]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d105      	bne.n	800de06 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	4907      	ldr	r1, [pc, #28]	; (800de1c <USBD_HS_ProductStrDescriptor+0x34>)
 800ddfe:	4808      	ldr	r0, [pc, #32]	; (800de20 <USBD_HS_ProductStrDescriptor+0x38>)
 800de00:	f7ff fdf0 	bl	800d9e4 <USBD_GetString>
 800de04:	e004      	b.n	800de10 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	4904      	ldr	r1, [pc, #16]	; (800de1c <USBD_HS_ProductStrDescriptor+0x34>)
 800de0a:	4805      	ldr	r0, [pc, #20]	; (800de20 <USBD_HS_ProductStrDescriptor+0x38>)
 800de0c:	f7ff fdea 	bl	800d9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de10:	4b02      	ldr	r3, [pc, #8]	; (800de1c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800de12:	4618      	mov	r0, r3
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	2400052c 	.word	0x2400052c
 800de20:	0800e648 	.word	0x0800e648

0800de24 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	6039      	str	r1, [r7, #0]
 800de2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	4904      	ldr	r1, [pc, #16]	; (800de44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800de34:	4804      	ldr	r0, [pc, #16]	; (800de48 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800de36:	f7ff fdd5 	bl	800d9e4 <USBD_GetString>
  return USBD_StrDesc;
 800de3a:	4b02      	ldr	r3, [pc, #8]	; (800de44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	2400052c 	.word	0x2400052c
 800de48:	0800e660 	.word	0x0800e660

0800de4c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	4603      	mov	r3, r0
 800de54:	6039      	str	r1, [r7, #0]
 800de56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	221a      	movs	r2, #26
 800de5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de5e:	f000 f843 	bl	800dee8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800de62:	4b02      	ldr	r3, [pc, #8]	; (800de6c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800de64:	4618      	mov	r0, r3
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	240000e4 	.word	0x240000e4

0800de70 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	4603      	mov	r3, r0
 800de78:	6039      	str	r1, [r7, #0]
 800de7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de7c:	79fb      	ldrb	r3, [r7, #7]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d105      	bne.n	800de8e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	4907      	ldr	r1, [pc, #28]	; (800dea4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800de86:	4808      	ldr	r0, [pc, #32]	; (800dea8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800de88:	f7ff fdac 	bl	800d9e4 <USBD_GetString>
 800de8c:	e004      	b.n	800de98 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	4904      	ldr	r1, [pc, #16]	; (800dea4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800de92:	4805      	ldr	r0, [pc, #20]	; (800dea8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800de94:	f7ff fda6 	bl	800d9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de98:	4b02      	ldr	r3, [pc, #8]	; (800dea4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	2400052c 	.word	0x2400052c
 800dea8:	0800e674 	.word	0x0800e674

0800deac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	4603      	mov	r3, r0
 800deb4:	6039      	str	r1, [r7, #0]
 800deb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800deb8:	79fb      	ldrb	r3, [r7, #7]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d105      	bne.n	800deca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	4907      	ldr	r1, [pc, #28]	; (800dee0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800dec2:	4808      	ldr	r0, [pc, #32]	; (800dee4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800dec4:	f7ff fd8e 	bl	800d9e4 <USBD_GetString>
 800dec8:	e004      	b.n	800ded4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	4904      	ldr	r1, [pc, #16]	; (800dee0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800dece:	4805      	ldr	r0, [pc, #20]	; (800dee4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ded0:	f7ff fd88 	bl	800d9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ded4:	4b02      	ldr	r3, [pc, #8]	; (800dee0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	2400052c 	.word	0x2400052c
 800dee4:	0800e680 	.word	0x0800e680

0800dee8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800deee:	4b0f      	ldr	r3, [pc, #60]	; (800df2c <Get_SerialNum+0x44>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800def4:	4b0e      	ldr	r3, [pc, #56]	; (800df30 <Get_SerialNum+0x48>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800defa:	4b0e      	ldr	r3, [pc, #56]	; (800df34 <Get_SerialNum+0x4c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4413      	add	r3, r2
 800df06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d009      	beq.n	800df22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df0e:	2208      	movs	r2, #8
 800df10:	4909      	ldr	r1, [pc, #36]	; (800df38 <Get_SerialNum+0x50>)
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f000 f814 	bl	800df40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df18:	2204      	movs	r2, #4
 800df1a:	4908      	ldr	r1, [pc, #32]	; (800df3c <Get_SerialNum+0x54>)
 800df1c:	68b8      	ldr	r0, [r7, #8]
 800df1e:	f000 f80f 	bl	800df40 <IntToUnicode>
  }
}
 800df22:	bf00      	nop
 800df24:	3710      	adds	r7, #16
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	1ff1e800 	.word	0x1ff1e800
 800df30:	1ff1e804 	.word	0x1ff1e804
 800df34:	1ff1e808 	.word	0x1ff1e808
 800df38:	240000e6 	.word	0x240000e6
 800df3c:	240000f6 	.word	0x240000f6

0800df40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df40:	b480      	push	{r7}
 800df42:	b087      	sub	sp, #28
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	4613      	mov	r3, r2
 800df4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df4e:	2300      	movs	r3, #0
 800df50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df52:	2300      	movs	r3, #0
 800df54:	75fb      	strb	r3, [r7, #23]
 800df56:	e027      	b.n	800dfa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	0f1b      	lsrs	r3, r3, #28
 800df5c:	2b09      	cmp	r3, #9
 800df5e:	d80b      	bhi.n	800df78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	0f1b      	lsrs	r3, r3, #28
 800df64:	b2da      	uxtb	r2, r3
 800df66:	7dfb      	ldrb	r3, [r7, #23]
 800df68:	005b      	lsls	r3, r3, #1
 800df6a:	4619      	mov	r1, r3
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	440b      	add	r3, r1
 800df70:	3230      	adds	r2, #48	; 0x30
 800df72:	b2d2      	uxtb	r2, r2
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e00a      	b.n	800df8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	0f1b      	lsrs	r3, r3, #28
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	7dfb      	ldrb	r3, [r7, #23]
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	4619      	mov	r1, r3
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	440b      	add	r3, r1
 800df88:	3237      	adds	r2, #55	; 0x37
 800df8a:	b2d2      	uxtb	r2, r2
 800df8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	011b      	lsls	r3, r3, #4
 800df92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df94:	7dfb      	ldrb	r3, [r7, #23]
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	3301      	adds	r3, #1
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	4413      	add	r3, r2
 800df9e:	2200      	movs	r2, #0
 800dfa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfa2:	7dfb      	ldrb	r3, [r7, #23]
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	75fb      	strb	r3, [r7, #23]
 800dfa8:	7dfa      	ldrb	r2, [r7, #23]
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d3d3      	bcc.n	800df58 <IntToUnicode+0x18>
  }
}
 800dfb0:	bf00      	nop
 800dfb2:	bf00      	nop
 800dfb4:	371c      	adds	r7, #28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
	...

0800dfc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b0b2      	sub	sp, #200	; 0xc8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dfc8:	f107 0310 	add.w	r3, r7, #16
 800dfcc:	22b8      	movs	r2, #184	; 0xb8
 800dfce:	2100      	movs	r1, #0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 fb25 	bl	800e620 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a1a      	ldr	r2, [pc, #104]	; (800e044 <HAL_PCD_MspInit+0x84>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d12c      	bne.n	800e03a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dfe0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800dfe4:	f04f 0300 	mov.w	r3, #0
 800dfe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800dfec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dff0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dff4:	f107 0310 	add.w	r3, r7, #16
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7f8 fa83 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800e004:	f7f2 fc8c 	bl	8000920 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e008:	f7f7 fb06 	bl	8005618 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <HAL_PCD_MspInit+0x88>)
 800e00e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e012:	4a0d      	ldr	r2, [pc, #52]	; (800e048 <HAL_PCD_MspInit+0x88>)
 800e014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e018:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <HAL_PCD_MspInit+0x88>)
 800e01e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e026:	60fb      	str	r3, [r7, #12]
 800e028:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800e02a:	2200      	movs	r2, #0
 800e02c:	2100      	movs	r1, #0
 800e02e:	204d      	movs	r0, #77	; 0x4d
 800e030:	f7f2 ffb5 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e034:	204d      	movs	r0, #77	; 0x4d
 800e036:	f7f2 ffcc 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e03a:	bf00      	nop
 800e03c:	37c8      	adds	r7, #200	; 0xc8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	40040000 	.word	0x40040000
 800e048:	58024400 	.word	0x58024400

0800e04c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e060:	4619      	mov	r1, r3
 800e062:	4610      	mov	r0, r2
 800e064:	f7fe fb59 	bl	800c71a <USBD_LL_SetupStage>
}
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	460b      	mov	r3, r1
 800e07a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e082:	78fa      	ldrb	r2, [r7, #3]
 800e084:	6879      	ldr	r1, [r7, #4]
 800e086:	4613      	mov	r3, r2
 800e088:	00db      	lsls	r3, r3, #3
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	440b      	add	r3, r1
 800e090:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	78fb      	ldrb	r3, [r7, #3]
 800e098:	4619      	mov	r1, r3
 800e09a:	f7fe fb93 	bl	800c7c4 <USBD_LL_DataOutStage>
}
 800e09e:	bf00      	nop
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e0b8:	78fa      	ldrb	r2, [r7, #3]
 800e0ba:	6879      	ldr	r1, [r7, #4]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	00db      	lsls	r3, r3, #3
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	440b      	add	r3, r1
 800e0c6:	3348      	adds	r3, #72	; 0x48
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	78fb      	ldrb	r3, [r7, #3]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	f7fe fc2c 	bl	800c92a <USBD_LL_DataInStage>
}
 800e0d2:	bf00      	nop
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b082      	sub	sp, #8
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fe fd66 	bl	800cbba <USBD_LL_SOF>
}
 800e0ee:	bf00      	nop
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0fe:	2301      	movs	r3, #1
 800e100:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d102      	bne.n	800e110 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e10a:	2300      	movs	r3, #0
 800e10c:	73fb      	strb	r3, [r7, #15]
 800e10e:	e008      	b.n	800e122 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	2b02      	cmp	r3, #2
 800e116:	d102      	bne.n	800e11e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e118:	2301      	movs	r3, #1
 800e11a:	73fb      	strb	r3, [r7, #15]
 800e11c:	e001      	b.n	800e122 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e11e:	f7f2 fbff 	bl	8000920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e128:	7bfa      	ldrb	r2, [r7, #15]
 800e12a:	4611      	mov	r1, r2
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe fd00 	bl	800cb32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fe fca8 	bl	800ca8e <USBD_LL_Reset>
}
 800e13e:	bf00      	nop
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
	...

0800e148 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe fcfb 	bl	800cb52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	6812      	ldr	r2, [r2, #0]
 800e16a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e16e:	f043 0301 	orr.w	r3, r3, #1
 800e172:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d005      	beq.n	800e188 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e17c:	4b04      	ldr	r3, [pc, #16]	; (800e190 <HAL_PCD_SuspendCallback+0x48>)
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	4a03      	ldr	r2, [pc, #12]	; (800e190 <HAL_PCD_SuspendCallback+0x48>)
 800e182:	f043 0306 	orr.w	r3, r3, #6
 800e186:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e188:	bf00      	nop
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	e000ed00 	.word	0xe000ed00

0800e194 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe fcf1 	bl	800cb8a <USBD_LL_Resume>
}
 800e1a8:	bf00      	nop
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe fd49 	bl	800cc5e <USBD_LL_IsoOUTIncomplete>
}
 800e1cc:	bf00      	nop
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	460b      	mov	r3, r1
 800e1de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1e6:	78fa      	ldrb	r2, [r7, #3]
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe fd05 	bl	800cbfa <USBD_LL_IsoINIncomplete>
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe fd5b 	bl	800ccc2 <USBD_LL_DevConnected>
}
 800e20c:	bf00      	nop
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe fd58 	bl	800ccd8 <USBD_LL_DevDisconnected>
}
 800e228:	bf00      	nop
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d140      	bne.n	800e2c2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e240:	4a22      	ldr	r2, [pc, #136]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a20      	ldr	r2, [pc, #128]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e24c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e250:	4b1e      	ldr	r3, [pc, #120]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e252:	4a1f      	ldr	r2, [pc, #124]	; (800e2d0 <USBD_LL_Init+0xa0>)
 800e254:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800e256:	4b1d      	ldr	r3, [pc, #116]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e258:	2209      	movs	r2, #9
 800e25a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e25c:	4b1b      	ldr	r3, [pc, #108]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e25e:	2202      	movs	r2, #2
 800e260:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e262:	4b1a      	ldr	r3, [pc, #104]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e264:	2200      	movs	r2, #0
 800e266:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e268:	4b18      	ldr	r3, [pc, #96]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e26a:	2202      	movs	r2, #2
 800e26c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e26e:	4b17      	ldr	r3, [pc, #92]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e270:	2200      	movs	r2, #0
 800e272:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e274:	4b15      	ldr	r3, [pc, #84]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e276:	2200      	movs	r2, #0
 800e278:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e27a:	4b14      	ldr	r3, [pc, #80]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e280:	4b12      	ldr	r3, [pc, #72]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e282:	2200      	movs	r2, #0
 800e284:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e286:	4b11      	ldr	r3, [pc, #68]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e288:	2200      	movs	r2, #0
 800e28a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e28c:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e28e:	2200      	movs	r2, #0
 800e290:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e292:	480e      	ldr	r0, [pc, #56]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e294:	f7f5 fecd 	bl	8004032 <HAL_PCD_Init>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e29e:	f7f2 fb3f 	bl	8000920 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e2a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2a6:	4809      	ldr	r0, [pc, #36]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e2a8:	f7f7 f93b 	bl	8005522 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e2ac:	2280      	movs	r2, #128	; 0x80
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	4806      	ldr	r0, [pc, #24]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e2b2:	f7f7 f8ef 	bl	8005494 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e2b6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	4803      	ldr	r0, [pc, #12]	; (800e2cc <USBD_LL_Init+0x9c>)
 800e2be:	f7f7 f8e9 	bl	8005494 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	2400072c 	.word	0x2400072c
 800e2d0:	40040000 	.word	0x40040000

0800e2d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7f5 ffc5 	bl	800427a <HAL_PCD_Start>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2f4:	7bfb      	ldrb	r3, [r7, #15]
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 f942 	bl	800e580 <USBD_Get_USB_Status>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e300:	7bbb      	ldrb	r3, [r7, #14]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b084      	sub	sp, #16
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	4608      	mov	r0, r1
 800e314:	4611      	mov	r1, r2
 800e316:	461a      	mov	r2, r3
 800e318:	4603      	mov	r3, r0
 800e31a:	70fb      	strb	r3, [r7, #3]
 800e31c:	460b      	mov	r3, r1
 800e31e:	70bb      	strb	r3, [r7, #2]
 800e320:	4613      	mov	r3, r2
 800e322:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e324:	2300      	movs	r3, #0
 800e326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e332:	78bb      	ldrb	r3, [r7, #2]
 800e334:	883a      	ldrh	r2, [r7, #0]
 800e336:	78f9      	ldrb	r1, [r7, #3]
 800e338:	f7f6 fcc5 	bl	8004cc6 <HAL_PCD_EP_Open>
 800e33c:	4603      	mov	r3, r0
 800e33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e340:	7bfb      	ldrb	r3, [r7, #15]
 800e342:	4618      	mov	r0, r3
 800e344:	f000 f91c 	bl	800e580 <USBD_Get_USB_Status>
 800e348:	4603      	mov	r3, r0
 800e34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	460b      	mov	r3, r1
 800e360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e370:	78fa      	ldrb	r2, [r7, #3]
 800e372:	4611      	mov	r1, r2
 800e374:	4618      	mov	r0, r3
 800e376:	f7f6 fd0e 	bl	8004d96 <HAL_PCD_EP_Close>
 800e37a:	4603      	mov	r3, r0
 800e37c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
 800e380:	4618      	mov	r0, r3
 800e382:	f000 f8fd 	bl	800e580 <USBD_Get_USB_Status>
 800e386:	4603      	mov	r3, r0
 800e388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e38a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	460b      	mov	r3, r1
 800e39e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3ae:	78fa      	ldrb	r2, [r7, #3]
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f6 fdc8 	bl	8004f48 <HAL_PCD_EP_SetStall>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f000 f8de 	bl	800e580 <USBD_Get_USB_Status>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
 800e3da:	460b      	mov	r3, r1
 800e3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3ec:	78fa      	ldrb	r2, [r7, #3]
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f6 fe0d 	bl	8005010 <HAL_PCD_EP_ClrStall>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f000 f8bf 	bl	800e580 <USBD_Get_USB_Status>
 800e402:	4603      	mov	r3, r0
 800e404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e406:	7bbb      	ldrb	r3, [r7, #14]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e410:	b480      	push	{r7}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	460b      	mov	r3, r1
 800e41a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e422:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	da0b      	bge.n	800e444 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e42c:	78fb      	ldrb	r3, [r7, #3]
 800e42e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e432:	68f9      	ldr	r1, [r7, #12]
 800e434:	4613      	mov	r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	440b      	add	r3, r1
 800e43e:	333e      	adds	r3, #62	; 0x3e
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	e00b      	b.n	800e45c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e444:	78fb      	ldrb	r3, [r7, #3]
 800e446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e44a:	68f9      	ldr	r1, [r7, #12]
 800e44c:	4613      	mov	r3, r2
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	4413      	add	r3, r2
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	440b      	add	r3, r1
 800e456:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e45a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e478:	2300      	movs	r3, #0
 800e47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e482:	78fa      	ldrb	r2, [r7, #3]
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f7f6 fbf8 	bl	8004c7c <HAL_PCD_SetAddress>
 800e48c:	4603      	mov	r3, r0
 800e48e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	4618      	mov	r0, r3
 800e494:	f000 f874 	bl	800e580 <USBD_Get_USB_Status>
 800e498:	4603      	mov	r3, r0
 800e49a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e49c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b086      	sub	sp, #24
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	60f8      	str	r0, [r7, #12]
 800e4ae:	607a      	str	r2, [r7, #4]
 800e4b0:	603b      	str	r3, [r7, #0]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e4c4:	7af9      	ldrb	r1, [r7, #11]
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	f7f6 fd02 	bl	8004ed2 <HAL_PCD_EP_Transmit>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4d2:	7dfb      	ldrb	r3, [r7, #23]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f000 f853 	bl	800e580 <USBD_Get_USB_Status>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4de:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	607a      	str	r2, [r7, #4]
 800e4f2:	603b      	str	r3, [r7, #0]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e506:	7af9      	ldrb	r1, [r7, #11]
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	f7f6 fc8d 	bl	8004e2a <HAL_PCD_EP_Receive>
 800e510:	4603      	mov	r3, r0
 800e512:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e514:	7dfb      	ldrb	r3, [r7, #23]
 800e516:	4618      	mov	r0, r3
 800e518:	f000 f832 	bl	800e580 <USBD_Get_USB_Status>
 800e51c:	4603      	mov	r3, r0
 800e51e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e520:	7dbb      	ldrb	r3, [r7, #22]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b082      	sub	sp, #8
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
 800e532:	460b      	mov	r3, r1
 800e534:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e53c:	78fa      	ldrb	r2, [r7, #3]
 800e53e:	4611      	mov	r1, r2
 800e540:	4618      	mov	r0, r3
 800e542:	f7f6 fcae 	bl	8004ea2 <HAL_PCD_EP_GetRxCount>
 800e546:	4603      	mov	r3, r0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e558:	4b03      	ldr	r3, [pc, #12]	; (800e568 <USBD_static_malloc+0x18>)
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	370c      	adds	r7, #12
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	24000c38 	.word	0x24000c38

0800e56c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
 800e586:	4603      	mov	r3, r0
 800e588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e58e:	79fb      	ldrb	r3, [r7, #7]
 800e590:	2b03      	cmp	r3, #3
 800e592:	d817      	bhi.n	800e5c4 <USBD_Get_USB_Status+0x44>
 800e594:	a201      	add	r2, pc, #4	; (adr r2, 800e59c <USBD_Get_USB_Status+0x1c>)
 800e596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59a:	bf00      	nop
 800e59c:	0800e5ad 	.word	0x0800e5ad
 800e5a0:	0800e5b3 	.word	0x0800e5b3
 800e5a4:	0800e5b9 	.word	0x0800e5b9
 800e5a8:	0800e5bf 	.word	0x0800e5bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b0:	e00b      	b.n	800e5ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b6:	e008      	b.n	800e5ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e5bc:	e005      	b.n	800e5ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c2:	e002      	b.n	800e5ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e5c4:	2303      	movs	r3, #3
 800e5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c8:	bf00      	nop
  }
  return usb_status;
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <__libc_init_array>:
 800e5d8:	b570      	push	{r4, r5, r6, lr}
 800e5da:	4d0d      	ldr	r5, [pc, #52]	; (800e610 <__libc_init_array+0x38>)
 800e5dc:	4c0d      	ldr	r4, [pc, #52]	; (800e614 <__libc_init_array+0x3c>)
 800e5de:	1b64      	subs	r4, r4, r5
 800e5e0:	10a4      	asrs	r4, r4, #2
 800e5e2:	2600      	movs	r6, #0
 800e5e4:	42a6      	cmp	r6, r4
 800e5e6:	d109      	bne.n	800e5fc <__libc_init_array+0x24>
 800e5e8:	4d0b      	ldr	r5, [pc, #44]	; (800e618 <__libc_init_array+0x40>)
 800e5ea:	4c0c      	ldr	r4, [pc, #48]	; (800e61c <__libc_init_array+0x44>)
 800e5ec:	f000 f820 	bl	800e630 <_init>
 800e5f0:	1b64      	subs	r4, r4, r5
 800e5f2:	10a4      	asrs	r4, r4, #2
 800e5f4:	2600      	movs	r6, #0
 800e5f6:	42a6      	cmp	r6, r4
 800e5f8:	d105      	bne.n	800e606 <__libc_init_array+0x2e>
 800e5fa:	bd70      	pop	{r4, r5, r6, pc}
 800e5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e600:	4798      	blx	r3
 800e602:	3601      	adds	r6, #1
 800e604:	e7ee      	b.n	800e5e4 <__libc_init_array+0xc>
 800e606:	f855 3b04 	ldr.w	r3, [r5], #4
 800e60a:	4798      	blx	r3
 800e60c:	3601      	adds	r6, #1
 800e60e:	e7f2      	b.n	800e5f6 <__libc_init_array+0x1e>
 800e610:	0800e6d8 	.word	0x0800e6d8
 800e614:	0800e6d8 	.word	0x0800e6d8
 800e618:	0800e6d8 	.word	0x0800e6d8
 800e61c:	0800e6dc 	.word	0x0800e6dc

0800e620 <memset>:
 800e620:	4402      	add	r2, r0
 800e622:	4603      	mov	r3, r0
 800e624:	4293      	cmp	r3, r2
 800e626:	d100      	bne.n	800e62a <memset+0xa>
 800e628:	4770      	bx	lr
 800e62a:	f803 1b01 	strb.w	r1, [r3], #1
 800e62e:	e7f9      	b.n	800e624 <memset+0x4>

0800e630 <_init>:
 800e630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e632:	bf00      	nop
 800e634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e636:	bc08      	pop	{r3}
 800e638:	469e      	mov	lr, r3
 800e63a:	4770      	bx	lr

0800e63c <_fini>:
 800e63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63e:	bf00      	nop
 800e640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e642:	bc08      	pop	{r3}
 800e644:	469e      	mov	lr, r3
 800e646:	4770      	bx	lr
